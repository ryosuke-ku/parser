super.setUp()
lookup(ModelInterpolator.class)
p.setProperty("key","value")
p.setProperty("key2","value2")
createInterpolator()
createModelBuildingRequest(p)
interpolator.interpolateObject(values,model,newFile("."),config,collector)
config.setSystemProperties(p)
p.setProperty("key","value")
p.setProperty("key2","value2")
createInterpolator()
createModelBuildingRequest(p)
interpolator.interpolateObject(obj,model,newFile("."),config,collector)
p.setProperty("key","value")
p.setProperty("key2","value2")
values.add("${key}")
values.add("${key2}")
createInterpolator()
createModelBuildingRequest(p)
interpolator.interpolateObject(obj,model,newFile("."),config,collector)
obj.values.get(0)
obj.values.get(1)
p.setProperty("key","value")
p.setProperty("key2","value2")
values.add("key")
values.add("${key2}")
createInterpolator()
createModelBuildingRequest(p)
interpolator.interpolateObject(obj,model,newFile("."),config,collector)
obj.values.get(0)
obj.values.get(1)
p.setProperty("key","value")
p.setProperty("key2","value2")
Collections.unmodifiableList(Collections.singletonList("${key}"))
Collections.singletonList("${key}")
createInterpolator()
createModelBuildingRequest(p)
interpolator.interpolateObject(obj,model,newFile("."),config,collector)
obj.values.get(0)
p.setProperty("key","value")
p.setProperty("key2","value2")
p.setProperty("key3","value3")
p.setProperty("key4","value4")
values.add(newString[]{"${key}","${key2}"})
values.add(newString[]{"${key3}","${key4}"})
createInterpolator()
createModelBuildingRequest(p)
interpolator.interpolateObject(obj,model,newFile("."),config,collector)
obj.values.get(0)
obj.values.get(0)
obj.values.get(1)
obj.values.get(1)
p.setProperty("key","value")
p.setProperty("key2","value2")
values.put("key","${key}")
values.put("key2","${key2}")
createInterpolator()
createModelBuildingRequest(p)
interpolator.interpolateObject(obj,model,newFile("."),config,collector)
obj.values.get("key")
obj.values.get("key2")
p.setProperty("key","value")
p.setProperty("key2","value2")
values.put("key","val")
values.put("key2","${key2}")
createInterpolator()
createModelBuildingRequest(p)
interpolator.interpolateObject(obj,model,newFile("."),config,collector)
obj.values.get("key")
obj.values.get("key2")
p.setProperty("key","value")
p.setProperty("key2","value2")
Collections.unmodifiableMap(Collections.singletonMap("key","${key}"))
Collections.singletonMap("key","${key}")
createInterpolator()
createModelBuildingRequest(p)
interpolator.interpolateObject(obj,model,newFile("."),config,collector)
obj.values.get("key")
p.setProperty("key","value")
p.setProperty("key2","value2")
p.setProperty("key3","value3")
p.setProperty("key4","value4")
values.put("key",newString[]{"${key}","${key2}"})
values.put("key2",newString[]{"${key3}","${key4}"})
createInterpolator()
createModelBuildingRequest(p)
interpolator.interpolateObject(obj,model,newFile("."),config,collector)
obj.values.get("key")
obj.values.get("key")
obj.values.get("key2")
obj.values.get("key2")
getValueList()
createModelBuildingRequest(p)
countDownLatch.await()
interpolator.interpolateObject(obj,model,newFile("."),config,collector)
futures.add(task)
newThread(task).start()
countDownLatch.countDown()
result.get()
getValueList()
createModelBuildingRequest(p)
countDownLatch.await()
interpolator.interpolateObject(obj,model,newFile("."),config,collector)
futures.add(task)
newThread(task).start()
countDownLatch.countDown()
result.get()
values.add(newString[]{"${key}","${key2}"})
values.add(newString[]{"${key3}","${key4}"})
values.add(newString[]{"${key}","${key2}"})
values.add(newString[]{"${key3}","${key4}"})
values.add(newString[]{"${key}","${key2}"})
values.add(newString[]{"${key3}","${key4}"})
props.setProperty("expression","value")
request.setUserProperties(props)
interpolator.interpolateObject(newClassWithFinalField(),newModel(),null,request,problems)
props.setProperty("expression","value")
request.setUserProperties(props)
source.setLocation("${expression}")
source.setModelId("${expression}")
model.setLocation("",newInputLocation(1,1,source))
interpolator.interpolateObject(model,model,null,request,problems)
source.getLocation()
source.getModelId()
