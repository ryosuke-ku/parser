String.valueOf(ifCondition)
String.valueOf(ifCondition)
String.valueOf(unlessCondition)
String.valueOf(unlessCondition)
formatters.addElement(elem)
destDir.getAbsolutePath()
add(fs)
fs.getProject()
fs.setProject(project)
resources.add(rc)
Collections.enumeration(Arrays.asList(createAllJUnitTest()))
Arrays.asList(createAllJUnitTest())
createAllJUnitTest()
createAllJUnitTest()
v.ensureCapacity(v.size()+tests.length)
v.size()
v.addElement(test)
Stream.of(getFilenames())
getFilenames()
Stream.of(getFilenames()).map(BatchTest::javaToClass)
Stream.of(getFilenames()).map(BatchTest::javaToClass).map(this::createJUnitTest)
Stream.of(getFilenames()).map(BatchTest::javaToClass).map(this::createJUnitTest).toArray(JUnitTest[]::new)
resources.stream()
resources.stream().filter(Resource::isExists)
resources.stream().filter(Resource::isExists).map(Resource::getName)
resources.stream().filter(Resource::isExists).map(Resource::getName).filter(name->name.endsWith(".java")||name.endsWith(".class"))
name.endsWith(".java")
name.endsWith(".class")
resources.stream().filter(Resource::isExists).map(Resource::getName).filter(name->name.endsWith(".java")||name.endsWith(".class")).map(name->name.substring(0,name.lastIndexOf('.')))
name.substring(0,name.lastIndexOf('.'))
name.lastIndexOf('.')
resources.stream().filter(Resource::isExists).map(Resource::getName).filter(name->name.endsWith(".java")||name.endsWith(".class")).map(name->name.substring(0,name.lastIndexOf('.'))).toArray(String[]::new)
filename.replace(File.separatorChar,'.')
filename.replace(File.separatorChar,'.').replace('/','.')
filename.replace(File.separatorChar,'.').replace('/','.').replace('\\','.')
test.setName(classname)
test.setHaltonerror(this.haltOnError)
test.setHaltonfailure(this.haltOnFail)
test.setFiltertrace(this.filtertrace)
test.setFork(this.fork)
test.setIf(getIfCondition())
getIfCondition()
test.setUnless(getUnlessCondition())
getUnlessCondition()
test.setTodir(this.destDir)
test.setFailureProperty(failureProperty)
test.setErrorProperty(errorProperty)
test.setSkipNonTests(isSkipNonTests())
isSkipNonTests()
this.formatters.forEach(test::addFormatter)
resolveMethods()
String.join(",",methods)
parseTestMethodNamesList(methodsList)
methodNames.trim()
methodNames.length()
methodNames.charAt(length-1)
methodNames.substring(0,length-1)
methodNames.substring(0,length-1).trim()
methodNames.length()
methodNames.toCharArray()
Character.isJavaIdentifierStart(c)
methodNames.substring(wordStartIndex,i)
methodNames.substring(wordStartIndex,i)
Character.isJavaIdentifierPart(c)
methodNames.substring(wordStartIndex,chars.length)
p.forEach(props::put)
PropertyHelper.getPropertyHelper(p)
ph.testIfCondition(getIfCondition())
getIfCondition()
ph.testUnlessCondition(getUnlessCondition())
getUnlessCondition()
formatters.size()
formatters.copyInto(fes)
formatters.size()
v.addElement(formatters.elementAt(i))
formatters.elementAt(i)
super.clone()
props.clone()
formatters.clone()
log(WARN_OVERRIDING+'<'+name+'>',Project.MSG_INFO)
logOverride("condition",condition)
logOverride("application",application)
logOverride("setup",setup)
logOverride("block",block)
logOverride("tests",tests)
logOverride("reporting",reporting)
logOverride("teardown",teardown)
unit.getMultiplier()
unit.getMultiplier()
task.bindToOwner(this)
task.init()
bind(par)
par.setFailOnAny(true)
par.setTimeout(parallelTimeout)
bind(par)
par.setFailOnAny(true)
par.setTimeout(parallelTimeout)
task.getProject()
validateTask(setup,"setup")
validateTask(application,"application")
validateTask(tests,"tests")
validateTask(reporting,"reporting")
validateTask(teardown,"teardown")
condition.eval()
log(SKIPPING_TESTS)
newParallel(timeoutMillis)
applicationRun.addTask(application)
bind(testRun)
ta.bindToOwner(this)
validateTask(ta,"block")
testRun.addTask(ta)
block.calculateMaxWaitMillis()
testRun.addTask(tests)
testRun.addTask(reporting)
newParallel(testRunTimeout,testRun)
newParallel(timeoutMillis,setup)
setupRun.execute()
worker.start()
timedTests.execute()
newParallel(timeoutMillis,teardown)
teardownRun.execute()
worker.waitUntilFinished(shutdownTimeMillis)
worker.isAlive()
log(APPLICATION_FORCIBLY_SHUT_DOWN,Project.MSG_WARN)
worker.interrupt()
worker.waitUntilFinished(shutdownTimeMillis)
log(SHUTDOWN_INTERRUPTED,e,Project.MSG_VERBOSE)
worker.getBuildException()
processExceptions()
ignoringThrowable(APPLICATION_EXCEPTION,applicationException)
ignoringThrowable(TEARDOWN_EXCEPTION,teardownException)
getProject()
getProject().getProperty(failureProperty)
log(failureMessage)
log(type+": "+thrown.toString(),thrown,Project.MSG_WARN)
thrown.toString()
countConditions()
getConditions()
getConditions().nextElement()
getConditions().nextElement().eval()
System.out.println("Hello From Test")
p.init()
System.getProperty("build.tests.value")
newFile(buildTestcases).isDirectory()
FILE_UTILS.toURI(buildTestcases)
Arrays.asList(urlFromParent,urlFromPath)
Collections.list(acl.getResources(TEST_RESOURCE))
acl.getResources(TEST_RESOURCE)
Arrays.asList(urlFromPath,urlFromParent)
Collections.list(acl.getResources(TEST_RESOURCE))
acl.getResources(TEST_RESOURCE)
System.getProperty("build.tests.value")
newFile(buildTestcases).isDirectory()
FILE_UTILS.toURI(buildTestcases)
acl.setIsolated(true)
Collections.singletonList(urlFromPath)
Collections.list(acl.getResources(TEST_RESOURCE))
acl.getResources(TEST_RESOURCE)
name.equals(TEST_RESOURCE)
Collections.enumeration(Collections.singleton(newURL("https://ant.apache.org/"+name)))
Collections.singleton(newURL("https://ant.apache.org/"+name))
Collections.enumeration(Collections.emptySet())
Collections.emptySet()
buildRule.configureProject("src/etc/testcases/core/antclassloader.xml")
buildRule.executeTarget("setUp")
loader.cleanup()
buildRule.getProject()
buildRule.getProject().getProperty("main.jar")
buildRule.getProject()
buildRule.getProject().getProperty("ext.jar")
buildRule.getProject()
myPath.setLocation(newFile(mainjarstring))
buildRule.getProject()
buildRule.getProject().setUserProperty("build.sysclasspath","ignore")
buildRule.getProject()
buildRule.getProject().createClassLoader(myPath)
loader.getClasspath()
buildRule.getProject()
buildRule.getProject().getProperty("main.jar.nonascii")
buildRule.getProject()
buildRule.getProject().getProperty("ext.jar.nonascii")
buildRule.getProject()
myPath.setLocation(newFile(mainjarstring))
buildRule.getProject()
buildRule.getProject().setUserProperty("build.sysclasspath","ignore")
buildRule.getProject()
buildRule.getProject().createClassLoader(myPath)
loader.getClasspath()
thrown.expect(ClassNotFoundException.class)
buildRule.getProject()
buildRule.getProject()
buildRule.getProject().createClassLoader(path)
loader.findClass("fubar")
loader.cleanup()
loader.findClass("fubar")
buildRule.getProject()
buildRule.getProject().fireBuildFinished(null)
loader.findClass("fubar")
buildRule.executeTarget("prepareGetPackageTest")
buildRule.getProject()
myPath.setLocation(newFile(buildRule.getProject().getProperty("test.jar")))
buildRule.getProject()
buildRule.getProject().getProperty("test.jar")
buildRule.getProject()
buildRule.getProject().setUserProperty("build.sysclasspath","ignore")
buildRule.getProject()
buildRule.getProject().createClassLoader(myPath)
loader.findClass("org.example.Foo")
newGetPackageWrapper(loader).getPackage("org.example")
buildRule.executeTarget("prepareGetPackageTest")
buildRule.getProject()
buildRule.getProject()
buildRule.getProject().getProperty("test.jar")
myPath.setLocation(testJar)
buildRule.getProject()
buildRule.getProject().setUserProperty("build.sysclasspath","ignore")
buildRule.getProject()
buildRule.getProject().createClassLoader(myPath)
loader.findClass("org.example.Foo")
foo.getProtectionDomain()
foo.getProtectionDomain().getCodeSource()
foo.getProtectionDomain().getCodeSource().getLocation()
FileUtils.getFileUtils()
FileUtils.getFileUtils().getFileURL(testJar)
buildRule.executeTarget("signTestJar")
buildRule.getProject()
buildRule.getProject().getProperty("test.jar")
buildRule.getProject()
myPath.setLocation(jar)
buildRule.getProject()
buildRule.getProject().setUserProperty("build.sysclasspath","ignore")
buildRule.getProject()
buildRule.getProject().createClassLoader(myPath)
loader.findClass("org.example.Foo")
foo.getProtectionDomain()
foo.getProtectionDomain().getCodeSource()
foo.getProtectionDomain().getCodeSource().getCertificates()
foo.getSigners()
buildRule.executeTarget("createNonJar")
buildRule.getProject()
buildRule.getProject().getProperty("tmp.dir")
buildRule.getProject()
myPath.setLocation(jar)
buildRule.getProject()
buildRule.getProject().setUserProperty("build.sysclasspath","ignore")
buildRule.getProject()
buildRule.getProject().createClassLoader(myPath)
System.setErr(err)
loader.getResource("foo.txt")
buildRule.getLog()
log.indexOf("CLASSPATH element ")
log.indexOf("foo.jar is not a JAR",startMessage)
System.setErr(sysErr)
acl.getResource("META-INF/MANIFEST.MF")
acl.getResources("META-INF/MANIFEST.MF")
acl.getResources("META-INF/MANIFEST.MF").hasMoreElements()
acl.getResource("META-INF/MANIFEST.MF")
acl.getResources("META-INF/MANIFEST.MF")
acl.getResources("META-INF/MANIFEST.MF").hasMoreElements()
AntClassLoader.newAntClassLoader(newEmptyLoader(),null,newPath(null),true)
acl.getResource("META-INF/MANIFEST.MF")
acl.getResources("META-INF/MANIFEST.MF")
acl.getResources("META-INF/MANIFEST.MF").hasMoreElements()
buildRule.executeTarget("testMRJar")
JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
buildRule.getOutput()
targetOutput.contains("mrjar test result = 9")
targetOutput.contains("mrjar test result = default")
Collections.emptyEnumeration()
super(parent)
super.getPackage(s)
project.getTargets()
project.getTargets().containsKey(tearDown)
project.executeTarget(tearDown)
expectSpecificBuildException(target,cause,null)
executeTarget(target)
getLog()
getLog()
realLog.contains(substring)
getLog()
realLog.contains(substring)
getOutput()
realOutput.contains(substring)
executeTarget(target)
executeTarget(target)
logBuffer.toString()
executeTarget(target)
getFullLog()
getFullLog()
realLog.contains(substring)
fullLogBuffer.toString()
executeTarget(target)
getOutput()
realOutput.trim()
executeTarget(target)
getOutput()
getError()
cleanBuffer(outBuffer)
cleanBuffer(errBuffer)
buffer.length()
buffer.charAt(i)
cleanedBuffer.append(ch)
cleanedBuffer.toString()
configureProject(filename,Project.MSG_DEBUG)
configureProject(filename,Project.MSG_DEBUG)
sysOut.flush()
sysErr.flush()
System.setOut(out)
System.setErr(err)
project.executeTarget(targetName)
System.setOut(sysOut)
System.setErr(sysErr)
project.getBaseDir()
project.getProperty("output")
executeTarget(target)
ex.getMessage()
ex.getMessage()
ex.getMessage().equals(msg)
fail("Should throw BuildException because: "+cause)
executeTarget(target)
ex.getMessage()
ex.getMessage()
ex.getMessage().contains(contains)
fail("Should throw BuildException because: "+cause)
executeTarget(target)
project.getProperty(property)
project.getProperty(property)
executeTarget(target)
expectPropertySet(target,property,null)
getClass()
getClass().getResource(resource)
buffer.append((char)b)
event.getPriority()
event.getPriority()
event.getPriority()
event.getPriority()
logBuffer.append(event.getMessage())
event.getMessage()
fullLogBuffer.append(event.getMessage())
event.getMessage()
buildRule.configureProject("src/etc/testcases/core/case.xml")
buildRule.executeTarget("case-sensitivity")
thrown.expect(BuildException.class)
thrown.expectMessage("Problem: failed to create task or type ecHO")
buildRule.executeTarget("taskcase")
DefaultLogger.throwableMessage(m,error,verbose)
m.toString()
w.println("problem")
w.println("  at p.C.m")
String.format("problem%n  at p.C.m%n")
msg(x,false)
String.format("build.xml:1: problem%n  at p.C.m%n")
msg(be,false)
ProjectHelper.addLocationToBuildException(be,newLocation("build.xml",2,0))
String.format("build.xml:2: The following error occurred while executing this line:%n"+"build.xml:1: problem%n  at p.C.m%n")
msg(be,false)
w.println("problem")
w.println("  at p.C.m")
String.format("problem%n  at p.C.m%n")
msg(x,false)
String.format("build.xml:1: problem%n  at p.C.m%n")
msg(be,false)
ProjectHelper.addLocationToBuildException(be,newLocation("build.xml",2,0))
String.format("build.xml:2: The following error occurred while executing this line:%n"+"build.xml:1: problem%n  at p.C.m%n")
msg(be,false)
buildRule.configureProject("src/etc/testcases/core/directoryscanner.xml")
buildRule.getProject()
buildRule.getProject().executeTarget("setUp")
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setIncludes(newString[]{"alpha"})
ds.scan()
compareFiles(ds,newString[]{},newString[]{"alpha"})
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setIncludes(newString[]{"alpha/"})
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"","alpha","alpha/beta","alpha/beta/gamma"})
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setIncludes(newString[]{"alpha/beta/gamma/GAMMA.XML"})
ds.scan()
compareFiles(ds,newString[]{},newString[]{})
ds.setCaseSensitive(false)
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setIncludes(newString[]{"alpha/beta/gamma/GAMMA.XML"})
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{})
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setIncludes(newString[]{"ALPHA/"})
ds.setCaseSensitive(false)
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
assumeTrue("Current system does not support Symlinks",supportsSymlinks)
buildRule.getProject()
buildRule.getProject().executeTarget("symlink-setup")
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setIncludes(newString[]{"alpha/beta/gamma/"})
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{"alpha/beta/gamma"})
assumeTrue("Current system does not support Symlinks",supportsSymlinks)
buildRule.getProject()
buildRule.getProject().executeTarget("symlink-setup")
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setIncludes(newString[]{"alpha/beta/gamma/"})
ds.setFollowSymlinks(false)
ds.scan()
compareFiles(ds,newString[]{},newString[]{})
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setIncludes(newString[]{"alpha/be?a/**","alpha/beta/gamma/"})
ds.scan()
compareFiles(ds,expectedFiles,expectedDirectories)
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setIncludes(newString[]{"alpha/beta/gamma/","alpha/be?a/**"})
ds.scan()
compareFiles(ds,expectedFiles,expectedDirectories)
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setIncludes(newString[]{"alpha/","ALPHA/"})
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setIncludes(newString[]{"alpha/","ALPHA/"})
ds.setCaseSensitive(false)
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setIncludes(newString[]{"alpha/beta/gamma/gamma.xml","alpha/beta/gamma/GAMMA.XML"})
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{})
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setIncludes(newString[]{"alpha/beta/gamma/gamma.xml","alpha/beta/gamma/GAMMA.XML"})
ds.setCaseSensitive(false)
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{})
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setIncludes(newString[]{"alpha/","ALPHA/beta/"})
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setIncludes(newString[]{"alpha/","ALPHA/beta/"})
ds.setCaseSensitive(false)
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
buildRule.getProject()
buildRule.getProject().getBaseDir()
linkFile.exists()
targetFile.exists()
targetFile.getAbsolutePath()
linkFile.getAbsolutePath()
Runtime.getRuntime()
Runtime.getRuntime().exec(command)
process.waitFor()
ds.setFollowSymlinks(true)
ds.setBasedir(dir)
ds.setExcludes(newString[]{"ant/**"})
ds.scan()
ds.getIncludedDirectories()
included.equals("zip")
included.equals("ThisIsALink"+File.separator+"taskdefs")
ds.setFollowSymlinks(false)
ds.setBasedir(dir)
ds.setExcludes(newString[]{"ant/**"})
ds.scan()
ds.getIncludedDirectories()
included.equals("zip")
included.equals("ThisIsALink"+File.separator+"taskdefs")
linkFile.delete()
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setIncludes(newString[]{"**/*.xml"})
ds.setExcludes(newString[]{"alpha/beta/b*xml"})
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{})
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setIncludes(newString[]{"alpha/**"})
ds.setExcludes(newString[]{"alpha/**"})
ds.scan()
compareFiles(ds,newString[]{},newString[]{})
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setIncludes(newString[]{"alpha/**","alpha/beta/gamma/**"})
ds.setExcludes(newString[]{"alpha/beta/**"})
ds.scan()
compareFiles(ds,newString[]{},newString[]{"alpha"})
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setExcludes(newString[]{"alpha/**","alpha/beta/gamma/**"})
ds.setIncludes(newString[]{"alpha/beta/**"})
ds.scan()
compareFiles(ds,newString[]{},newString[]{})
buildRule.getProject()
buildRule.getProject().executeTarget("children-of-excluded-dir-setup")
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setExcludes(newString[]{"alpha/**"})
ds.setFollowSymlinks(false)
ds.scan()
compareFiles(ds,newString[]{"delta/delta.xml"},newString[]{"","delta"})
buildRule.getProject()
buildRule.getProject().executeTarget("children-of-excluded-dir-setup")
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setExcludes(newString[]{"alpha"})
ds.setFollowSymlinks(false)
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml","delta/delta.xml"},newString[]{"","alpha/beta","alpha/beta/gamma","delta"})
buildRule.getProject()
buildRule.getProject().getProperty("tests.and.ant.share.classloader")
assumeFalse("cannot execute testIsExcludedDirectoryScanned when tests are forked, "+"package private method called",shareclassloader==null||shareclassloader.indexOf("${")==0)
shareclassloader.indexOf("${")
buildRule.getProject()
buildRule.getProject().executeTarget("children-of-excluded-dir-setup")
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setExcludes(newString[]{"**/gamma/**"})
ds.setFollowSymlinks(false)
ds.scan()
ds.getScannedDirs()
set.isEmpty()
"alpha/beta/gamma/".replace('/',File.separatorChar)
not(hasItem(s))
hasItem(s)
buildRule.getProject()
buildRule.getProject().executeTarget("extended-setup")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.getProject().getProperty("output").replace(File.separatorChar,'/')
ds.setIncludes(newString[]{tmpdir+"/**/*"})
ds.scan()
compareFiles(ds,newString[]{tmpdir+"/alpha/beta/beta.xml",tmpdir+"/alpha/beta/gamma/gamma.xml",tmpdir+"/delta/delta.xml"},newString[]{tmpdir+"/alpha",tmpdir+"/alpha/beta",tmpdir+"/alpha/beta/gamma",tmpdir+"/delta"})
ds.setIncludes(newString[]{"alpha/**","alpha/beta/gamma/**"})
ds.scan()
compareFiles(ds,mt,mt)
buildRule.getProject()
buildRule.getProject().executeTarget("extended-setup")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.getProject().getProperty("output").replace(File.separatorChar,'/')
ds.setIncludes(newString[]{tmpdir+"/**/*"})
ds.setExcludes(newString[]{"**/alpha","**/delta/*"})
ds.scan()
compareFiles(ds,newString[]{tmpdir+"/alpha/beta/beta.xml",tmpdir+"/alpha/beta/gamma/gamma.xml"},newString[]{tmpdir+"/alpha/beta",tmpdir+"/alpha/beta/gamma",tmpdir+"/delta"})
buildRule.getProject()
buildRule.getProject().executeTarget("extended-setup")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.getProject().getProperty("output").replace(File.separatorChar,'/')
ds.setIncludes(newString[]{tmpdir+"/alpha/beta/**/*",tmpdir+"/delta/*"})
ds.setExcludes(newString[]{"**/beta.xml"})
ds.scan()
compareFiles(ds,newString[]{tmpdir+"/alpha/beta/gamma/gamma.xml",tmpdir+"/delta/delta.xml"},newString[]{tmpdir+"/alpha/beta/gamma"})
assumeTrue("Can't use drive letters on non DOS or Netware systems",Os.isFamily("dos")||Os.isFamily("netware"))
Os.isFamily("dos")
Os.isFamily("netware")
newFile(File.separator).getAbsolutePath()
newFile(File.separator).getAbsolutePath().toUpperCase()
ds.setIncludes(newString[]{pattern})
ds.scan()
ds.getIncludedFilesCount()
ds.getIncludedDirsCount()
ds.getIncludedFiles()
ds.getIncludedDirectories()
Arrays.stream(includedFiles)
Arrays.stream(includedFiles).map(includedFile->includedFile.replace(File.separatorChar,'/'))
includedFile.replace(File.separatorChar,'/')
Arrays.stream(includedFiles).map(includedFile->includedFile.replace(File.separatorChar,'/')).collect(Collectors.toCollection(TreeSet::new))
Collectors.toCollection(TreeSet::new)
Arrays.stream(includedDirectories)
Arrays.stream(includedDirectories).map(includedDirectory->includedDirectory.replace(File.separatorChar,'/'))
includedDirectory.replace(File.separatorChar,'/')
Arrays.stream(includedDirectories).map(includedDirectory->includedDirectory.replace(File.separatorChar,'/')).collect(Collectors.toCollection(TreeSet::new))
Collectors.toCollection(TreeSet::new)
ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
buildRule.getProject()
buildRule.getProject().getProperty("output")
ds.setExcludes(newString[]{"**/beta/**"})
ds.scan()
Arrays.asList(ds.getExcludedDirectories())
ds.getExcludedDirectories()
dirs.size()
hasItem("alpha/beta".replace('/',File.separatorChar))
"alpha/beta".replace('/',File.separatorChar)
hasItem("alpha/beta/gamma".replace('/',File.separatorChar))
"alpha/beta/gamma".replace('/',File.separatorChar)
Arrays.asList(ds.getExcludedFiles())
ds.getExcludedFiles()
files.size()
hasItem("alpha/beta/beta.xml".replace('/',File.separatorChar))
"alpha/beta/beta.xml".replace('/',File.separatorChar)
hasItem("alpha/beta/gamma/gamma.xml".replace('/',File.separatorChar))
"alpha/beta/gamma/gamma.xml".replace('/',File.separatorChar)
ds.setBasedir(newFile("."))
ds.setIncludes(newString[]{"**"})
ds.addDefaultExcludes()
ds.ensureNonPatternSetsReady()
f.getAbsolutePath()
ds.contentsExcluded(p)
buildRule.configureProject("src/etc/testcases/core/dispatch/dispatch.xml")
thrown.expect(BuildException.class)
thrown.expectMessage("list")
buildRule.executeTarget("disp")
buildRule.configureProject("src/etc/testcases/core/executor.xml")
buildRule.getProject()
buildRule.getProject().addBuildListener(this)
getProject(e,false)
getProject(e,false)
getProject(e,false)
buildRule.getProject()
buildRule.getProject().executeTargets(TARGET_NAMES)
getProject(SINGLE_CHECK)
getProject(SINGLE_CHECK).executeTargets(TARGET_NAMES)
getProject(IGNORE_DEPS)
getProject(IGNORE_DEPS).executeTargets(TARGET_NAMES)
thrown.expect(BuildException.class)
thrown.expectMessage("failfoo")
getProject(null,true)
getProject(null,true).executeTargets(TARGET_NAMES)
thrown.expect(BuildException.class)
thrown.expectMessage("failfoo")
getProject(SINGLE_CHECK,true)
getProject(SINGLE_CHECK,true).executeTargets(TARGET_NAMES)
getProject(IGNORE_DEPS,true)
getProject(IGNORE_DEPS,true).executeTargets(TARGET_NAMES)
thrown.expect(BuildException.class)
thrown.expectMessage("failfoo")
getProject(null,true,true)
getProject(null,true,true).executeTargets(TARGET_NAMES)
thrown.expect(BuildException.class)
thrown.expectMessage("failfoo")
getProject(SINGLE_CHECK,true,true)
getProject(SINGLE_CHECK,true,true).executeTargets(TARGET_NAMES)
thrown.expect(BuildException.class)
thrown.expectMessage("failfoo")
targetNames.add(0,"foo")
getProject(IGNORE_DEPS,true,true)
getProject(IGNORE_DEPS,true,true).executeTargets(targetNames)
buildRule.configureProject("src/etc/testcases/core/extended-taskdef.xml")
buildRule.executeTarget("teardown")
thrown.expect(BuildException.class)
thrown.expectMessage("executing the Foo task")
buildRule.executeTarget("testRun")
thrown.expect(BuildException.class)
thrown.expectMessage("executing the Foo task")
buildRule.executeTarget("testRun2")
buildRule.configureProject("src/etc/testcases/core/immutable.xml")
buildRule.executeTarget("test1")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test2")
buildRule.getProject()
buildRule.getProject().getProperty("DSTAMP")
buildRule.getProject()
buildRule.getProject().getProperty("start.DSTAMP")
buildRule.executeTarget("test3")
buildRule.getProject()
buildRule.getProject().getProperty("DSTAMP")
buildRule.executeTarget("test4")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test5")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test6")
buildRule.getProject()
buildRule.getProject().getProperty("test1")
buildRule.getProject()
buildRule.getProject().getProperty("test2")
buildRule.executeTarget("test7")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.configureProject("src/etc/testcases/core/include/basic/include.xml")
buildRule.executeTarget("test1")
buildRule.getLog()
buildRule.configureProject("src/etc/testcases/core/include/frag#ment/include.xml")
buildRule.executeTarget("test1")
buildRule.getLog()
buildRule.configureProject("src/etc/testcases/core/include/frag#ment/simple.xml")
buildRule.executeTarget("test1")
buildRule.getLog()
buildRule.configureProject("src/etc/testcases/core/include/basic/relative.xml")
buildRule.executeTarget("test1")
buildRule.getLog()
buildRule.configureProject("src/etc/testcases/core/include/frag#ment/relative.xml")
buildRule.executeTarget("test1")
buildRule.getLog()
thrown.expect(BuildException.class)
thrown.expect(hasProperty("location",hasProperty("fileName",containsString("build.xml"))))
hasProperty("location",hasProperty("fileName",containsString("build.xml")))
hasProperty("fileName",containsString("build.xml"))
containsString("build.xml")
buildRule.configureProject("src/etc/testcases/core/include/including_file_parse_error/build.xml")
thrown.expect(BuildException.class)
thrown.expect(hasProperty("location",both(hasProperty("fileName",containsString("build.xml"))).and(hasProperty("lineNumber",equalTo(14)))))
hasProperty("location",both(hasProperty("fileName",containsString("build.xml"))).and(hasProperty("lineNumber",equalTo(14))))
both(hasProperty("fileName",containsString("build.xml")))
hasProperty("fileName",containsString("build.xml"))
containsString("build.xml")
both(hasProperty("fileName",containsString("build.xml"))).and(hasProperty("lineNumber",equalTo(14)))
hasProperty("lineNumber",equalTo(14))
equalTo(14)
thrown.expectMessage(startsWith("Warning: Could not find file "))
startsWith("Warning: Could not find file ")
buildRule.configureProject("src/etc/testcases/core/include/including_file_task_error/build.xml")
thrown.expect(BuildException.class)
thrown.expect(hasProperty("location",hasProperty("fileName",containsString("included_file.xml"))))
hasProperty("location",hasProperty("fileName",containsString("included_file.xml")))
hasProperty("fileName",containsString("included_file.xml"))
containsString("included_file.xml")
buildRule.configureProject("src/etc/testcases/core/include/included_file_parse_error/build.xml")
thrown.expect(BuildException.class)
thrown.expect(hasProperty("location",both(hasProperty("fileName",containsString("included_file.xml"))).and(hasProperty("lineNumber",equalTo(2)))))
hasProperty("location",both(hasProperty("fileName",containsString("included_file.xml"))).and(hasProperty("lineNumber",equalTo(2))))
both(hasProperty("fileName",containsString("included_file.xml")))
hasProperty("fileName",containsString("included_file.xml"))
containsString("included_file.xml")
both(hasProperty("fileName",containsString("included_file.xml"))).and(hasProperty("lineNumber",equalTo(2)))
hasProperty("lineNumber",equalTo(2))
equalTo(2)
thrown.expectMessage(startsWith("Warning: Could not find file "))
startsWith("Warning: Could not find file ")
buildRule.configureProject("src/etc/testcases/core/include/included_file_task_error/build.xml")
buildRule.executeTarget("test")
buildRule.configureProject("src/etc/testcases/core/include/with space/include.xml")
buildRule.executeTarget("test1")
buildRule.getLog()
buildRule.configureProject("src/etc/testcases/core/include/with space/simple.xml")
buildRule.executeTarget("test1")
buildRule.getLog()
buildRule.configureProject("src/etc/testcases/core/include/with space/relative.xml")
buildRule.executeTarget("test1")
buildRule.getLog()
p.setBasedir(projectBasedir)
IntrospectionHelper.getHelper(getClass())
getClass()
ih.isDynamic()
ih.isContainer()
thrown.expect(BuildException.class)
thrown.expect(hasProperty("cause",instanceOf(ComparisonFailure.class)))
hasProperty("cause",instanceOf(ComparisonFailure.class))
instanceOf(ComparisonFailure.class)
ih.addText(p,this,"test")
ih.addText(p,this,"test2")
IntrospectionHelper.getHelper(String.class)
ih.addText(p,"","test")
ih.getAddTextMethod()
IntrospectionHelper.getHelper(String.class)
IntrospectionHelper.getHelper(String.class).getAddTextMethod()
ih.supportsCharacters()
IntrospectionHelper.getHelper(String.class)
ih.supportsCharacters()
ih.getElementType("one")
ih.getElementType("two")
ih.getElementType("three")
ih.getElementType("four")
ih.getElementType("five")
ih.getElementType("six")
ih.createElement(p,this,"six")
ih.getElementType("seven")
ih.getElementType("eight")
ih.getElementType("nine")
ih.getElementType("ten")
ih.getElementType("eleven")
ih.getElementType("twelve")
ih.getElementType("thirteen")
ih.createElement(p,this,"thirteen")
ih.createElement(p,this,"thirteen").toString()
thrown.expect(BuildException.class)
thrown.expect(hasProperty("cause",instanceOf(NullPointerException.class)))
hasProperty("cause",instanceOf(NullPointerException.class))
instanceOf(NullPointerException.class)
ih.createElement(p,this,"fourteen")
thrown.expect(BuildException.class)
thrown.expect(hasProperty("cause",instanceOf(NullPointerException.class)))
hasProperty("cause",instanceOf(NullPointerException.class))
instanceOf(NullPointerException.class)
ih.createElement(p,this,"fifteen")
elemMap.put("six",String.class)
elemMap.put("thirteen",StringBuffer.class)
elemMap.put("fourteen",StringBuffer.class)
elemMap.put("fifteen",StringBuffer.class)
getExpectedNestedElements()
Collections.list(ih.getNestedElements())
ih.getNestedElements()
elemMap.get(name)
ih.getElementType(name)
elemMap.remove(name)
elemMap.isEmpty()
getExpectedNestedElements()
ih.getNestedElementMap()
elemMap.get(elemName)
elemMap.remove(elemName)
elemMap.isEmpty()
actualMap.clear()
ih.getElementMethod(elemName)
m.getName()
m.getReturnType()
m.getParameterTypes()
sb.append("test")
ih.setAttribute(p,this,"one","test")
ih.setAttribute(p,this,"two","test")
ih.setAttribute(p,this,"three","test")
ih.setAttribute(p,this,"four","test")
ih.setAttribute(p,this,"five","test")
ih.setAttribute(p,this,"six","test")
thrown.expect(BuildException.class)
thrown.expect(hasProperty("cause",instanceOf(ComparisonFailure.class)))
hasProperty("cause",instanceOf(ComparisonFailure.class))
instanceOf(ComparisonFailure.class)
ih.setAttribute(p,this,"seven","2")
ih.setAttribute(p,this,"seven","3")
thrown.expect(BuildException.class)
thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
hasProperty("cause",instanceOf(AssertionError.class))
instanceOf(AssertionError.class)
ih.setAttribute(p,this,"eight","2")
ih.setAttribute(p,this,"eight","3")
thrown.expect(BuildException.class)
thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
hasProperty("cause",instanceOf(AssertionError.class))
instanceOf(AssertionError.class)
ih.setAttribute(p,this,"nine","2")
ih.setAttribute(p,this,"nine","3")
thrown.expect(BuildException.class)
thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
hasProperty("cause",instanceOf(AssertionError.class))
instanceOf(AssertionError.class)
ih.setAttribute(p,this,"ten","2")
ih.setAttribute(p,this,"ten","3")
thrown.expect(BuildException.class)
thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
hasProperty("cause",instanceOf(AssertionError.class))
instanceOf(AssertionError.class)
ih.setAttribute(p,this,"eleven","2")
ih.setAttribute(p,this,"eleven","on")
thrown.expect(BuildException.class)
thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
hasProperty("cause",instanceOf(AssertionError.class))
instanceOf(AssertionError.class)
ih.setAttribute(p,this,"twelve","2")
ih.setAttribute(p,this,"twelve","on")
thrown.expect(BuildException.class)
thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
hasProperty("cause",instanceOf(AssertionError.class))
instanceOf(AssertionError.class)
ih.setAttribute(p,this,"thirteen","org.apache.tools.ant.Project")
ih.setAttribute(p,this,"thirteen","org.apache.tools.ant.ProjectHelper")
thrown.expect(BuildException.class)
thrown.expect(hasProperty("cause",instanceOf(ClassNotFoundException.class)))
hasProperty("cause",instanceOf(ClassNotFoundException.class))
instanceOf(ClassNotFoundException.class)
ih.setAttribute(p,this,"thirteen","org.apache.tools.ant.Project2")
thrown.expect(BuildException.class)
thrown.expect(hasProperty("cause",instanceOf(ComparisonFailure.class)))
hasProperty("cause",instanceOf(ComparisonFailure.class))
instanceOf(ComparisonFailure.class)
ih.setAttribute(p,this,"fourteen","2")
ih.setAttribute(p,this,"fourteen","on")
thrown.expect(BuildException.class)
thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
hasProperty("cause",instanceOf(AssertionError.class))
instanceOf(AssertionError.class)
ih.setAttribute(p,this,"fifteen","abcd")
ih.setAttribute(p,this,"fifteen","on")
thrown.expect(BuildException.class)
thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
hasProperty("cause",instanceOf(AssertionError.class))
instanceOf(AssertionError.class)
ih.setAttribute(p,this,"sixteen","abcd")
ih.setAttribute(p,this,"sixteen","on")
thrown.expect(BuildException.class)
thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
hasProperty("cause",instanceOf(AssertionError.class))
instanceOf(AssertionError.class)
ih.setAttribute(p,this,"seventeen","17")
ih.setAttribute(p,this,"seventeen","3")
thrown.expect(BuildException.class)
thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
hasProperty("cause",instanceOf(AssertionError.class))
instanceOf(AssertionError.class)
ih.setAttribute(p,this,"eightteen","18")
ih.setAttribute(p,this,"eightteen","3")
thrown.expect(BuildException.class)
thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
hasProperty("cause",instanceOf(AssertionError.class))
instanceOf(AssertionError.class)
ih.setAttribute(p,this,"nineteen","19")
ih.setAttribute(p,this,"nineteen","3")
attrMap.put("seven",String.class)
attrMap.put("eight",Integer.TYPE)
attrMap.put("nine",Integer.class)
attrMap.put("ten",File.class)
attrMap.put("eleven",Boolean.TYPE)
attrMap.put("twelve",Boolean.class)
attrMap.put("thirteen",Class.class)
attrMap.put("fourteen",StringBuffer.class)
attrMap.put("fifteen",Character.TYPE)
attrMap.put("sixteen",Character.class)
attrMap.put("seventeen",Byte.TYPE)
attrMap.put("eightteen",Short.TYPE)
attrMap.put("nineteen",Double.TYPE)
attrMap.put("twenty",Path.class)
attrMap.put("name",String.class)
getExpectedAttributes()
Collections.list(ih.getAttributes())
ih.getAttributes()
attrMap.get(name)
ih.getAttributeType(name)
attrMap.remove(name)
attrMap.remove("name")
attrMap.isEmpty()
getExpectedAttributes()
ih.getAttributeMap()
attrMap.get(attrName)
attrMap.remove(attrName)
attrMap.remove("name")
attrMap.isEmpty()
thrown.expect(UnsupportedOperationException.class)
ih.getAttributeMap()
ih.getAttributeMap().clear()
newFile(projectBasedir+20).toPath()
Paths.get("toto")
thrown.expect(BuildException.class)
thrown.expectMessage("doesn't support the \"onehundred\" attribute.")
ih.getAttributeMethod(attrName)
i.intValue()
f.getAbsolutePath()
Os.isFamily("unix")
Os.isFamily("openvms")
Os.isFamily("netware")
path.toLowerCase(Locale.US)
path.toLowerCase(Locale.US)
path.toLowerCase(Locale.US).substring(1)
sb.toString()
c.charValue()
p.toAbsolutePath()
p.toAbsolutePath().toString()
Os.isFamily("unix")
Os.isFamily("openvms")
Os.isFamily("netware")
path.toLowerCase(Locale.US)
path.toLowerCase(Locale.US)
path.toLowerCase(Locale.US).substring(1)
ih.getExtensionPoints()
extensions.size()
extensions.get(adders-2)
makeTable("key","value")
makeTable("1","2")
extensions.get(adders-1)
makeTable("1","2")
m.getName()
m.getReturnType()
m.getParameterTypes()
m.invoke(this,arg)
m.invoke(this,badArg)
hasProperty("cause",instanceOf(AssertionError.class))
instanceOf(AssertionError.class)
m.isEmpty()
m.isEmpty()
table.put(key,value)
buildRule.configureProject("src/etc/testcases/core/loaderref/loaderref.xml")
buildRule.executeTarget("setUp")
thrown.expect(BuildException.class)
thrown.expectMessage("does not reference a class loader")
buildRule.executeTarget("testbadref")
buildRule.configureProject("src/etc/testcases/core/location.xml")
buildRule.executeTarget("testPlainTask")
buildRule.getProject()
buildRule.getProject().getReference("echo")
e.getLocation()
e.getLocation()
e.getLocation().getLineNumber()
buildRule.executeTarget("testStandaloneType")
buildRule.getProject()
buildRule.getProject().getReference("echo2")
buildRule.getProject()
buildRule.getProject().getReference("fs")
f.getLocation()
e.getLocation()
e.getLocation().getLineNumber()
f.getLocation()
f.getLocation().getLineNumber()
buildRule.executeTarget("testConditionTask")
buildRule.getProject()
buildRule.getProject().getReference("cond")
ta.getProxy()
c.getLocation()
c.getLocation()
c.getLocation().getLineNumber()
buildRule.executeTarget("testMacrodefWrappedTask")
buildRule.getProject()
buildRule.getProject().getReference("echo3")
buildRule.getLog()
containsString("Line: "+(e.getLocation().getLineNumber()+1))
e.getLocation()
e.getLocation().getLineNumber()
buildRule.executeTarget("testPresetdefWrappedTask")
buildRule.getProject()
buildRule.getProject().getReference("echo4")
buildRule.getLog()
containsString("Line: "+(e.getLocation().getLineNumber()+1))
e.getLocation()
e.getLocation().getLineNumber()
log("Line: "+getLocation().getLineNumber(),Project.MSG_INFO)
getLocation()
getLocation().getLineNumber()
pc.setProject(expectedProject)
pc.setLocation(expectedLocation)
pc.setDescription(expectedDescription)
pc.clone()
cloned.getProject()
cloned.getLocation()
cloned.getDescription()
buildFile.getName()
buildFile.getName().endsWith(".myext")
r.getName()
r.getName().endsWith(".myext")
ProjectHelperRepository.getInstance()
repo.registerProjectHelper(SomeHelper.class)
repo.getProjectHelperForBuildFile(r)
instanceOf(ProjectHelper2.class)
repo.getProjectHelperForAntlib(r)
instanceOf(ProjectHelper2.class)
repo.getProjectHelperForBuildFile(r)
instanceOf(SomeHelper.class)
repo.getProjectHelperForAntlib(r)
instanceOf(SomeHelper.class)
repo.getProjectHelperForBuildFile(r)
instanceOf(ProjectHelper2.class)
repo.getProjectHelperForAntlib(r)
instanceOf(ProjectHelper2.class)
repo.getProjectHelperForBuildFile(r)
instanceOf(ProjectHelper2.class)
repo.getProjectHelperForAntlib(r)
instanceOf(ProjectHelper2.class)
ProjectHelperRepository.getInstance()
ProjectHelperRepository.getInstance().registerProjectHelper(IncorrectHelper.class)
ProjectHelperRepository.getInstance()
ProjectHelperRepository.getInstance().registerProjectHelper("xxx.yyy.zzz.UnknownHelper")
p.init()
newFile(File.separator).getAbsolutePath()
newFile(File.separator).getAbsolutePath().toUpperCase()
p.createDataType("dummy")
p.createDataType("fileset")
instanceOf(FileSet.class)
p.createDataType("patternset")
instanceOf(PatternSet.class)
p.createDataType("path")
instanceOf(Path.class)
assumeTrue("Not DOS or Netware",Os.isFamily("netware")||Os.isFamily("dos"))
Os.isFamily("netware")
Os.isFamily("dos")
localize(File.separator)
p.resolveFile("/",null)
p.resolveFile("/",null).getPath()
localize(File.separator)
p.resolveFile("\\",null)
p.resolveFile("\\",null).getPath()
p.resolveFile(driveSpec+"/",null)
p.resolveFile(driveSpec+"/",null).getPath()
p.resolveFile(driveSpec+"\\",null)
p.resolveFile(driveSpec+"\\",null).getPath()
p.resolveFile(driveSpecLower+"/",null)
p.resolveFile(driveSpecLower+"/",null).getPath()
p.resolveFile(driveSpecLower+"\\",null)
p.resolveFile(driveSpecLower+"\\",null).getPath()
p.resolveFile(driveSpec+"/////",null)
p.resolveFile(driveSpec+"/////",null).getPath()
p.resolveFile(driveSpec+"\\\\\\\\\\\\",null)
p.resolveFile(driveSpec+"\\\\\\\\\\\\",null).getPath()
assumeFalse("DOS or Netware",Os.isFamily("netware")||Os.isFamily("dos"))
Os.isFamily("netware")
Os.isFamily("dos")
p.resolveFile("/",null)
p.resolveFile("/",null).getPath()
p.resolveFile("\\",null)
p.resolveFile("\\",null).getPath()
System.getProperty("user.dir")
p.resolveFile(driveSpec+"/",null)
p.resolveFile(driveSpec+"/",null).getPath()
p.resolveFile(driveSpec+"\\",null)
p.resolveFile(driveSpec+"\\",null).getPath()
p.resolveFile(driveSpecLower+"/",null)
p.resolveFile(driveSpecLower+"/",null).getPath()
p.resolveFile(driveSpecLower+"\\",null)
p.resolveFile(driveSpecLower+"\\",null).getPath()
localize("/1/2/3/4")
p.resolveFile("4",newFile(localize("/1/2/3")))
localize("/1/2/3")
p.resolveFile("4",newFile(localize("/1/2/3"))).getPath()
localize("/1/2/3/4")
p.resolveFile("./4",newFile(localize("/1/2/3")))
localize("/1/2/3")
p.resolveFile("./4",newFile(localize("/1/2/3"))).getPath()
localize("/1/2/3/4")
p.resolveFile(".\\4",newFile(localize("/1/2/3")))
localize("/1/2/3")
p.resolveFile(".\\4",newFile(localize("/1/2/3"))).getPath()
localize("/1/2/3/4")
p.resolveFile("./.\\4",newFile(localize("/1/2/3")))
localize("/1/2/3")
p.resolveFile("./.\\4",newFile(localize("/1/2/3"))).getPath()
localize("/1/2/3/4")
p.resolveFile("../3/4",newFile(localize("/1/2/3")))
localize("/1/2/3")
p.resolveFile("../3/4",newFile(localize("/1/2/3"))).getPath()
localize("/1/2/3/4")
p.resolveFile("..\\3\\4",newFile(localize("/1/2/3")))
localize("/1/2/3")
p.resolveFile("..\\3\\4",newFile(localize("/1/2/3"))).getPath()
localize("/1/2/3/4")
p.resolveFile("../../5/.././2/./3/6/../4",newFile(localize("/1/2/3")))
localize("/1/2/3")
p.resolveFile("../../5/.././2/./3/6/../4",newFile(localize("/1/2/3"))).getPath()
localize("/1/2/3/4")
p.resolveFile("..\\../5/..\\./2/./3/6\\../4",newFile(localize("/1/2/3")))
localize("/1/2/3")
p.resolveFile("..\\../5/..\\./2/./3/6\\../4",newFile(localize("/1/2/3"))).getPath()
path.substring(1)
path.replace('\\',File.separatorChar)
path.replace('\\',File.separatorChar).replace('/',File.separatorChar)
assumeTrue("Not DOS or Netware",Os.isFamily("netware")||Os.isFamily("dos"))
Os.isFamily("netware")
Os.isFamily("dos")
s1.length()
s2.length()
sb1.setCharAt(0,Character.toUpperCase(s1.charAt(0)))
Character.toUpperCase(s1.charAt(0))
s1.charAt(0)
sb2.setCharAt(0,Character.toUpperCase(s2.charAt(0)))
Character.toUpperCase(s2.charAt(0))
s2.charAt(0)
sb1.toString()
sb2.toString()
thrown.expect(BuildException.class)
thrown.expectMessage(message)
mbl.addBuildEvent(message,Project.MSG_ERR)
p.addTaskDefinition(dummyName,taskClass)
p.getTaskDefinitions()
not(hasKey(dummyName))
hasKey(dummyName)
p.addBuildListener(mbl)
p.addTaskDefinition("Ok",DummyTaskOk.class)
p.getTaskDefinitions()
p.getTaskDefinitions().get("Ok")
p.addTaskDefinition("OkNonTask",DummyTaskOkNonTask.class)
p.getTaskDefinitions()
p.getTaskDefinitions().get("OkNonTask")
mbl.addBuildEvent("return type of execute() should be void but was \"int\" in "+DummyTaskWithNonVoidExecute.class,Project.MSG_WARN)
p.addTaskDefinition("NonVoidExecute",DummyTaskWithNonVoidExecute.class)
p.getTaskDefinitions()
p.getTaskDefinitions().get("NonVoidExecute")
p.getInputHandler()
instanceOf(DefaultInputHandler.class)
p.setInputHandler(pfih)
p.getInputHandler()
p.getTaskDefinitions()
hasKey("echo")
p.getTaskDefinitions()
hasValue(org.apache.tools.ant.taskdefs.Echo.class)
thrown.expect(BuildException.class)
thrown.expectMessage("Duplicate target 'twice'")
buildRule.configureProject("src/etc/testcases/core/duplicate-target.xml")
buildRule.configureProject("src/etc/testcases/core/duplicate-target2.xml")
buildRule.executeTarget("once")
buildRule.getLog()
containsString("once from buildfile")
actual.getMessage()
System.err.println(BAR)
System.out.println(BAR)
p.log(BAR,Project.MSG_INFO)
p.log(FOO,Project.MSG_INFO)
t.start()
t.join(2000)
actual.getMessage()
System.err.println(BAR)
System.out.println(BAR)
p.log(BAR,Project.MSG_INFO)
p.log(FOO,Project.MSG_INFO)
t.start()
t.join(2000)
p.log(newTask(){},null,newThrowable(),Project.MSG_ERR)
Arrays.asList(newObject[][]{{"",""},{"$","$"},{"$$-","$-"},{"$$","$"},{"a${expanded}b","aEXPANDEDb"},{"${expanded}${expanded}","EXPANDEDEXPANDED"},{"$$$","$$"},{"$$$$-","$$-"},{"",""},{"Class$$subclass","Class$subclass"},{"$-","$-"},{"Class$subclass","Class$subclass"},{"$$$-","$$-"},{"$$$$$","$$$"},{"${unassigned.property}","${unassigned.property}"},{"a$b","a$b"},{"$}}","$}}"}})
buildRule.configureProject("src/etc/testcases/core/immutable.xml")
buildRule.getProject()
buildRule.getProject().setProperty("expanded","EXPANDED")
buildRule.getProject()
buildRule.getProject().replaceProperties(input)
testFolder.newFile("propertyfilecli.properties")
fw.write("w=world\nmessage=Hello, ${w}\n")
testFolder.newFile("propertyfilecli.xml")
fw.write("<project><echo>${message}</echo></project>")
testFolder.newFile("propertyfilecli.log")
m.startAnt(newString[]{"-propertyfile",props.getAbsolutePath(),"-f",build.getAbsolutePath(),"-l",log.getAbsolutePath()},null,null)
props.getAbsolutePath()
build.getAbsolutePath()
log.getAbsolutePath()
FileUtils.safeReadFully(fr)
containsString("Hello, world")
buildRule.configureProject("src/etc/testcases/core/taskcontainer.xml")
buildRule.executeTarget("testPropertyExpansion")
buildRule.getLog()
containsString(("As attribute: it worked"))
buildRule.getLog()
containsString(("As nested text: it worked"))
buildRule.executeTarget("testTaskdef")
buildRule.getLog()
containsString("As attribute: it worked")
buildRule.getLog()
containsString("As nested text: it worked")
buildRule.executeTarget("testCaseInsensitive")
buildRule.getLog()
containsString("hello ")
buildRule.getLog()
containsString("world")
Arrays.asList(newObject[][]{{"notarget",""},{"toplevelant",""},{"targetlevelant","foo"}})
buildRule.configureProject("src/etc/testcases/core/topleveltasks/"+fileName+".xml")
buildRule.executeTarget(targetName)
buildRule.getLog()
buildRule.configureProject("src/etc/testcases/core/unknownelement.xml")
buildRule.executeTarget("testMaybeConfigure")
event.getTask()
event.getTask()
instanceOf(UnknownElement.class)
((UnknownElement)ue).getTask()
t.getClass()
t.getClass().getName()
buildRule.executeTarget("echo")
instanceOf(UnknownElement.class)
((UnknownElement)ue).getTask()
t.getClass()
t.getClass().getName()
buildRule.executeTarget("echo")
parent.fromChild()
children.add(t)
log("fromchild")
parent.fromChild()
logger.buildStarted(event)
logger.buildFinished(event)
buildRule.configureProject("src/etc/testcases/filters/concat.xml")
buildRule.executeTarget("testFilterReaderNoArgs")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.getProject()
buildRule.getProject().getProperty("output")
FileUtilities.getFileContents(expected)
FileUtilities.getFileContents(result)
doTest("testFilterReaderPrepend",FILE_PREPEND_WITH,FILE_APPEND)
doTest("testFilterReaderAppend",FILE_PREPEND,FILE_APPEND_WITH)
doTest("testFilterReaderPrependAppend",FILE_PREPEND_WITH,FILE_APPEND_WITH)
doTest("testConcatFilter",FILE_PREPEND,FILE_APPEND)
doTest("testConcatFilterPrepend",FILE_PREPEND_WITH,FILE_APPEND)
doTest("testConcatFilterAppend",FILE_PREPEND,FILE_APPEND_WITH)
doTest("testConcatFilterPrependAppend",FILE_PREPEND_WITH,FILE_APPEND_WITH)
buildRule.executeTarget(target)
FileUtilities.getFileContents(newFile(buildRule.getProject().getProperty("output")+"/concat."+target.substring(4)+".test"))
buildRule.getProject()
buildRule.getProject().getProperty("output")
target.substring(4)
startsWith(expectedStart)
endsWith(expectedEnd)
buildRule.configureProject("src/etc/testcases/filters/dynamicfilter.xml")
buildRule.executeTarget("setUp")
buildRule.executeTarget("dynamicfilter")
FileUtilities.getFileContents(newFile(buildRule.getProject().getProperty("output")+"/dynamicfilter"))
buildRule.getProject()
buildRule.getProject().getProperty("output")
containsString("hellO wOrld")
in.read()
in.read()
buildRule.configureProject("src/etc/testcases/filters/build.xml")
buildRule.executeTarget("testEscapeUnicode")
buildRule.getProject()
buildRule.getProject().resolveFile("expected/escapeunicode.test")
buildRule.getProject()
buildRule.getProject().getProperty("output")
FileUtilities.getFileContents(expected)
FileUtilities.getFileContents(result)
Arrays.asList(newObject[][]{{"head","head"},{"headLines","headLines"},{"headSkip","headSkip"},{"headLinesSkip","headLinesSkip"},{"filterReaderHeadLinesSkip","headLinesSkip"},{"tail","tail"},{"tailSkip","tailSkip"},{"tailLines","tailLines"},{"tailLinesSkip","tailLinesSkip"},{"filterReaderTailLinesSkip","tailLinesSkip"},{"headTail","headtail"}})
buildRule.configureProject("src/etc/testcases/filters/head-tail.xml")
buildRule.executeTarget("test"+result.substring(0,1).toUpperCase()+result.substring(1))
result.substring(0,1)
result.substring(0,1).toUpperCase()
result.substring(1)
buildRule.getProject()
buildRule.getProject().resolveFile("expected/head-tail."+input+".test")
buildRule.getProject()
buildRule.getProject().getProperty("output")
FileUtilities.getFileContents(expected)
FileUtilities.getFileContents(actual)
buildRule.configureProject("src/etc/testcases/filters/build.xml")
buildRule.executeTarget("testLineContains")
buildRule.getProject()
buildRule.getProject().resolveFile("expected/linecontains.test")
buildRule.getProject()
buildRule.getProject().getProperty("output")
FileUtilities.getFileContents(expected)
FileUtilities.getFileContents(result)
buildRule.executeTarget("testNegateLineContains")
buildRule.executeTarget("testMatchAny")
buildRule.getProject()
buildRule.getProject().resolveFile("expected/linecontains-matchany.test")
buildRule.getProject()
buildRule.getProject().getProperty("output")
FileUtilities.getFileContents(expected)
FileUtilities.getFileContents(result)
buildRule.executeTarget("testMatchAnyNegate")
buildRule.getProject()
buildRule.getProject().resolveFile("expected/linecontains-matchany-negate.test")
buildRule.getProject()
buildRule.getProject().getProperty("output")
FileUtilities.getFileContents(expected)
FileUtilities.getFileContents(result)
buildRule.configureProject("src/etc/testcases/filters/build.xml")
buildRule.executeTarget("testNoAddNewLine")
Arrays.asList(newObject[][]{{"replaceTokens","replacetokens"},{"replaceTokensPropertyFile","replacetokens"},{"replaceTokensDoubleEncoded","replacetokens.double"},{"replaceTokensDoubleEncodedToSimple","replacetokens"},{"replaceTokensMustacheStyle","replacetokens"}})
buildRule.configureProject("src/etc/testcases/filters/build.xml")
buildRule.executeTarget("test"+result.substring(0,1).toUpperCase()+result.substring(1))
result.substring(0,1)
result.substring(0,1).toUpperCase()
result.substring(1)
buildRule.getProject()
buildRule.getProject().resolveFile("expected/"+input+".test")
buildRule.getProject()
buildRule.getProject().getProperty("output")
FileUtilities.getFileContents(expected)
FileUtilities.getFileContents(actual)
buildRule.configureProject("src/etc/testcases/filters/build.xml")
buildRule.executeTarget("testStripJavaComments")
buildRule.getProject()
buildRule.getProject().resolveFile("expected/stripjavacomments.test")
buildRule.getProject()
buildRule.getProject().getProperty("output")
FileUtilities.getFileContents(expected)
FileUtilities.getFileContents(result)
buildRule.configureProject("src/etc/testcases/filters/tokenfilter.xml")
buildRule.executeTarget("setUp")
buildRule.executeTarget("tokenfilter")
buildRule.executeTarget("trimignore")
buildRule.getLog()
containsString("Hello-World")
buildRule.executeTarget("stringtokenizer")
buildRule.getLog()
containsString("#This#is#a#number#of#words#")
buildRule.executeTarget("unixlineoutput")
getFileString(buildRule.getProject().getProperty("output")+"/unixlineoutput")
buildRule.getProject()
buildRule.getProject().getProperty("output")
containsString("\nThis\nis\na\nnumber\nof\nwords\n")
buildRule.executeTarget("doslineoutput")
getFileString(buildRule.getProject().getProperty("output")+"/doslineoutput")
buildRule.getProject()
buildRule.getProject().getProperty("output")
containsString("\r\nThis\r\nis\r\na\r\nnumber\r\nof\r\nwords\r\n")
buildRule.executeTarget("filetokenizer")
getFileString(buildRule.getProject().getProperty("output")+"/filetokenizer")
buildRule.getProject()
buildRule.getProject().getProperty("output")
both(containsString("   of words"))
containsString("   of words")
both(containsString("   of words")).and(not(containsString(" This is")))
not(containsString(" This is"))
containsString(" This is")
buildRule.executeTarget("replacestring")
getFileString(buildRule.getProject().getProperty("output")+"/replacestring")
buildRule.getProject()
buildRule.getProject().getProperty("output")
containsString("this is the moon")
buildRule.executeTarget("replacestrings")
buildRule.getLog()
containsString("bar bar bar")
buildRule.executeTarget("containsstring")
getFileString(buildRule.getProject().getProperty("output")+"/containsstring")
buildRule.getProject()
buildRule.getProject().getProperty("output")
both(containsString("this is a line contains foo"))
containsString("this is a line contains foo")
both(containsString("this is a line contains foo")).and(not(containsString("this line does not")))
not(containsString("this line does not"))
containsString("this line does not")
buildRule.executeTarget("hasregex")
assumeThat("Regex not present",getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp"),containsString("bye world"))
getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp")
buildRule.getProject()
buildRule.getProject().getProperty("output")
containsString("bye world")
buildRule.executeTarget("replaceregex")
getFileString(buildRule.getProject().getProperty("output")+"/replaceregex")
buildRule.getProject()
buildRule.getProject().getProperty("output")
containsString("world world world world")
containsString("dog Cat dog")
containsString("moon Sun Sun")
containsString("found WhiteSpace")
containsString("Found digits [1234]")
not(containsString("This is a line with digits"))
containsString("This is a line with digits")
buildRule.executeTarget("hasregex")
assumeThat("Regex not present",getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp"),containsString("bye world"))
getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp")
buildRule.getProject()
buildRule.getProject().getProperty("output")
containsString("bye world")
buildRule.executeTarget("filterreplaceregex")
getFileString(buildRule.getProject().getProperty("output")+"/filterreplaceregex")
buildRule.getProject()
buildRule.getProject().getProperty("output")
containsString("world world world world")
buildRule.executeTarget("hasregex")
assumeThat("Regex not present",getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp"),containsString("bye world"))
getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp")
buildRule.getProject()
buildRule.getProject().getProperty("output")
containsString("bye world")
buildRule.executeTarget("dollermatch")
buildRule.executeTarget("trimfile")
getFileString(buildRule.getProject().getProperty("output")+"/trimfile")
buildRule.getProject()
buildRule.getProject().getProperty("output")
startsWith("This is th")
endsWith("second line.")
containsString("  This is the second")
buildRule.executeTarget("trimfilebyline")
getFileString(buildRule.getProject().getProperty("output")+"/trimfilebyline")
buildRule.getProject()
buildRule.getProject().getProperty("output")
not(startsWith("This is th"))
startsWith("This is th")
not(endsWith("second line."))
endsWith("second line.")
not(containsString("  This is the second"))
containsString("  This is the second")
containsString("file.\nThis is the second")
buildRule.executeTarget("filterreplacestring")
getFileString(buildRule.getProject().getProperty("output")+"/filterreplacestring")
buildRule.getProject()
buildRule.getProject().getProperty("output")
containsString("This is the moon")
buildRule.executeTarget("filterreplacestrings")
buildRule.getLog()
containsString("bar bar bar")
buildRule.executeTarget("hasregex")
assumeThat("Regex not present",getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp"),containsString("bye world"))
getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp")
buildRule.getProject()
buildRule.getProject().getProperty("output")
containsString("bye world")
buildRule.executeTarget("containsregex")
getFileString(buildRule.getProject().getProperty("output")+"/containsregex")
buildRule.getProject()
buildRule.getProject().getProperty("output")
containsString("hello world")
not(containsString("this is the moon"))
containsString("this is the moon")
containsString("World here")
buildRule.executeTarget("hasregex")
assumeThat("Regex not present",getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp"),containsString("bye world"))
getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp")
buildRule.getProject()
buildRule.getProject().getProperty("output")
containsString("bye world")
buildRule.executeTarget("filtercontainsregex")
getFileString(buildRule.getProject().getProperty("output")+"/filtercontainsregex")
buildRule.getProject()
buildRule.getProject().getProperty("output")
containsString("hello world")
not(containsString("this is the moon"))
containsString("this is the moon")
containsString("World here")
buildRule.executeTarget("hasregex")
assumeThat("Regex not present",getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp"),containsString("bye world"))
getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp")
buildRule.getProject()
buildRule.getProject().getProperty("output")
containsString("bye world")
buildRule.executeTarget("containsregex2")
getFileString(buildRule.getProject().getProperty("output")+"/containsregex2")
buildRule.getProject()
buildRule.getProject().getProperty("output")
containsString("void register_bits();")
buildRule.executeTarget("deletecharacters")
getFileString(buildRule.getProject().getProperty("output")+"/deletechars")
buildRule.getProject()
buildRule.getProject().getProperty("output")
not(containsString("#"))
containsString("#")
not(containsString("*"))
containsString("*")
containsString("This is some ")
assumeThat("Project does not have 'testScriptFilter' target",buildRule.getProject().getTargets(),hasKey("testScriptFilter"))
buildRule.getProject()
buildRule.getProject().getTargets()
hasKey("testScriptFilter")
buildRule.executeTarget("scriptfilter")
getFileString(buildRule.getProject().getProperty("output")+"/scriptfilter")
buildRule.getProject()
buildRule.getProject().getProperty("output")
containsString("HELLO WORLD")
assumeThat("Project does not have 'testScriptFilter' target",buildRule.getProject().getTargets(),hasKey("testScriptFilter"))
buildRule.getProject()
buildRule.getProject().getTargets()
hasKey("testScriptFilter")
buildRule.executeTarget("scriptfilter2")
getFileString(buildRule.getProject().getProperty("output")+"/scriptfilter2")
buildRule.getProject()
buildRule.getProject().getProperty("output")
containsString("HELLO MOON")
buildRule.executeTarget("customtokenfilter")
getFileString(buildRule.getProject().getProperty("output")+"/custom")
buildRule.getProject()
buildRule.getProject().getProperty("output")
containsString("Hello World")
buildRule.getProject()
buildRule.getProject().resolveFile(filename)
readFully(r)
token.isEmpty()
token.substring(0,1)
token.substring(0,1).toUpperCase()
token.substring(1)
Os.isFamily(Os.FAMILY_DOS)
Os.isFamily(Os.FAMILY_UNIX)
Locator.fromURI(uri)
expectedResult.isEmpty()
newFile(path).toURI()
newFile(path).toURI().toASCIIString()
System.getProperty("user.dir")
resolveTo(asuri,fullpath,fullpath)
result.substring(result.lastIndexOf(File.separatorChar)+1)
result.lastIndexOf(File.separatorChar)
resolveTo("file:\\\\PC03\\jclasses\\lib\\ant-1.7.0.jar",""+"\\\\PC03\\jclasses\\lib\\ant-1.7.0.jar","\\\\PC03\\jclasses\\lib\\ant-1.7.0.jar")
resolveTo("file:///PC03/jclasses/lib/ant-1.7.0.jar","///PC03/jclasses/lib/ant-1.7.0.jar","\\\\PC03\\jclasses\\lib\\ant-1.7.0.jar")
resolveTo("file://cluster/home/ant/lib","//cluster/home/ant/lib","\\\\cluster\\home\\ant\\lib")
resolveTo("file:/home/ant/lib","/home/ant/lib",null)
resolveTo("file:C:\\Program Files\\Ant\\lib","C:\\Program Files\\Ant\\lib","C:\\Program Files\\Ant\\lib")
Locator.fromJarURI(SHARED_JAR_URI)
LAUNCHER_JAR.replace('/','\\')
assumeTrue("not Windows",windows)
Locator.fromJarURI(SHARED_JAR_URI)
f.getAbsolutePath()
path.indexOf("\\\\")
thrown.expect(IllegalArgumentException.class)
thrown.expectMessage(Locator.ERROR_NOT_FILE_URI+url)
Locator.fromURI(url)
result.charAt(1)
Integer.toHexString(umlauted)
Locator.encodeURI("file:/tmp/a\u00E7a\u00ED berry")
Locator.decodeUri("file:/tmp/a%C3%A7a%C3%AD%20berry")
Locator.decodeUri("file:/tmp/a\u00E7a\u00ED%20berry")
Locator.decodeUri("file:/tmp/hezky%20\u010Desky")
buildRule.configureProject("src/etc/testcases/taskdefs/abstractcvstask.xml")
buildRule.executeTarget("setUp")
buildRule.executeTarget("cleanup")
buildRule.executeTarget("all")
buildRule.getProject()
buildRule.getProject().getProperty("output")
f.exists()
buildRule.executeTarget("package-attribute")
buildRule.getLog()
containsString("U src/Makefile")
f.exists()
buildRule.getProject()
buildRule.getProject().getProperty("output")
f.exists()
buildRule.executeTarget("tag-attribute")
buildRule.getLog()
containsString("OPENBSD_5_3")
f.exists()
buildRule.configureProject("src/etc/testcases/taskdefs/antlib.xml")
System.getProperty("tests.and.ant.share.classloader")
Project.toBoolean(property)
buildRule.executeTarget("antlib.file")
buildRule.getLog()
System.getProperty("build.tests.value")
buildRule.executeTarget("antlib.resource")
buildRule.getLog()
buildRule.executeTarget("ns.current")
buildRule.getLog()
assumeTrue("Test requires shared JVM",isSharedJVM())
isSharedJVM()
buildRule.executeTarget("antlib_uri")
assumeTrue("Test requires shared JVM",isSharedJVM())
isSharedJVM()
buildRule.executeTarget("antlib_uri_auto")
assumeTrue("Test requires shared JVM",isSharedJVM())
isSharedJVM()
buildRule.executeTarget("antlib_uri_auto2")
log("MyTask called")
log("MyTask called")
thrown.expect(BuildException.class)
thrown.expectMessage("ant task at the top level must not invoke its own build file.")
buildRule.configureProject("src/etc/testcases/taskdefs/toplevelant.xml")
thrown.expect(BuildException.class)
thrown.expectMessage("subant task at the top level must not invoke its own build file.")
buildRule.configureProject("src/etc/testcases/taskdefs/toplevelsubant.xml")
thrown.expect(BuildException.class)
thrown.expectMessage("antcall must not be used at the top level.")
buildRule.configureProject("src/etc/testcases/taskdefs/toplevelantcall.xml")
buildRule.configureProject("src/etc/testcases/taskdefs/antstructure.xml")
buildRule.executeTarget("tearDown")
buildRule.executeTarget("test1")
buildRule.executeTarget("testCustomPrinter")
buildRule.getLog()
containsString(MyPrinter.TAIL_CALLED)
p.log(TAIL_CALLED)
buildRule.configureProject("src/etc/testcases/taskdefs/ant.xml")
buildRule.executeTarget("cleanup")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.executeTarget("test4")
buildRule.executeTarget("test4b")
buildRule.executeTarget("test5")
buildRule.executeTarget("test6")
buildRule.getProject()
buildRule.getProject().getBaseDir()
buildRule.getProject()
buildRule.getProject().resolveFile("..")
testBaseDirs("explicitBasedir1",newString[]{dir1.getAbsolutePath(),dir2.getAbsolutePath()})
dir1.getAbsolutePath()
dir2.getAbsolutePath()
buildRule.getProject()
buildRule.getProject().getBaseDir()
buildRule.getProject()
buildRule.getProject().resolveFile("..")
testBaseDirs("explicitBasedir2",newString[]{dir1.getAbsolutePath(),dir2.getAbsolutePath()})
dir1.getAbsolutePath()
dir2.getAbsolutePath()
buildRule.getProject()
buildRule.getProject().getBaseDir()
buildRule.getProject().getBaseDir().getAbsolutePath()
testBaseDirs("inheritBasedir",newString[]{basedir,basedir})
buildRule.getProject()
buildRule.getProject().getBaseDir()
buildRule.getProject()
buildRule.getProject().resolveFile("ant")
testBaseDirs("doNotInheritBasedir",newString[]{dir1.getAbsolutePath(),dir2.getAbsolutePath()})
dir1.getAbsolutePath()
dir2.getAbsolutePath()
buildRule.getProject()
buildRule.getProject().getBaseDir()
buildRule.getProject()
buildRule.getProject().resolveFile("ant")
testBaseDirs("tripleCall",newString[]{dir1.getAbsolutePath(),dir2.getAbsolutePath(),dir1.getAbsolutePath()})
dir1.getAbsolutePath()
dir2.getAbsolutePath()
dir1.getAbsolutePath()
buildRule.getProject()
buildRule.getProject().addBuildListener(bc)
buildRule.executeTarget(target)
bc.getError()
buildRule.getProject()
buildRule.getProject().removeBuildListener(bc)
p.setProject(buildRule.getProject())
buildRule.getProject()
buildRule.getProject()
buildRule.getProject().addReference("path",p)
buildRule.getProject()
buildRule.getProject().addReference("no-override",p)
testReference("testInherit",newString[]{"path","path"},newboolean[]{true,true},p)
testReference("testInherit",newString[]{"no-override","no-override"},newboolean[]{true,false},p)
testReference("testInherit",newString[]{"no-override","no-override"},newboolean[]{false,false},null)
p.setProject(buildRule.getProject())
buildRule.getProject()
buildRule.getProject()
buildRule.getProject().addReference("path",p)
buildRule.getProject()
buildRule.getProject().addReference("no-override",p)
testReference("testNoInherit",newString[]{"path","path"},newboolean[]{true,false},p)
testReference("testNoInherit",newString[]{"path","path"},newboolean[]{false,true},null)
testReference("testInherit",newString[]{"no-override","no-override"},newboolean[]{true,false},p)
testReference("testInherit",newString[]{"no-override","no-override"},newboolean[]{false,false},null)
p.setProject(buildRule.getProject())
buildRule.getProject()
buildRule.getProject()
buildRule.getProject().addReference("path",p)
testReference("testRename",newString[]{"path","path"},newboolean[]{true,false},p)
testReference("testRename",newString[]{"path","path"},newboolean[]{false,true},null)
testReference("testRename",newString[]{"newpath","newpath"},newboolean[]{false,true},p)
buildRule.executeTarget("testInheritPath")
buildRule.getProject()
buildRule.getProject().addBuildListener(rc)
buildRule.executeTarget(target)
rc.getError()
buildRule.getProject()
buildRule.getProject().removeBuildListener(rc)
Arrays.asList(buildRule.getProject().resolveFile("test1.log"),buildRule.getProject().resolveFile("test2.log"),buildRule.getProject().resolveFile("ant/test3.log"),buildRule.getProject().resolveFile("ant/test4.log"))
buildRule.getProject()
buildRule.getProject().resolveFile("test1.log")
buildRule.getProject()
buildRule.getProject().resolveFile("test2.log")
buildRule.getProject()
buildRule.getProject().resolveFile("ant/test3.log")
buildRule.getProject()
buildRule.getProject().resolveFile("ant/test4.log")
logFile.getName()
logFile.exists()
buildRule.executeTarget("testLogfilePlacement")
logFile.getName()
logFile.exists()
buildRule.getProject()
buildRule.getProject().setInputHandler(ih)
buildRule.getProject()
buildRule.getProject().addBuildListener(ic)
buildRule.executeTarget("tripleCall")
ic.getError()
buildRule.getProject()
buildRule.getProject().removeBuildListener(ic)
buildRule.getProject()
testPath.createPath()
testPath.createPath().setPath(System.getProperty("java.class.path"))
System.getProperty("java.class.path")
testPath.toString()
buildRule.getProject()
buildRule.getProject().addBuildListener(pc)
buildRule.executeTarget("testRefid")
pc.getError()
buildRule.getProject()
buildRule.getProject().removeBuildListener(pc)
buildRule.getProject()
buildRule.getProject().setUserProperty("test","7")
buildRule.executeTarget("test-property-override-inheritall-start")
buildRule.getLog()
containsString("The value of test is 7")
buildRule.getProject()
buildRule.getProject().setUserProperty("test","7")
buildRule.executeTarget("test-property-override-no-inheritall-start")
buildRule.getLog()
containsString("The value of test is 7")
buildRule.executeTarget("test-property-override-inheritall-start")
buildRule.getLog()
containsString("The value of test is 4")
buildRule.executeTarget("test-property-override-no-inheritall-start")
buildRule.getLog()
containsString("The value of test is 4")
buildRule.executeTarget("test-propertyset")
buildRule.getLog()
containsString("test1 is ${test1}")
buildRule.getLog()
containsString("test2 is ${test2}")
buildRule.getLog()
containsString("test1.x is 1")
buildRule.executeTarget("infinite-loop-via-depends")
buildRule.executeTarget("multi-same-property")
buildRule.getLog()
buildRule.executeTarget("topleveltarget")
buildRule.getLog()
buildRule.getProject()
buildRule.getProject().addBuildListener(pcBar)
buildRule.getProject()
buildRule.getProject().addBuildListener(pcFoo)
buildRule.executeTarget("multiple-property-file-children")
pcBar.getError()
pcFoo.getError()
buildRule.getProject()
buildRule.getProject().removeBuildListener(pcBar)
buildRule.getProject()
buildRule.getProject().removeBuildListener(pcFoo)
buildRule.executeTarget("blank-target")
buildRule.executeTarget("multiple-targets")
buildRule.getLog()
buildRule.executeTarget("multiple-targets-2")
buildRule.getLog()
buildRule.executeTarget("sub-show-ant.core.lib")
buildRule.getLog()
realLog.matches(".*(ant[.]jar|ant.classes|build.classes).*")
event.getTarget()
event.getTarget().getName()
event.getTarget().getName().isEmpty()
event.getProject()
event.getProject().getBaseDir()
event.getProject().getBaseDir().getAbsolutePath()
event.getTarget()
event.getTarget().getName()
event.getTarget().getName().isEmpty()
event.getProject()
event.getProject().getBaseDir()
event.getProject().getBaseDir().getAbsolutePath()
event.getTarget()
event.getTarget().getName()
event.getTarget().getName().isEmpty()
event.getProject()
event.getProject().getBaseDir()
event.getProject().getBaseDir().getAbsolutePath()
event.getProject()
event.getProject().getInputHandler()
event.getProject()
event.getProject().getInputHandler()
event.getTarget()
event.getTarget().getName()
event.getTarget().getName().isEmpty()
event.getProject()
event.getProject().getBaseDir()
event.getProject().getBaseDir().getAbsolutePath()
buildRule.configureProject("src/etc/testcases/taskdefs/available.xml")
buildRule.executeTarget("setUp")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.executeTarget("test4")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test5")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test6")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test7")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test8")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test9")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test10")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test11")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test12")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.getProject()
buildRule.getProject().getProperty("")
buildRule.executeTarget("test13")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test13b")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test14")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test15")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test16")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test17")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test18")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test19")
buildRule.executeTarget("test20")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test21")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test22")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test23")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("test24")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("searchInPathNotThere")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("searchInPathIsThere")
buildRule.getProject()
buildRule.getProject().getProperty("test")
buildRule.executeTarget("testDoubleBasedir")
buildRule.executeTarget("search-parents")
buildRule.executeTarget("search-parents-not")
buildRule.configureProject("src/etc/testcases/taskdefs/basename.xml")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.executeTarget("test4")
buildRule.getProject()
buildRule.getProject().getProperty("file.w.suf")
buildRule.executeTarget("test5")
buildRule.getProject()
buildRule.getProject().getProperty("file.wo.suf")
buildRule.executeTarget("testMultipleDots")
buildRule.getProject()
buildRule.getProject().getProperty("file.wo.suf")
buildRule.executeTarget("testNoDots")
buildRule.getProject()
buildRule.getProject().getProperty("file.wo.suf")
buildRule.executeTarget("testValueEqualsSuffixWithDot")
buildRule.getProject()
buildRule.getProject().getProperty("file.wo.suf")
buildRule.executeTarget("testValueEqualsSuffixWithoutDot")
buildRule.getProject()
buildRule.getProject().getProperty("file.wo.suf")
buildRule.configureProject("src/etc/testcases/taskdefs/bunzip2.xml")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.executeTarget("prepare")
testRealTest("realTest")
testRealTest("realTestWithResource")
testRealTest("realTest")
testRealTest("testDocumentationClaimsOnCopy")
buildRule.configureProject("src/etc/testcases/taskdefs/bzip2.xml")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.executeTarget("prepare")
buildRule.executeTarget("realTest")
buildRule.getProject()
buildRule.getProject().resolveFile("expected/asf-logo-huge.tar.bz2")
Files.newInputStream(originalFile.toPath())
originalFile.toPath()
originalIn.read()
originalIn.read()
Files.newInputStream(actualFile.toPath())
actualFile.toPath()
actualIn.read()
actualIn.read()
originalIn.read()
actualIn.read()
originalIn.close()
actualIn.close()
buildRule.executeTarget("realTestWithResource")
buildRule.executeTarget("testDateCheck")
buildRule.getLog()
endsWith("asf-logo.gif.bz2 is up to date.")
buildRule.configureProject("src/etc/testcases/taskdefs/calltarget.xml")
buildRule.executeTarget("setUp")
buildRule.executeTarget("testinheritreffileset")
buildRule.getLog()
containsString("calltarget.xml")
buildRule.getProject()
buildRule.getProject().executeTarget("testinheritreffilterset")
v.add("call-multi")
v.add("call-multi")
buildRule.getProject()
buildRule.getProject().executeTargets(v)
buildRule.getLog()
containsString("multi is SETmulti is SET")
buildRule.executeTarget("blank-target")
buildRule.executeTarget("multiple-targets")
buildRule.getLog()
buildRule.executeTarget("multiple-targets-2")
buildRule.getLog()
buildRule.configureProject("src/etc/testcases/taskdefs/checksum.xml")
buildRule.executeTarget("cleanup")
buildRule.executeTarget("createMd5")
buildRule.executeTarget("createMD5SUMformat")
buildRule.executeTarget("createSVFformat")
buildRule.executeTarget("createPattern")
buildRule.executeTarget("setProperty")
buildRule.executeTarget("verifyTotal")
buildRule.executeTarget("verifyTotalRC")
buildRule.executeTarget("verifyChecksumdir")
buildRule.executeTarget("verifyAsTask")
buildRule.executeTarget("verifyMD5SUMAsTask")
buildRule.executeTarget("verifyAsCondition")
buildRule.executeTarget("verifyFromProperty")
buildRule.executeTarget("verifyChecksumdirNoTotal")
buildRule.configureProject("src/etc/testcases/taskdefs/concat.xml")
buildRule.executeTarget("cleanup")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.getProject()
buildRule.getProject().getBaseDir()
file.exists()
file.delete()
buildRule.executeTarget("test3")
file.exists()
test3()
buildRule.getProject()
buildRule.getProject().getBaseDir()
file.length()
buildRule.executeTarget("test4")
buildRule.getProject()
buildRule.getProject().getBaseDir()
file2.length()
buildRule.executeTarget("test5")
buildRule.getLog()
"src/etc/testcases/taskdefs/thisfiledoesnotexist".replace('/',File.separatorChar)
buildRule.executeTarget("test6")
buildRule.getLog()
containsString(filename+" does not exist")
buildRule.executeTarget("testConcatNoNewline")
buildRule.getLog()
buildRule.executeTarget("testConcatNoNewlineEncoding")
buildRule.getLog()
test3()
buildRule.getProject()
buildRule.getProject().getBaseDir()
file.length()
buildRule.executeTarget("testPath")
buildRule.getProject()
buildRule.getProject().getBaseDir()
file2.length()
test3()
buildRule.getProject()
buildRule.getProject().getBaseDir()
file.length()
buildRule.executeTarget("testAppend")
buildRule.getProject()
buildRule.getProject().getBaseDir()
file2.length()
buildRule.executeTarget("testfilter")
buildRule.getLog()
containsString("REPLACED")
buildRule.executeTarget("testnooverwrite")
buildRule.getProject()
buildRule.getProject().getBaseDir()
file2.length()
buildRule.executeTarget("testoverwrite")
buildRule.getProject()
buildRule.getProject().getBaseDir()
file2.length()
test3()
buildRule.executeTarget("testheaderfooter")
buildRule.getLog()
test3()
buildRule.executeTarget("testfileheader")
buildRule.getLog()
buildRule.executeTarget("samefile")
buildRule.executeTarget("testfilterinline")
buildRule.getLog()
containsString("REPLACED")
buildRule.executeTarget("testmultireader")
buildRule.getLog()
containsString("Bye")
buildRule.getLog()
not(containsString("Hello"))
containsString("Hello")
buildRule.executeTarget("testfixlastline")
FileUtilities.getFileContents(buildRule.getProject(),"concat.line4")
buildRule.getProject()
containsString("end of line"+System.lineSeparator()+"This has")
System.lineSeparator()
buildRule.executeTarget("testfixlastlineeol")
FileUtilities.getFileContents(buildRule.getProject(),"concat.linecr")
buildRule.getProject()
containsString("end of line\rThis has")
buildRule.executeTarget("testTranscoding")
buildRule.getProject()
buildRule.getProject().resolveFile("copy/expected/utf-8")
buildRule.getProject()
buildRule.getProject().resolveFile("concat.utf8")
f1.toString()
f2.toString()
FileUtilities.getFileContents(f1)
FileUtilities.getFileContents(f2)
buildRule.configureProject("src/etc/testcases/taskdefs/condition.xml")
buildRule.executeTarget("cleanup")
buildRule.executeTarget("basic")
buildRule.getProject()
buildRule.getProject().getProperty("basic")
thrown.expect(BuildException.class)
thrown.expectMessage("The property attribute is required.")
buildRule.executeTarget("condition-incomplete")
thrown.expect(BuildException.class)
thrown.expectMessage("You must nest a condition into <condition>")
buildRule.executeTarget("condition-empty")
buildRule.executeTarget("shortcut")
buildRule.getProject()
buildRule.getProject().getProperty("shortcut")
buildRule.executeTarget("dontset")
buildRule.getProject()
buildRule.getProject().getProperty("dontset")
buildRule.executeTarget("setvalue")
buildRule.getProject()
buildRule.getProject().getProperty("setvalue")
buildRule.executeTarget("negation")
buildRule.getProject()
buildRule.getProject().getProperty("negation")
buildRule.executeTarget("negationfalse")
buildRule.getProject()
buildRule.getProject().getProperty("negationfalse")
thrown.expect(BuildException.class)
thrown.expectMessage("You must nest a condition into <not>")
buildRule.executeTarget("negationincomplete")
buildRule.executeTarget("and")
buildRule.getProject()
buildRule.getProject().getProperty("and")
buildRule.executeTarget("andfails")
buildRule.getProject()
buildRule.getProject().getProperty("andfails")
buildRule.executeTarget("andincomplete")
buildRule.getProject()
buildRule.getProject().getProperty("andincomplete")
buildRule.executeTarget("andempty")
buildRule.getProject()
buildRule.getProject().getProperty("andempty")
buildRule.executeTarget("or")
buildRule.getProject()
buildRule.getProject().getProperty("or")
buildRule.executeTarget("or")
buildRule.getProject()
buildRule.getProject().getProperty("or")
buildRule.executeTarget("orfails")
buildRule.getProject()
buildRule.getProject().getProperty("orfails")
buildRule.executeTarget("orboth")
buildRule.getProject()
buildRule.getProject().getProperty("orboth")
buildRule.executeTarget("filesmatch-identical")
buildRule.getProject()
buildRule.getProject().getProperty("filesmatch-identical")
thrown.expect(BuildException.class)
thrown.expectMessage("both file1 and file2 are required in filesmatch")
buildRule.executeTarget("filesmatch-incomplete")
buildRule.executeTarget("filesmatch-oddsizes")
buildRule.getProject()
buildRule.getProject().getProperty("filesmatch-oddsizes")
buildRule.executeTarget("filesmatch-existence")
buildRule.getProject()
buildRule.getProject().getProperty("filesmatch-existence")
buildRule.executeTarget("filesmatch-different")
buildRule.getProject()
buildRule.getProject().getProperty("filesmatch-different")
buildRule.executeTarget("filesmatch-match")
buildRule.getProject()
buildRule.getProject().getProperty("filesmatch-match")
buildRule.executeTarget("filesmatch-different-sizes")
buildRule.getProject()
buildRule.getProject().getProperty("filesmatch-different-sizes")
buildRule.executeTarget("filesmatch-different-onemissing")
buildRule.getProject()
buildRule.getProject().getProperty("filesmatch-different-onemissing")
buildRule.executeTarget("filesmatch-different-eol")
buildRule.executeTarget("filesmatch-same-eol")
buildRule.executeTarget("filesmatch-neitherexist")
buildRule.executeTarget("contains")
buildRule.getProject()
buildRule.getProject().getProperty("contains")
buildRule.executeTarget("contains-doesnt")
buildRule.getProject()
buildRule.getProject().getProperty("contains-doesnt")
buildRule.executeTarget("contains-anycase")
buildRule.getProject()
buildRule.getProject().getProperty("contains-anycase")
thrown.expect(BuildException.class)
thrown.expectMessage("both string and substring are required in contains")
buildRule.executeTarget("contains-incomplete1")
thrown.expect(BuildException.class)
thrown.expectMessage("both string and substring are required in contains")
buildRule.executeTarget("contains-incomplete2")
buildRule.executeTarget("istrue")
buildRule.getProject()
buildRule.getProject().getProperty("istrue")
buildRule.executeTarget("istrue-not")
buildRule.getProject()
buildRule.getProject().getProperty("istrue-not")
buildRule.executeTarget("istrue-false")
buildRule.getProject()
buildRule.getProject().getProperty("istrue-false")
thrown.expect(BuildException.class)
thrown.expectMessage("Nothing to test for truth")
buildRule.executeTarget("istrue-incomplete")
buildRule.executeTarget("isfalse-true")
buildRule.getProject()
buildRule.getProject().getProperty("isfalse-true")
buildRule.executeTarget("isfalse-not")
buildRule.getProject()
buildRule.getProject().getProperty("isfalse-not")
buildRule.executeTarget("isfalse-false")
buildRule.getProject()
buildRule.getProject().getProperty("isfalse-false")
thrown.expect(BuildException.class)
thrown.expectMessage("Nothing to test for falsehood")
buildRule.executeTarget("isfalse-incomplete")
buildRule.executeTarget("testElse")
buildRule.executeTarget("resourcematch-error")
buildRule.executeTarget("resourcesmatch-match-empty")
buildRule.executeTarget("resourcesmatch-match-one")
buildRule.executeTarget("resourcesmatch-match-binary")
buildRule.executeTarget("resourcesmatch-match-multiple-binary")
buildRule.executeTarget("resourcesmatch-differ")
buildRule.executeTarget("resourcesmatch-match-text")
buildRule.executeTarget("resourcesmatch-noneexist")
buildRule.configureProject("src/etc/testcases/taskdefs/copydir.xml")
buildRule.executeTarget("setUp")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.executeTarget("test4")
buildRule.getLog()
buildRule.executeTarget("test5")
buildRule.getProject()
buildRule.getProject().getProperty("output")
f.exists()
f.isDirectory()
buildRule.executeTarget("test6")
buildRule.configureProject("src/etc/testcases/taskdefs/copyfile.xml")
buildRule.executeTarget("setUp")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.executeTarget("test4")
buildRule.getLog()
buildRule.executeTarget("test5")
buildRule.getProject()
buildRule.getProject().getProperty("output")
f.exists()
f.delete()
buildRule.executeTarget("test6")
buildRule.configureProject("src/etc/testcases/taskdefs/copy.xml")
buildRule.executeTarget("setUp")
buildRule.executeTarget("test1")
buildRule.getProject()
buildRule.getProject().getProperty("output")
f.exists()
buildRule.executeTarget("test2")
buildRule.getProject()
buildRule.getProject().getProperty("output")
f.exists()
buildRule.executeTarget("test3")
buildRule.getProject()
buildRule.getProject().getProperty("output")
FileUtilities.rollbackTimestamps(file3,3)
buildRule.executeTarget("test3Part2")
file3.exists()
file3a.exists()
file3b.exists()
file3c.exists()
file3.length()
file3c.length()
file3b.length()
file3a.lastModified()
file3.lastModified()
file3c.lastModified()
file3a.lastModified()
buildRule.executeTarget("filtertest")
buildRule.getLog()
not(containsString("loop in tokens"))
containsString("loop in tokens")
buildRule.executeTarget("infinitetest")
buildRule.getOutput()
containsString("loop in tokens")
buildRule.executeTarget("testFilterSet")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.getProject()
buildRule.getProject().getBaseDir()
tmp.exists()
FileUtilities.getFileContents(tmp)
FileUtilities.getFileContents(check)
buildRule.executeTarget("testFilterChain")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.getProject()
buildRule.getProject().getBaseDir()
tmp.exists()
FileUtilities.getFileContents(tmp)
FileUtilities.getFileContents(check)
buildRule.executeTarget("test_single_file_fileset")
buildRule.getProject()
buildRule.getProject().getProperty("output")
file.exists()
buildRule.executeTarget("test_single_file_path")
buildRule.getProject()
buildRule.getProject().getProperty("output")
file.exists()
buildRule.executeTarget("testTranscoding")
buildRule.getProject()
buildRule.getProject().resolveFile("copy/expected/utf-8")
buildRule.getProject()
buildRule.getProject().getProperty("output")
FileUtilities.getFileContents(f1)
FileUtilities.getFileContents(f2)
buildRule.executeTarget("testMissingFileIgnore")
buildRule.getLog()
containsString("Warning: Could not find file")
thrown.expect(BuildException.class)
thrown.expectMessage(startsWith("Warning: Could not find file "))
startsWith("Warning: Could not find file ")
buildRule.executeTarget("testMissingFileBail")
buildRule.executeTarget("testMissingDirIgnore")
buildRule.getLog()
containsString("Warning: ")
thrown.expect(BuildException.class)
thrown.expectMessage(endsWith(" does not exist."))
endsWith(" does not exist.")
buildRule.executeTarget("testMissingDirBail")
buildRule.executeTarget("testFileResourcePlain")
buildRule.getProject()
buildRule.getProject().getProperty("to.dir")
newFile(toDir+"/file1.txt").exists()
newFile(toDir+"/file2.txt").exists()
newFile(toDir+"/file3.txt").exists()
buildRule.executeTarget("testFileResourceWithMapper")
buildRule.getProject()
buildRule.getProject().getProperty("to.dir")
newFile(toDir+"/file1.txt.bak").exists()
newFile(toDir+"/file2.txt.bak").exists()
newFile(toDir+"/file3.txt.bak").exists()
buildRule.executeTarget("testFileResourceWithFilter")
buildRule.getProject()
buildRule.getProject().getProperty("to.dir")
file1.exists()
FileUtils.readFully(f)
buildRule.executeTarget("testPathAsResource")
buildRule.getProject()
buildRule.getProject().getProperty("to.dir")
newFile(toDir+"/file1.txt").exists()
newFile(toDir+"/file2.txt").exists()
newFile(toDir+"/file3.txt").exists()
buildRule.executeTarget("testZipfileset")
buildRule.getProject()
buildRule.getProject().getProperty("to.dir")
newFile(toDir+"/file1.txt").exists()
newFile(toDir+"/file2.txt").exists()
newFile(toDir+"/file3.txt").exists()
buildRule.executeTarget("testDirset")
buildRule.executeTarget("testResourcePlain")
buildRule.executeTarget("testResourcePlainWithMapper")
buildRule.executeTarget("testResourcePlainWithFilter")
buildRule.executeTarget("testOnlineResources")
assumeTrue("Symlinks not supported on this operating system",Os.isFamily(Os.FAMILY_UNIX))
Os.isFamily(Os.FAMILY_UNIX)
buildRule.executeTarget("setupSelfCopyTesting")
buildRule.getProject()
buildRule.getProject().getProperty("self.copy.test.root.dir")
testDir.isDirectory()
srcFile.isFile()
srcFile.length()
FileUtils.readFully(reader)
originalContent.isEmpty()
buildRule.executeTarget("testSelfCopy")
symlinkedFile.isFile()
buildRule.getProject()
buildRule.getProject().getProperty("self.copy.test.symlinked.dir")
symlinkedTestDir.isDirectory()
file.isFile()
file.length()
FileUtils.readFully(reader)
buildRule.configureProject("src/etc/testcases/taskdefs/cvspass.xml")
buildRule.executeTarget("cleanup")
thrown.expect(BuildException.class)
thrown.expectMessage("cvsroot is required")
buildRule.executeTarget("test1")
thrown.expect(BuildException.class)
thrown.expectMessage("password is required")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.getProject()
buildRule.getProject().getBaseDir()
f.exists()
FileUtilities.getFileContents(f)
buildRule.executeTarget("test4")
buildRule.getProject()
buildRule.getProject().getBaseDir()
f.exists()
FileUtilities.getFileContents(f)
buildRule.executeTarget("test5")
buildRule.getProject()
buildRule.getProject().getBaseDir()
f.exists()
FileUtilities.getFileContents(f)
Arrays.asList(newObject[][]{{"test1",newString[]{"**/*~","**/#*#","**/.#*","**/%*%","**/._*","**/CVS","**/CVS/**","**/.cvsignore","**/SCCS","**/SCCS/**","**/vssver.scc","**/.svn","**/.svn/**","**/.git","**/.git/**","**/.gitattributes","**/.gitignore","**/.gitmodules","**/.hg","**/.hg/**","**/.hgignore","**/.hgsub","**/.hgsubstate","**/.hgtags","**/.bzr","**/.bzr/**","**/.bzrignore","**/.DS_Store"}},{"test2",newString[]{"**/*~","**/#*#","**/.#*","**/%*%","**/._*","**/CVS","**/CVS/**","**/.cvsignore","**/SCCS","**/SCCS/**","**/vssver.scc","**/.svn","**/.svn/**","**/.git","**/.git/**","**/.gitattributes","**/.gitignore","**/.gitmodules","**/.hg","**/.hg/**","**/.hgignore","**/.hgsub","**/.hgsubstate","**/.hgtags","**/.bzr","**/.bzr/**","**/.bzrignore","**/.DS_Store","foo"}},{"test3",newString[]{"**/*~","**/#*#","**/.#*","**/%*%","**/._*","**/CVS/**","**/.cvsignore","**/SCCS","**/SCCS/**","**/vssver.scc","**/.svn","**/.svn/**","**/.git","**/.git/**","**/.gitattributes","**/.gitignore","**/.gitmodules","**/.hg","**/.hg/**","**/.hgignore","**/.hgsub","**/.hgsubstate","**/.hgtags","**/.bzr","**/.bzr/**","**/.bzrignore","**/.DS_Store"}}})
buildRule.configureProject("src/etc/testcases/taskdefs/defaultexcludes.xml")
buildRule.executeTarget("cleanup")
buildRule.getProject()
buildRule.getProject().executeTarget(targetName)
DirectoryScanner.getDefaultExcludes()
Arrays.asList(actual)
Arrays.asList(actual).contains(element)
buildRule.configureProject("src/etc/testcases/taskdefs/delete.xml")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test4")
buildRule.executeTarget("test5")
buildRule.executeTarget("test6")
buildRule.executeTarget("test7")
buildRule.executeTarget("test8")
buildRule.executeTarget("test9")
buildRule.executeTarget("test10")
buildRule.executeTarget("test11")
buildRule.executeTarget("test12")
buildRule.executeTarget("test13")
buildRule.executeTarget("test14")
buildRule.executeTarget("test15")
buildRule.executeTarget("test16")
buildRule.executeTarget("test17")
buildRule.configureProject("src/etc/testcases/taskdefs/deltree.xml")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.configureProject("src/etc/testcases/taskdefs/dirname.xml")
thrown.expect(BuildException.class)
thrown.expectMessage("property attribute required")
buildRule.executeTarget("test1")
thrown.expect(BuildException.class)
thrown.expectMessage("file attribute required")
buildRule.executeTarget("test2")
thrown.expect(BuildException.class)
thrown.expectMessage("property attribute required")
buildRule.executeTarget("test3")
assumeFalse("Skip on DOS or Netware",Os.isFamily("netware")||Os.isFamily("dos"))
Os.isFamily("netware")
Os.isFamily("dos")
buildRule.executeTarget("test4")
buildRule.getProject()
buildRule.getProject().getProperty("local.dir")
buildRule.executeTarget("test5")
buildRule.getProject()
buildRule.getProject().getProperty(MagicNames.PROJECT_BASEDIR)
buildRule.getProject()
buildRule.getProject().getProperty("base.dir")
buildRule.configureProject("src/etc/testcases/taskdefs/dynamictask.xml")
buildRule.executeTarget("simple")
buildRule.getProject()
buildRule.getProject().getProperty("prop1")
buildRule.getProject()
buildRule.getProject().getProperty("prop2")
buildRule.getProject()
buildRule.getProject().getProperty("prop3")
buildRule.getProject()
buildRule.getProject().getProperty("prop4")
p.init()
p.addBuildListener(logger)
echo.setProject(p)
echo.setTaskName("testLogBlankEcho")
echo.execute()
folder.newFile("abc.txt")
echo.setTaskName("testLogUTF8Echo")
echo.setMessage(msg)
echo.setFile(removeThis)
echo.setEncoding(cs.name())
cs.name()
echo.execute()
readFully(newInputStreamReader(newFileInputStream(removeThis),cs))
super()
this.setMessageOutputLevel(Project.MSG_DEBUG)
this.setOutputPrintStream(newPrintStream(newByteArrayOutputStream(256)))
this.setErrorPrintStream(newPrintStream(newByteArrayOutputStream(256)))
buildRule.configureProject("src/etc/testcases/taskdefs/echoxml.xml")
buildRule.executeTarget("tearDown")
buildRule.executeTarget("testPass")
thrown.expect(BuildException.class)
thrown.expectMessage("${foo}=bar")
buildRule.executeTarget("testFail")
thrown.expect(BuildException.class)
thrown.expectMessage("No nested XML specified")
buildRule.executeTarget("testEmpty")
buildRule.configureProject("src/etc/testcases/taskdefs/exec/exec-with-redirector.xml")
folder.newFolder(String.valueOf("temp-"+System.nanoTime()))
String.valueOf("temp-"+System.nanoTime())
System.nanoTime()
buildRule.getProject()
buildRule.getProject().setUserProperty("output",outputDir.toString())
outputDir.toString()
buildRule.executeTarget("setUp")
buildRule.getProject()
buildRule.getProject().getProperty("dir.to.ls")
newFile(dirToList).isDirectory()
buildRule.executeTarget("list-dir")
redirectedOutputFile.isFile()
readAllBytes(redirectedOutputFile)
Arrays.equals(dirListingOutput,redirectedOutput)
fis.read(dataChunk)
bos.write(dataChunk,0,numRead)
bos.toByteArray()
buildRule.configureProject("src/etc/testcases/taskdefs/exec/exec.xml")
buildRule.getProject()
buildRule.getProject().executeTarget("setUp")
assumeNotNull(buildRule.getProject().getProperty("test.can.run"))
buildRule.getProject()
buildRule.getProject().getProperty("test.can.run")
buildRule.getProject()
buildRule.getProject().getProperty(MagicNames.ANT_FILE)
FILE_UTILS.createTempFile("spawn","log",newFile(buildRule.getProject().getProperty("output")),false,false)
buildRule.getProject()
buildRule.getProject().getProperty("output")
logFile.exists()
myBuild.setTimeToWait(TIME_TO_WAIT)
myBuild.setLogFile(logFile.getAbsolutePath())
logFile.getAbsolutePath()
myBuild.addBuildListener(newMonitoredBuildListener())
myBuild.start()
Thread.sleep(10)
now.getTime()
now.getTime().getTime()
startwait.getTime()
startwait.getTime().getTime()
System.out.println("aborting wait, too long "+(now.getTime().getTime()-startwait.getTime().getTime())+"milliseconds")
now.getTime()
now.getTime().getTime()
startwait.getTime()
startwait.getTime().getTime()
Thread.sleep((TIME_TO_WAIT)*1000+SECURITY_MARGIN)
myBuild.getTimeElapsed()
logFile.getAbsolutePath()
logFile.exists()
buildRule.getProject()
buildRule.getProject().executeTarget("test-out-and-err")
project.setProperty("logFile",logFile)
project.setProperty("timeToWait",Long.toString(timeToWait))
Long.toString(timeToWait)
project.addBuildListener(bl)
project.init()
project.setUserProperty(MagicNames.ANT_FILE,myBuildFile.getAbsolutePath())
myBuildFile.getAbsolutePath()
ProjectHelper.configureProject(project,myBuildFile)
timeFinished.getTime()
timeFinished.getTime().getTime()
timeStarted.getTime()
timeStarted.getTime().getTime()
myBuildFile.toString()
worker.start()
startProject()
project.executeTarget(target)
event.getTarget()
event.getTarget().getName()
event.getTarget().getName().equals("spawn")
ej.setTimeout((long)TIME_OUT)
project.setBasedir(".")
project.setProperty(MagicNames.ANT_HOME,System.getProperty(MagicNames.ANT_HOME))
System.getProperty(MagicNames.ANT_HOME)
getTestClassPath()
ej.setClasspath(cp)
cmd.setExecutable(TimeProcess.class.getName())
TimeProcess.class.getName()
cmd.createArgument()
cmd.createArgument().setValue(String.valueOf(timetorun))
String.valueOf(timetorun)
getCommandline(TIME_OUT/2)
ej.setJavaCommand(cmd)
ej.execute(project)
ej.killedProcess()
getCommandline(TIME_OUT*2)
ej.setJavaCommand(cmd)
System.currentTimeMillis()
ej.execute(project)
System.currentTimeMillis()
ej.killedProcess()
getCommandline(TIME_OUT/2)
ej.setJavaCommand(cmd)
ej.fork(cp)
ej.killedProcess()
getCommandline(TIME_OUT*2)
ej.setJavaCommand(cmd)
System.currentTimeMillis()
ej.fork(cp)
System.currentTimeMillis()
ej.killedProcess()
System.getProperty("build.tests.value")
System.err.println("WARNING: 'build.tests.value' property is not available!")
System.getProperty("java.class.path")
System.getProperty("build.tests.value")
System.err.println("WARNING: 'build.tests.value' property is not available!")
System.getProperty("java.class.path")
JavaEnvUtils.getJreExecutable("java")
TimeProcess.class.getName()
String.valueOf(timetorun)
Runtime.getRuntime()
Runtime.getRuntime().exec(cmdArray)
p.getErrorStream()
err.lines()
err.lines().collect(Collectors.joining())
Collectors.joining()
p.waitFor()
getErrorOutput(p)
err.isEmpty()
System.err.println("ERROR:")
System.err.println(err)
getProcess(TIME_OUT/2)
watchdog.start(process)
waitForEnd(process)
watchdog.killedProcess()
Execute.isFailure(retCode)
getProcess(TIME_OUT*2)
System.currentTimeMillis()
watchdog.start(process)
process.waitFor()
System.currentTimeMillis()
watchdog.killedProcess()
getProcess(-1)
watchdog.start(process)
process.waitFor()
watchdog.killedProcess()
getProcess(TIME_OUT*2)
watchdog.start(process)
process.waitFor()
thread.start()
thread.join(TIME_OUT/2)
watchdog.stop()
thread.join()
process.exitValue()
watchdog.killedProcess()
buildRule.configureProject("src/etc/testcases/taskdefs/fail.xml")
thrown.expect(BuildException.class)
thrown.expectMessage("No message")
buildRule.executeTarget("test1")
thrown.expect(BuildException.class)
thrown.expectMessage("test2")
buildRule.executeTarget("test2")
thrown.expect(BuildException.class)
thrown.expectMessage("testText")
buildRule.executeTarget("testText")
buildRule.executeTarget("testIf")
buildRule.getProject()
buildRule.getProject().setProperty("foo","")
buildRule.executeTarget("testIf")
buildRule.executeTarget("testUnless")
buildRule.getProject()
buildRule.getProject().setProperty("foo","")
buildRule.executeTarget("testUnless")
thrown.expect(BuildException.class)
thrown.expectMessage("if=if and unless=unless")
buildRule.executeTarget("testIfAndUnless")
buildRule.getProject()
buildRule.getProject().setProperty("if","")
buildRule.executeTarget("testIfAndUnless")
buildRule.getProject()
buildRule.getProject().setProperty("unless","")
buildRule.executeTarget("testIfAndUnless")
buildRule.getProject()
buildRule.getProject().setProperty("unless","")
buildRule.executeTarget("testIfAndUnless")
thrown.expect(BuildException.class)
thrown.expectMessage("condition satisfied")
buildRule.executeTarget("testNested1")
buildRule.executeTarget("testNested2")
thrown.expect(BuildException.class)
thrown.expectMessage("testNested3")
buildRule.executeTarget("testNested3")
thrown.expect(BuildException.class)
thrown.expectMessage("Nested conditions not permitted in conjunction with if/unless attributes")
Arrays.asList('a','b','c')
target.setCharAt(target.length()-1,ch)
target.length()
buildRule.executeTarget(target.toString())
target.toString()
thrown.expect(BuildException.class)
thrown.expectMessage("Only one nested condition is allowed.")
buildRule.executeTarget("testNested5")
thrown.expect(BuildException.class)
thrown.expectMessage("testNested6\ntestNested6\ntestNested6")
buildRule.executeTarget("testNested6")
thrown.expect(BuildException.class)
thrown.expectMessage("A single nested condition is required.")
Arrays.asList('a','b')
target.setCharAt(target.length()-1,ch)
target.length()
buildRule.executeTarget(target.toString())
target.toString()
buildRule.configureProject("src/etc/testcases/taskdefs/filter.xml")
buildRule.executeTarget("cleanup")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.executeTarget("test4")
buildRule.executeTarget("test5")
getFilteredFile("5","filtered.tmp")
buildRule.executeTarget("test6")
getFilteredFile("6","taskdefs.tmp/filter1.txt")
buildRule.executeTarget("test7")
getFilteredFile("7","filtered.tmp")
buildRule.executeTarget("test8")
getFilteredFile("8","taskdefs.tmp/filter2.txt")
buildRule.executeTarget("test9")
getFilteredFile("9","taskdefs.tmp/filter3.txt")
buildRule.getProject()
buildRule.getProject().getBaseDir()
f.exists()
in.readLine()
fail("filter test"+testNumber+" failed.  IOException while reading filtered file: "+ioe)
f.delete()
buildRule.configureProject("src/etc/testcases/taskdefs/fixcrlf/build.xml")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.executeTarget("test4")
buildRule.executeTarget("test5")
buildRule.executeTarget("test6")
buildRule.executeTarget("test7")
buildRule.executeTarget("test8")
buildRule.executeTarget("test9")
buildRule.executeTarget("testMacLines")
buildRule.executeTarget("testNoOverwrite")
buildRule.executeTarget("testEncoding")
buildRule.executeTarget("testOutputEncoding")
buildRule.executeTarget("testLongLines")
buildRule.executeTarget("testCrCrLfSequence-unix")
buildRule.executeTarget("testCrCrLfSequence-dos")
buildRule.executeTarget("testCrCrLfSequence-mac")
buildRule.executeTarget("testFixlastDos")
buildRule.executeTarget("testFixlastFalseMac")
buildRule.executeTarget("testFixFile")
thrown.expect(BuildException.class)
thrown.expectMessage(FixCRLF.ERROR_FILE_AND_SRCDIR)
buildRule.executeTarget("testFixFileExclusive")
buildRule.executeTarget("createParentDirs")
buildRule.executeTarget("testPreserveLastModified")
buildRule.executeTarget("testFilter1")
buildRule.executeTarget("testFilter2")
buildRule.executeTarget("testFilter3")
buildRule.executeTarget("testFilter4")
buildRule.executeTarget("testFilter5")
buildRule.executeTarget("testFilter6")
buildRule.executeTarget("testFilter7")
buildRule.executeTarget("testFilter8")
buildRule.executeTarget("testFilter9")
buildRule.executeTarget("testCannotDoubleEof")
buildRule.executeTarget("testTabInLiteralInComment")
result.exists()
Files.newInputStream(expect.toPath())
expect.toPath()
Files.newInputStream(result.toPath())
result.toPath()
inExpect.read()
inResult.read()
inExpect.read()
inResult.read()
buildRule.configureProject("src/etc/testcases/taskdefs/get.xml")
buildRule.executeTarget("cleanup")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.executeTarget("test4")
buildRule.executeTarget("test5")
buildRule.executeTarget("test6")
thrown.expect(BuildException.class)
buildRule.executeTarget("test7")
buildRule.getLog()
not(containsString("Adding header"))
containsString("Adding header")
buildRule.executeTarget("testUseTimestamp")
buildRule.executeTarget("testUseTomorrow")
buildRule.executeTarget("testTwoHeadersAreAddedOK")
buildRule.getLog()
both(containsString("Adding header 'header1'"))
containsString("Adding header 'header1'")
both(containsString("Adding header 'header1'")).and(containsString("Adding header 'header2'"))
containsString("Adding header 'header2'")
buildRule.executeTarget("testEmptyHeadersAreNeverAdded")
buildRule.getLog()
not(containsString("Adding header"))
containsString("Adding header")
buildRule.executeTarget("testThatWhenMoreThanOneHeaderHaveSameNameOnlyLastOneIsAdded")
buildRule.getLog()
containsString("Adding header 'header1'")
log.split("Adding header ")
buildRule.executeTarget("testHeaderSpaceTrimmed")
buildRule.getLog()
containsString("Adding header 'header1'")
buildRule.configureProject("src/etc/testcases/taskdefs/gunzip.xml")
buildRule.executeTarget("cleanup")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
testRealTest("realTest")
testRealTest("realTestWithResource")
testRealTest("realTest")
testRealTest("testGzipTask")
testRealTest("testDocumentationClaimsOnCopy")
buildRule.configureProject("src/etc/testcases/taskdefs/gzip.xml")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.executeTarget("test4")
buildRule.executeTarget("realTest")
buildRule.getLog()
startsWith("Building:")
endsWith("asf-logo.gif.gz")
buildRule.executeTarget("realTestWithResource")
buildRule.executeTarget("testDateCheck")
buildRule.getLog()
endsWith("asf-logo.gif.gz is up to date.")
buildRule.executeTarget("cleanup")
buildRule.configureProject("src/etc/testcases/taskdefs/import/import.xml")
buildRule.getLog()
containsString("Before importIn imported topAfter import")
buildRule.configureProject("src/etc/testcases/taskdefs/import/unnamedImport.xml",Project.MSG_WARN)
buildRule.getLog()
log.length()
buildRule.configureProject("src/etc/testcases/taskdefs/import/subdir/serial.xml")
buildRule.getLog()
containsString("Unnamed2.xmlUnnamed1.xml")
buildRule.getFullLog()
containsString("Skipped already imported file")
buildRule.configureProject("src/etc/testcases/taskdefs/import/subdir/importintarget.xml")
buildRule.executeTarget("no-import")
buildRule.getProject()
buildRule.getProject().getProperty("foo")
buildRule.getProject()
buildRule.getProject().getReference("baz")
buildRule.configureProject("src/etc/testcases/taskdefs/import/subdir/importintarget.xml")
buildRule.executeTarget("do-import")
buildRule.getProject()
buildRule.getProject().getProperty("foo")
buildRule.getProject()
buildRule.getProject().getReference("baz")
thrown.expect(BuildException.class)
thrown.expectMessage("import only allowed as a top-level task")
buildRule.configureProject("src/etc/testcases/taskdefs/import/subdir/importintarget.xml")
buildRule.executeTarget("do-import")
buildRule.configureProject("src/etc/testcases/taskdefs/import/subdir/importinsequential.xml")
buildRule.executeTarget("within-imported")
buildRule.getProject()
buildRule.getProject().getProperty("foo")
buildRule.getProject()
buildRule.getProject().getReference("baz")
thrown.expect(BuildException.class)
thrown.expectMessage("Duplicate target")
buildRule.configureProject("src/etc/testcases/taskdefs/import/same_target.xml")
thrown.expect(BuildException.class)
thrown.expectMessage("bad.xml")
thrown.expect(hasProperty("location",hasProperty("fileName",containsString("import_bad_import.xml"))))
hasProperty("location",hasProperty("fileName",containsString("import_bad_import.xml")))
hasProperty("fileName",containsString("import_bad_import.xml"))
containsString("import_bad_import.xml")
buildRule.configureProject("src/etc/testcases/taskdefs/import/import_bad_import.xml")
newFile(ln).exists()
assumeTrue("Current system does not support Symlinks",newFile(ln).exists())
newFile(ln).exists()
buildRule.configureProject("src/etc/testcases/taskdefs/import/import.xml")
buildRule.getProject()
buildRule.getProject().resolveFile("symlinks/d3b")
symlinkFile.getAbsolutePath()
Runtime.getRuntime()
Runtime.getRuntime().exec(newString[]{ln,"-s","d3a",symlinkFile.getAbsolutePath()})
symlinkFile.getAbsolutePath()
Runtime.getRuntime().exec(newString[]{ln,"-s","d3a",symlinkFile.getAbsolutePath()}).waitFor()
buildRule.configureProject("src/etc/testcases/taskdefs/import/symlinks/d1/p1.xml")
buildRule.getProject()
buildRule.getProject().getProperty("ant.file.p2")
buildRule.getProject()
buildRule.getProject().resolveFile("../d2/p2.xml")
buildRule.getProject().resolveFile("../d2/p2.xml").getAbsolutePath()
buildRule.getProject()
buildRule.getProject().getProperty("ant.file.p3")
buildRule.getProject()
buildRule.getProject().resolveFile("../d3b/p3.xml")
buildRule.getProject().resolveFile("../d3b/p3.xml").getAbsolutePath()
symlinkFile.delete()
buildRule.configureProject("src/etc/testcases/taskdefs/import/importtargetfirst.xml")
buildRule.getLog()
containsString("Importing targetfirstAfter target firstAfter importing")
buildRule.configureProject("src/etc/testcases/taskdefs/import/c.xml")
System.getProperty("build.tests.value")
buildRule.configureProject("src/etc/testcases/taskdefs/initializeclass.xml")
buildRule.getProject()
buildRule.getProject().resolveFile("forkedout")
buildRule.getProject()
buildRule.getProject().resolveFile("unforkedout")
buildRule.executeTarget("forked")
System.setOut(newps)
buildRule.getProject()
buildRule.getProject().executeTarget("unforked")
System.setOut(ps)
FileUtilities.getFileContents(f1)
FileUtilities.getFileContents(f2)
f1.delete()
f2.delete()
buildRule.configureProject("src/etc/testcases/taskdefs/input.xml")
System.getProperties()
System.getProperties().put(PropertyFileInputHandler.FILE_NAME_KEY,buildRule.getProject().resolveFile("input.properties").getAbsolutePath())
buildRule.getProject()
buildRule.getProject().resolveFile("input.properties")
buildRule.getProject().resolveFile("input.properties").getAbsolutePath()
buildRule.getProject()
buildRule.getProject().setInputHandler(newPropertyFileInputHandler())
System.setIn(originalStdIn)
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
thrown.expect(BuildException.class)
thrown.expectMessage("Found invalid input test for 'All data is going to be deleted from DB continue?'")
buildRule.executeTarget("test3")
buildRule.executeTarget("test5")
buildRule.executeTarget("test6")
buildRule.getProject()
buildRule.getProject().getProperty("db.user")
buildRule.executeTarget("testPropertyFileInlineHandler")
stdin()
buildRule.executeTarget("testDefaultInlineHandler")
stdin()
buildRule.executeTarget("testGreedyInlineHandler")
stdin()
buildRule.executeTarget("testGreedyInlineHandlerClassname")
stdin()
buildRule.executeTarget("testGreedyInlineHandlerRefid")
System.setIn(newFileInputStream(buildRule.getProject().resolveFile("input.stdin")))
buildRule.getProject()
buildRule.getProject().resolveFile("input.stdin")
buildRule.configureProject("src/etc/testcases/taskdefs/jar.xml")
buildRule.executeTarget("setUp")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.executeTarget("test4")
getOutputDir()
jarFile.exists()
testNoRecreate("test4")
testNoRecreate("testNoRecreateWithUpdate")
buildRule.executeTarget("test4")
getOutputDir()
assumeTrue(jarFile.setLastModified(jarFile.lastModified()-FileUtils.getFileUtils().getFileTimestampGranularity()*3))
jarFile.setLastModified(jarFile.lastModified()-FileUtils.getFileUtils().getFileTimestampGranularity()*3)
jarFile.lastModified()
FileUtils.getFileUtils()
FileUtils.getFileUtils().getFileTimestampGranularity()
jarFile.lastModified()
buildRule.executeTarget(secondTarget)
jarFile.lastModified()
testRecreate("test4","testRecreateWithoutUpdateAdditionalFiles")
testRecreate("test4","testRecreateWithUpdateAdditionalFiles")
testRecreate("testRecreateNewerFileSetup","testRecreateWithoutUpdateNewerFile")
testRecreate("testRecreateNewerFileSetup","testRecreateWithUpdateNewerFile")
FileUtilities.rollbackTimestamps(buildRule.getProject().getBaseDir(),5)
buildRule.getProject()
buildRule.getProject().getBaseDir()
buildRule.executeTarget(firstTarget)
getOutputDir()
FileUtilities.rollbackTimestamps(buildRule.getOutputDir(),5)
buildRule.getOutputDir()
jarFile.lastModified()
buildRule.executeTarget(secondTarget)
getOutputDir()
jarFile.lastModified()
buildRule.executeTarget("testManifestStaysIntact")
getOutputDir()
getOutputDir()
testNoRecreate("testNoRecreateBasedirExcludesWithUpdate")
testNoRecreate("testNoRecreateBasedirExcludesWithoutUpdate")
testNoRecreate("testNoRecreateZipfilesetExcludesWithUpdate")
testNoRecreate("testNoRecreateZipfilesetExcludesWithoutUpdate")
testRecreate("test4","testRecreateZipfilesetWithoutUpdateAdditionalFiles")
testRecreate("test4","testRecreateZipfilesetWithUpdateAdditionalFiles")
testRecreate("testRecreateNewerFileSetup","testRecreateZipfilesetWithoutUpdateNewerFile")
testRecreate("testRecreateNewerFileSetup","testRecreateZipfilesetWithUpdateNewerFile")
buildRule.executeTarget("testCreateWithEmptyFilesetSetUp")
buildRule.executeTarget("testCreateWithEmptyFileset")
buildRule.executeTarget("testCreateWithEmptyFileset")
buildRule.executeTarget("testUpdateIfOnlyManifestHasChanged")
getOutputDir()
jarXml.exists()
buildRule.executeTarget("testIndexTests")
getOutputDir()
StreamUtils.enumerationAsStream(archive.entries())
archive.entries()
StreamUtils.enumerationAsStream(archive.entries()).filter(ze->ze.getName().equals("META-INF/INDEX.LIST"))
ze.getName()
ze.getName().equals("META-INF/INDEX.LIST")
StreamUtils.enumerationAsStream(archive.entries()).filter(ze->ze.getName().equals("META-INF/INDEX.LIST")).count()
buildRule.executeTarget("testIndexTests")
getOutputDir()
archive.getEntry("META-INF/INDEX.LIST")
archive.getInputStream(ze)
r.readLine()
r.readLine()
buildRule.executeTarget("testManifestOnlyJar")
buildRule.getLog()
containsString("Building MANIFEST-only jar: ")
getOutputDir()
manifestFile.exists()
buildRule.executeTarget("testIndexJarsPlusJarMarker")
thrown.expect(BuildException.class)
thrown.expectMessage("No Implementation-Title set.")
buildRule.executeTarget("testNoVersionInfoFail")
buildRule.executeTarget("testNoVersionInfoIgnore")
buildRule.getFullLog()
containsString("No Implementation-Title set.")
buildRule.getFullLog()
containsString("No Implementation-Version set.")
buildRule.getFullLog()
containsString("No Implementation-Vendor set.")
buildRule.executeTarget("testNoVersionInfoWarn")
buildRule.getLog()
containsString("No Implementation-Title set.")
buildRule.getLog()
containsString("No Implementation-Version set.")
buildRule.getLog()
containsString("No Implementation-Vendor set.")
buildRule.executeTarget("testNoVersionInfoNoStrict")
buildRule.getLog()
not(containsString("No Implementation-Title set."))
containsString("No Implementation-Title set.")
buildRule.getLog()
not(containsString("No Implementation-Version set."))
containsString("No Implementation-Version set.")
buildRule.getLog()
not(containsString("No Implementation-Vendor set."))
containsString("No Implementation-Vendor set.")
buildRule.executeTarget("testHasVersionInfo")
buildRule.getLog()
not(containsString("No Implementation-Title set."))
containsString("No Implementation-Title set.")
buildRule.getLog()
not(containsString("No Implementation-Version set."))
containsString("No Implementation-Version set.")
buildRule.getLog()
not(containsString("No Implementation-Vendor set."))
containsString("No Implementation-Vendor set.")
project.init()
javac.setProject(project)
javac.getJavacExecutable()
project.setProperty("build.compiler","modern")
javac.getJavacExecutable()
javac.setFork(true)
javac.getJavacExecutable()
javac.getJavacExecutable()
containsString("javac")
project.setProperty("build.compiler","extJavac")
javac.setFork(false)
javac.getJavacExecutable()
javac.getJavacExecutable()
containsString("javac")
project.setProperty("build.compiler","whatever")
javac.getJavacExecutable()
javac.setFork(true)
javac.setExecutable(myJavac)
javac.getJavacExecutable()
javac.getCurrentCompilerArgs()
javac.createCompilerArg()
arg.setValue(testArg)
javac.getCurrentCompilerArgs()
arg.setCompiler("jikes")
javac.getCurrentCompilerArgs()
project.setProperty("build.compiler","jvc")
javac.getCurrentCompilerArgs()
project.setProperty("build.compiler","jikes")
javac.getCurrentCompilerArgs()
arg.setLine(testArg)
javac.getCurrentCompilerArgs()
javac.createCompilerArg()
arg.setValue(testArg)
arg.setCompiler("extJavac")
javac.setFork(true)
javac.getCurrentCompilerArgs()
javac.getCompiler()
System.getProperty("build.compiler")
System.getProperty("build.compiler")
"javac1.1".equals(compiler)
"javac1.2".equals(compiler)
"javac1.3".equals(compiler)
"javac1.4".equals(compiler)
"javac1.5".equals(compiler)
"classic".equals(compiler)
javac.setFork(true)
javac.getCompiler()
javac.getCompiler()
javac.getCompilerVersion()
javac.setProject(project)
project.setUserProperty("build.compiler","jikes")
javac.getCompiler()
javac.setFork(true)
javac.getCompiler()
javac.setFork(false)
javac.setCompiler("jvc")
javac.getCompiler()
javac.setFork(true)
javac.getCompiler()
javac.setCompiler("javac1.4")
javac.setDepend(true)
CompilerAdapterFactory.getCompiler(javac.getCompiler(),javac)
javac.getCompiler()
instanceOf(Javac13.class)
javac.setFork(true)
CompilerAdapterFactory.getCompiler(javac.getCompiler(),javac)
javac.getCompiler()
instanceOf(JavacExternal.class)
javac.getSource()
project.setNewProperty(MagicNames.BUILD_JAVAC_SOURCE,"1.4")
javac.getSource()
project.setNewProperty(MagicNames.BUILD_JAVAC_SOURCE,"1.4")
javac.setSource("1.5")
javac.getSource()
javac.getTarget()
project.setNewProperty(MagicNames.BUILD_JAVAC_TARGET,"1.4")
javac.getTarget()
project.setNewProperty(MagicNames.BUILD_JAVAC_TARGET,"1.4")
javac.setTarget("1.5")
javac.getTarget()
javac.checkParameters()
javac.checkParameters()
p.setPath("src")
javac.setSrcdir(p)
p.setPath("modsrc")
javac.setModulesourcepath(mp)
javac.checkParameters()
p.setPath("src")
javac.setSourcepath(p)
p.setPath("modsrc")
javac.setModulesourcepath(mp)
p.setPath("src")
javac.setSrcdir(p)
javac.checkParameters()
System.getProperty("java.io.tmpdir")
String.format("%stestMP%d",getClass().getName(),System.currentTimeMillis()/1000)
getClass()
getClass().getName()
System.currentTimeMillis()
destDir.mkdirs()
p.setPath("src")
javac.setModulesourcepath(p)
javac.setDestdir(destDir)
javac.checkParameters()
destDir.delete()
p.setPath("src")
javac.setModulesourcepath(p)
javac.checkParameters()
buildRule.configureProject("src/etc/testcases/taskdefs/javadoc/javadoc.xml")
buildRule.executeTarget("dirsetPath")
buildRule.executeTarget("dirsetPathWithoutPackagenames")
buildRule.executeTarget("nestedDirsetPath")
buildRule.executeTarget("filesetPath")
buildRule.executeTarget("nestedFilesetPath")
buildRule.executeTarget("filelistPath")
buildRule.executeTarget("nestedFilelistPath")
buildRule.executeTarget("pathelementPath")
buildRule.executeTarget("pathelementLocationPath")
buildRule.executeTarget("nestedSource")
buildRule.executeTarget("nestedFilesetRef")
buildRule.executeTarget("nestedFilesetRefInPath")
buildRule.executeTarget("nestedFilesetNoPatterns")
buildRule.executeTarget("doublyNestedFileset")
buildRule.executeTarget("doublyNestedFilesetNoPatterns")
buildRule.executeTarget("nonJavaIncludes")
buildRule.configureProject("src/etc/testcases/taskdefs/java.xml")
buildRule.executeTarget("setUp")
System.getProperty("junit.run.fatal.tests")
thrown.expect(BuildException.class)
thrown.expectMessage("Classname must not be null.")
buildRule.executeTarget("testNoJarNoClassname")
thrown.expect(BuildException.class)
thrown.expectMessage("Cannot execute a jar in non-forked mode. Please set fork='true'. ")
buildRule.executeTarget("testJarNoFork")
thrown.expect(BuildException.class)
thrown.expectMessage("Cannot use combination of ")
buildRule.executeTarget("testJarAndClassName")
thrown.expect(BuildException.class)
thrown.expectMessage("Cannot use combination of ")
buildRule.executeTarget("testClassnameAndJar")
thrown.expect(BuildException.class)
thrown.expectMessage("Cannot use combination of ")
buildRule.executeTarget("testJarAndModule")
thrown.expect(BuildException.class)
thrown.expectMessage("Cannot use combination of ")
buildRule.executeTarget("testModuleAndJar")
buildRule.executeTarget("testClassnameAndModule")
buildRule.executeTarget("testModuleAndClassname")
buildRule.executeTarget("testModule")
java.setFork(true)
java.setModule(moduleName)
java.setJvmargs("-Xmx128M")
java.setArgs(arg)
java.getCommandLine()
java.getCommandLine().getCommandline()
String.format("%s/%s",moduleName,className)
java.setFork(true)
java.setModule(moduleName)
java.setClassname(className)
java.setJvmargs("-Xmx128M")
java.setArgs(arg)
java.getCommandLine()
java.getCommandLine().getCommandline()
buildRule.executeTarget("testRun")
assumeTrue("Fatal tests have not been set to run",runFatalTests)
buildRule.executeTarget("testRunFail")
assumeTrue("Fatal tests have not been set to run",runFatalTests)
thrown.expect(BuildException.class)
thrown.expectMessage("Java returned:")
buildRule.executeTarget("testRunFailFoe")
thrown.expect(BuildException.class)
thrown.expectMessage("Java returned:")
buildRule.executeTarget("testRunFailFoeFork")
buildRule.executeTarget("testExcepting")
buildRule.getLog()
containsString("Exception raised inside called program")
buildRule.executeTarget("testExceptingFork")
buildRule.getLog()
containsString("Java Result:")
thrown.expect(BuildException.class)
thrown.expectMessage("Exception raised inside called program")
buildRule.executeTarget("testExceptingFoe")
thrown.expect(BuildException.class)
thrown.expectMessage("Java returned:")
buildRule.executeTarget("testExceptingFoeFork")
buildRule.executeTarget("testResultPropertyZero")
buildRule.getProject()
buildRule.getProject().getProperty("exitcode")
buildRule.executeTarget("testResultPropertyNonZero")
buildRule.getProject()
buildRule.getProject().getProperty("exitcode")
buildRule.executeTarget("testResultPropertyZeroNoFork")
buildRule.getProject()
buildRule.getProject().getProperty("exitcode")
buildRule.executeTarget("testResultPropertyNonZeroNoFork")
buildRule.getProject()
buildRule.getProject().getProperty("exitcode")
thrown.expect(BuildException.class)
thrown.expectMessage("Java returned:")
buildRule.executeTarget("testRunFailWithFailOnError")
buildRule.executeTarget("testRunSuccessWithFailOnError")
FILE_UTILS.createTempFile("spawn","log",newFile(buildRule.getProject().getProperty("output")),false,false)
buildRule.getProject()
buildRule.getProject().getProperty("output")
logFile.exists()
buildRule.getProject()
buildRule.getProject().setProperty("logFile",logFile.getAbsolutePath())
logFile.getAbsolutePath()
buildRule.getProject()
buildRule.getProject().setProperty("timeToWait",Long.toString(TIME_TO_WAIT))
Long.toString(TIME_TO_WAIT)
buildRule.getProject()
buildRule.getProject().executeTarget("testSpawn")
Thread.sleep(TIME_TO_WAIT*1000+SECURITY_MARGIN)
logFile.exists()
System.out.println("suggestion: increase the constant"+" SECURITY_MARGIN to give more time for java to start.")
logFile.exists()
buildRule.executeTarget("redirect1")
buildRule.executeTarget("redirect2")
buildRule.executeTarget("redirect3")
buildRule.executeTarget("redirector1")
buildRule.executeTarget("redirector2")
buildRule.getProject()
buildRule.getProject().setDefaultInputStream(in)
java.setProject(buildRule.getProject())
buildRule.getProject()
java.setClassname("org.apache.tools.ant.Main")
java.setArgs("-version")
java.setFork(true)
java.execute()
input.setProject(buildRule.getProject())
buildRule.getProject()
input.setAddproperty("input.value")
input.execute()
inputThread.start()
Thread.sleep(100)
out.write("foo\n".getBytes())
"foo\n".getBytes()
out.flush()
out.write("bar\n".getBytes())
"bar\n".getBytes()
out.flush()
inputThread.join(2000)
buildRule.getProject()
buildRule.getProject().getProperty("input.value")
buildRule.getProject()
buildRule.getProject().setDefaultInputStream(in)
java.setProject(buildRule.getProject())
buildRule.getProject()
java.setClassname("org.apache.tools.ant.Main")
java.setArgs("-version")
java.setFork(true)
java.execute()
input.setProject(buildRule.getProject())
buildRule.getProject()
input.setAddproperty("input.value")
input.execute()
inputThread.start()
Thread.sleep(100)
out.write("foo\n".getBytes())
"foo\n".getBytes()
out.flush()
out.write("bar\n".getBytes())
"bar\n".getBytes()
out.flush()
inputThread.join(2000)
buildRule.getProject()
buildRule.getProject().getProperty("input.value")
buildRule.getProject()
buildRule.getProject().setDefaultInputStream(in)
java.setProject(buildRule.getProject())
buildRule.getProject()
java.setClassname("org.apache.tools.ant.Main")
java.setArgs("-version")
java.setFork(true)
java.execute()
input.setProject(buildRule.getProject())
buildRule.getProject()
input.setAddproperty("input.value")
input.execute()
inputThread.start()
Thread.sleep(100)
out.write("foo\n".getBytes())
"foo\n".getBytes()
out.flush()
out.write("bar\n".getBytes())
"bar\n".getBytes()
out.flush()
inputThread.join(2000)
buildRule.getProject()
buildRule.getProject().getProperty("input.value")
buildRule.getProject()
buildRule.getProject().setDefaultInputStream(in)
Thread.sleep(500)
out.write("foo-FlushedInput\n".getBytes())
"foo-FlushedInput\n".getBytes()
writingThread.setDaemon(true)
writingThread.start()
buildRule.executeTarget("flushedInput")
requireJava11()
buildRule.executeTarget("simpleSourceFile")
requireJava11()
thrown.expect(BuildException.class)
thrown.expectMessage("Cannot execute sourcefile in non-forked mode. Please set fork='true'")
buildRule.executeTarget("sourceFileRequiresFork")
requireJava11()
thrown.expect(BuildException.class)
thrown.expectMessage("Cannot use 'sourcefile' in combination with")
buildRule.executeTarget("sourceFileCantUseClassname")
requireJava11()
thrown.expect(BuildException.class)
thrown.expectMessage("Cannot use 'sourcefile' in combination with")
buildRule.executeTarget("sourceFileCantUseJar")
requireJava11()
thrown.expect(BuildException.class)
thrown.expectMessage("Cannot use 'sourcefile' in combination with")
buildRule.executeTarget("sourceFileCantUseModule")
javaVersion.setAtLeast("11")
Assume.assumeTrue("Skipping test which requires a minimum of Java 11 runtime",javaVersion.eval())
javaVersion.eval()
Integer.parseInt(argv[0])
System.out.println(argv[1])
System.err.println(argv[2])
System.exit(exitCode)
Integer.parseInt(argv[0])
System.out.println(argv[1])
System.err.println(argv[2])
System.exit(exitCode)
Integer.parseInt(argv[0])
System.out.println(argv[1])
System.err.println(argv[2])
System.exit(exitCode)
Integer.parseInt(argv[0])
System.out.println(argv[1])
System.err.println(argv[2])
System.exit(exitCode)
Integer.parseInt(argv[0])
System.out.println(argv[1])
System.err.println(argv[2])
System.exit(exitCode)
buildRule.configureProject("src/etc/testcases/taskdefs/loadfile.xml")
buildRule.executeTarget("cleanup")
buildRule.executeTarget("testNoSourcefileDefined")
buildRule.executeTarget("testNoPropertyDefined")
thrown.expect(BuildException.class)
thrown.expectMessage(" doesn't exist")
buildRule.executeTarget("testNoSourcefilefound")
buildRule.executeTarget("testFailOnError")
buildRule.getProject()
buildRule.getProject().getProperty("testFailOnError")
buildRule.executeTarget("testLoadAFile")
buildRule.getProject()
buildRule.getProject().getProperty("testLoadAFile")
containsString("eh?")
buildRule.executeTarget("testLoadAFileEnc")
buildRule.getProject()
buildRule.getProject().getProperty("testLoadAFileEnc")
buildRule.executeTarget("testEvalProps")
buildRule.getProject()
buildRule.getProject().getProperty("testEvalProps")
containsString("rain")
buildRule.executeTarget("testFilterChain")
buildRule.getProject()
buildRule.getProject().getProperty("testFilterChain")
containsString("World!")
buildRule.executeTarget("testStripJavaComments")
buildRule.getProject()
buildRule.getProject().getProperty("expected")
buildRule.getProject()
buildRule.getProject().getProperty("testStripJavaComments")
buildRule.executeTarget("testOneLine")
buildRule.getProject()
buildRule.getProject().getProperty("testOneLine")
buildRule.configureProject("src/etc/testcases/taskdefs/macrodef.xml")
buildRule.executeTarget("simple")
buildRule.getLog()
buildRule.executeTarget("text")
buildRule.getLog()
buildRule.executeTarget("duplicate.attribute")
buildRule.executeTarget("duplicate.element")
buildRule.executeTarget("uri")
buildRule.getLog()
buildRule.executeTarget("nested")
buildRule.getLog()
buildRule.executeTarget("double")
buildRule.getLog()
buildRule.executeTarget("ignorecase")
buildRule.getLog()
buildRule.executeTarget("ignore-element-case")
buildRule.getLog()
buildRule.executeTarget("textelement")
buildRule.getLog()
containsString("Hello world")
buildRule.executeTarget("text.trim")
buildRule.getLog()
containsString("[Hello world]")
buildRule.executeTarget("duplicatetextname")
buildRule.executeTarget("duplicatetextname2")
buildRule.executeTarget("escape")
buildRule.getLog()
buildRule.executeTarget("attribute.description")
buildRule.getLog()
buildRule.executeTarget("override.default")
buildRule.getLog()
buildRule.executeTarget("implicit")
buildRule.getLog()
thrown.expect(BuildException.class)
thrown.expectMessage("Missing nested elements for implicit element implicit")
buildRule.executeTarget("implicit.notoptional")
buildRule.executeTarget("implicit.optional")
buildRule.getLog()
thrown.expect(BuildException.class)
thrown.expectMessage("Only one element allowed when using implicit elements")
buildRule.executeTarget("implicit.explicit")
thrown.expect(BuildException.class)
thrown.expectMessage(not(containsString("following error occurred")))
not(containsString("following error occurred"))
containsString("following error occurred")
buildRule.executeTarget("backtraceoff")
thrown.expect(BuildException.class)
thrown.expectMessage("following error occurred")
buildRule.executeTarget("backtraceon")
buildRule.executeTarget("top-level-text")
buildRule.getLog()
containsString("Hello World")
buildRule.configureProject("src/etc/testcases/taskdefs/makeurl.xml")
Arrays.asList(newObject[][]{{"testEmpty","No property defined"},{"testNoProperty","No property defined"},{"testNoFile","No files defined"},{"testValidation","A source file is missing"}})
thrown.expect(BuildException.class)
thrown.expectMessage(message)
buildRule.executeTarget(targetName)
buildRule.configureProject("src/etc/testcases/taskdefs/makeurl.xml")
Arrays.asList(newObject[][]{{"testEmpty","No property defined"},{"testNoProperty","No property defined"},{"testNoFile","No files defined"},{"testValidation","A source file is missing"}})
thrown.expect(BuildException.class)
thrown.expectMessage(message)
buildRule.executeTarget(targetName)
buildRule.configureProject("src/etc/testcases/taskdefs/manifestclasspath.xml")
thrown.expect(BuildException.class)
thrown.expectMessage("Jar's directory not found:")
buildRule.executeTarget("test-bad-directory")
buildRule.getProject()
buildRule.getProject().getProperty("jar.classpath")
thrown.expect(BuildException.class)
thrown.expectMessage("Missing 'property' attribute!")
buildRule.executeTarget("test-bad-no-property")
buildRule.getProject()
buildRule.getProject().getProperty("jar.classpath")
thrown.expect(BuildException.class)
thrown.expectMessage("Property 'jar.classpath' already set!")
buildRule.executeTarget("test-bad-property-exists")
buildRule.getProject()
buildRule.getProject().getProperty("jar.classpath")
thrown.expect(BuildException.class)
thrown.expectMessage("Missing 'jarfile' attribute!")
buildRule.executeTarget("test-bad-no-jarfile")
buildRule.getProject()
buildRule.getProject().getProperty("jar.classpath")
thrown.expect(BuildException.class)
thrown.expectMessage("Missing nested <classpath>!")
buildRule.executeTarget("test-bad-no-classpath")
buildRule.getProject()
buildRule.getProject().getProperty("jar.classpath")
buildRule.executeTarget("test-parent-level1")
buildRule.getProject()
buildRule.getProject().getProperty("jar.classpath")
buildRule.executeTarget("test-parent-level2")
buildRule.getProject()
buildRule.getProject().getProperty("jar.classpath")
thrown.expect(BuildException.class)
thrown.expectMessage("No suitable relative path from ")
buildRule.executeTarget("test-parent-level2-too-deep")
buildRule.getProject()
buildRule.getProject().getProperty("jar.classpath")
assumeTrue("No regexp matcher is present",RegexpMatcherFactory.regexpMatcherPresent(buildRule.getProject()))
RegexpMatcherFactory.regexpMatcherPresent(buildRule.getProject())
buildRule.getProject()
buildRule.executeTarget("test-pseudo-tahoe-refid")
buildRule.getProject()
buildRule.getProject().getProperty("jar.classpath")
assumeTrue("No regexp matcher is present",RegexpMatcherFactory.regexpMatcherPresent(buildRule.getProject()))
RegexpMatcherFactory.regexpMatcherPresent(buildRule.getProject())
buildRule.getProject()
buildRule.executeTarget("test-pseudo-tahoe-nested")
buildRule.getProject()
buildRule.getProject().getProperty("jar.classpath")
buildRule.executeTarget("test-parent-level2-with-jars")
buildRule.getProject()
buildRule.getProject().getProperty("jar.classpath")
buildRule.executeTarget("international-german")
buildRule.executeTarget("run-two-jars")
buildRule.getLog()
containsString("beta alpha")
assumeFalse("Test with hebrew path not attempted under Windows",Os.isFamily("windows"))
Os.isFamily("windows")
buildRule.executeTarget("international-hebrew")
buildRule.executeTarget("run-two-jars")
buildRule.getLog()
containsString("beta alpha")
assumeTrue("Test with drive letters only run on windows",Os.isFamily("windows"))
Os.isFamily("windows")
buildRule.executeTarget("testSameDrive")
buildRule.getProject()
buildRule.getProject().getProperty("cp")
assumeTrue("Test with drive letters only run on windows",Os.isFamily("windows"))
Os.isFamily("windows")
System.getProperty("java.io.tmpdir")
tmpdir.getCanonicalPath()
tmpCanonicalPath.substring(0,1)
tmpCanonicalPath.substring(0,1).toUpperCase()
System.out.println("exception happened getting canonical path of java.io.tmpdir : "+ioe.getMessage())
ioe.getMessage()
"C".equals(driveLetter)
newFile(altDriveLetter+":/foo.txt").getCanonicalPath()
assumeNoException("Drive "+altDriveLetter+": doesn't exist or is not ready",e)
buildRule.getProject()
buildRule.getProject().setProperty("altDriveLetter",altDriveLetter)
thrown.expect(BuildException.class)
thrown.expectMessage("No suitable relative path from ")
buildRule.executeTarget("testDifferentDrive")
buildRule.getProject()
buildRule.getProject().getProperty("cp")
buildRule.configureProject("src/etc/testcases/taskdefs/manifest.xml")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.executeTarget("tearDown")
buildRule.executeTarget("test1")
getManifest(expandedManifest)
manifest.getManifestVersion()
buildRule.executeTarget("test2")
getManifest(expandedManifest)
manifest.getManifestVersion()
thrown.expect(BuildException.class)
thrown.expectMessage("Invalid Manifest")
buildRule.executeTarget("test3")
thrown.expect(BuildException.class)
thrown.expectMessage("Invalid Manifest")
buildRule.executeTarget("test4")
buildRule.executeTarget("test5")
buildRule.getLog()
containsString("Manifest warning: \"Name\" attributes should not occur in the main section")
thrown.expect(BuildException.class)
thrown.expectMessage("Invalid Manifest")
buildRule.executeTarget("test6")
buildRule.getLog()
containsString("Manifest sections should start with a \"Name\" attribute")
buildRule.executeTarget("test7")
buildRule.getLog()
containsString(Manifest.ERROR_FROM_FORBIDDEN)
buildRule.executeTarget("test8")
getManifest(expandedManifest)
manifest.getMainSection()
mainSection.getAttributeValue("class-path")
manifest.getSection("Test")
testSection.getAttributeValue("TestAttr")
thrown.expect(BuildException.class)
thrown.expectMessage("Specify the section name using the \"name\" attribute of the <section> element")
buildRule.executeTarget("test9")
thrown.expect(BuildException.class)
thrown.expectMessage("Attributes must have name and value")
buildRule.executeTarget("test10")
thrown.expect(BuildException.class)
thrown.expectMessage("Attributes must have name and value")
buildRule.executeTarget("test11")
thrown.expect(BuildException.class)
thrown.expectMessage("Sections must have a name")
buildRule.executeTarget("test12")
thrown.expect(BuildException.class)
thrown.expectMessage("The attribute \"Test\" may not occur more than once in the same section")
buildRule.executeTarget("test13")
buildRule.executeTarget("test14")
getManifest(expandedManifest)
manifest.getMainSection()
mainSection.getAttributeValue("class-path")
buildRule.getProject()
p.setUserProperty("test.longline",LONG_LINE)
p.setUserProperty("test.long68name",LONG_68_NAME)
p.setUserProperty("test.long70name",LONG_70_NAME)
p.setUserProperty("test.notlongname",NOT_LONG_NAME)
p.setUserProperty("test.value",VALUE)
buildRule.executeTarget("testLongLine")
getManifest(expandedManifest)
manifest.getMainSection()
mainSection.getAttributeValue("class-path")
mainSection.getAttributeValue(LONG_68_NAME)
mainSection.getAttributeValue(LONG_70_NAME)
mainSection.getAttributeValue(NOT_LONG_NAME)
in.readLine()
set.add(read)
in.readLine()
in.close()
set.remove(" NOT_LONG")
set.remove(" NG")
set.remove(LONG_70_NAME+": ")
set.remove(NOT_LONG_NAME+": NOT_LO")
buildRule.executeTarget("testOrder1")
getManifest(expandedManifest)
manifest.getSectionNames()
e.nextElement()
e.nextElement()
manifest.getSection("Test1")
section.getAttributeKeys()
e.nextElement()
e.nextElement()
section.getAttribute(attr1Key)
section.getAttribute(attr1Key).getName()
section.getAttribute(attr2Key)
section.getAttribute(attr2Key).getName()
buildRule.executeTarget("testOrder2")
getManifest(expandedManifest)
manifest.getSectionNames()
e.nextElement()
e.nextElement()
manifest.getSection("Test1")
section.getAttributeKeys()
e.nextElement()
e.nextElement()
section.getAttribute(attr1Key)
section.getAttribute(attr1Key).getName()
section.getAttribute(attr2Key)
section.getAttribute(attr2Key).getName()
buildRule.executeTarget("testNoFile")
buildRule.executeTarget("testReplace")
getManifest(newFile(outDir,"mftest.mf"))
Manifest.getDefaultManifest()
buildRule.executeTarget("testUpdate")
getManifest(newFile(outDir,"mftest.mf"))
Manifest.getDefaultManifest()
mf.toString()
startsWith("Manifest-Version: 2.0")
containsString("Foo: Bar")
getManifest(newFile(outDir,"mftest2.mf"))
mf.toString()
containsString("Foo: Baz")
not(containsString("Foo: Bar"))
containsString("Foo: Bar")
buildRule.executeTarget("testFrom")
buildRule.getLog()
containsString(Manifest.ERROR_FROM_FORBIDDEN)
buildRule.executeTarget("testIllegalName")
buildRule.executeTarget("testIllegalNameInSection")
buildRule.executeTarget("testIllegalNameInSection")
buildRule.executeTarget("testIllegalName")
buildRule.executeTarget("testIllegalName")
buildRule.configureProject("src/etc/testcases/taskdefs/mkdir.xml")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.getProject()
buildRule.getProject().getProperty("output")
f.exists()
f.isDirectory()
f.delete()
buildRule.configureProject("src/etc/testcases/taskdefs/move.xml")
buildRule.executeTarget("setUp")
buildRule.executeTarget("testFilterSet")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.getProject()
buildRule.getProject().getBaseDir()
tmp.exists()
FileUtilities.getFileContents(check)
FileUtilities.getFileContents(tmp)
buildRule.executeTarget("testFilterChain")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.getProject()
buildRule.getProject().getBaseDir()
tmp.exists()
FileUtilities.getFileContents(check)
FileUtilities.getFileContents(tmp)
buildRule.executeTarget("testDirectoryRemoval")
buildRule.getProject()
buildRule.getProject().getProperty("output")
newFile(output,"E/B/1").exists()
newFile(output,"E/C/2").exists()
newFile(output,"E/D/3").exists()
newFile(output,"A/B/1").exists()
newFile(output,"A/C/2").exists()
newFile(output,"A/D/3").exists()
newFile(output,"A/C").exists()
newFile(output,"A/D").exists()
buildRule.executeTarget("testDirectoryRetaining")
buildRule.getProject()
buildRule.getProject().getProperty("output")
newFile(output,"E").exists()
newFile(output,"E/1").exists()
newFile(output,"A/1").exists()
newFile(output,"A").exists()
testCompleteDirectoryMove("testCompleteDirectoryMove")
testCompleteDirectoryMove("testCompleteDirectoryMove2")
testCompleteDirectoryMove("testCompleteDirectoryMove")
buildRule.executeTarget("testPathElementMove")
buildRule.getProject()
buildRule.getProject().getProperty("output")
newFile(output,"E").exists()
newFile(output,"E/1").exists()
newFile(output,"A/1").exists()
newFile(output,"A").exists()
buildRule.executeTarget("testMoveFileAndFileset")
buildRule.executeTarget("testCompleteDirectoryMoveToExistingDir")
buildRule.executeTarget("testCompleteDirectoryMoveFileToFile")
buildRule.executeTarget("testCompleteDirectoryMoveFileToDir")
buildRule.executeTarget("testCompleteDirectoryMoveFileAndFileset")
buildRule.executeTarget("testCompleteDirectoryMoveFileToExistingFile")
buildRule.executeTarget("testCompleteDirectoryMoveFileToExistingDir")
buildRule.executeTarget("testCompleteDirectoryMoveFileToDirWithExistingFile")
buildRule.executeTarget("testCompleteDirectoryMoveFileToDirWithExistingDir")
buildRule.configureProject("src/etc/testcases/taskdefs/multimap.xml")
buildRule.executeTarget("multicopy")
buildRule.executeTarget("multimove")
buildRule.executeTarget("singlecopy")
buildRule.executeTarget("singlemove")
buildRule.executeTarget("copywithempty")
buildRule.executeTarget("movewithempty")
buildRule.configureProject("src/etc/testcases/taskdefs/nice.xml")
buildRule.executeTarget("noop")
buildRule.executeTarget("current")
buildRule.executeTarget("faster")
buildRule.executeTarget("slower")
thrown.expect(BuildException.class)
thrown.expectMessage("out of the range 1-10")
buildRule.executeTarget("too_slow")
thrown.expect(BuildException.class)
thrown.expectMessage("out of the range 1-10")
buildRule.executeTarget("too_fast")
buildRule.configureProject("src/etc/testcases/taskdefs/parallel.xml")
buildRule.getProject()
p.setUserProperty("test.direct",DIRECT_MESSAGE)
p.setUserProperty("test.delayed",DELAYED_MESSAGE)
buildRule.executeTarget("testBasic")
buildRule.getOutput()
buildRule.getError()
buildRule.getLog()
p.setUserProperty("test.direct",DIRECT_MESSAGE)
p.setUserProperty("test.delayed",DELAYED_MESSAGE)
buildRule.executeTarget("testThreadCount")
buildRule.getOutput()
buildRule.getError()
buildRule.getLog()
countThreads(log,pos)
s.indexOf('|',start)
s.indexOf('/',firstPipe)
s.indexOf('|',beginSlash)
Integer.parseInt(s.substring(firstPipe+1,beginSlash))
s.substring(firstPipe+1,beginSlash)
s.charAt(pos)
s.charAt(pos)
s.charAt(pos)
s.charAt(pos++)
thrown.expect(BuildException.class)
thrown.expectMessage(FAILURE_MESSAGE)
p.setUserProperty("test.failure",FAILURE_MESSAGE)
p.setUserProperty("test.delayed",DELAYED_MESSAGE)
buildRule.executeTarget("testFail")
p.addTaskDefinition("demuxtest",DemuxOutputTask.class)
System.setOut(newPrintStream(newDemuxOutputStream(p,false)))
System.setErr(newPrintStream(newDemuxOutputStream(p,true)))
p.executeTarget("testDemux")
System.setOut(out)
System.setErr(err)
thrown.expect(ExitStatusException.class)
thrown.expect(hasProperty("status",equalTo(42)))
hasProperty("status",equalTo(42))
equalTo(42)
buildRule.executeTarget("testSingleExit")
thrown.expect(ExitStatusException.class)
thrown.expect(hasProperty("status",equalTo(42)))
hasProperty("status",equalTo(42))
equalTo(42)
buildRule.executeTarget("testExitAndOtherException")
buildRule.configureProject("src/etc/testcases/taskdefs/"+BUILD_FILENAME)
test("testmap")
test("testmapper")
buildRule.executeTarget("testnotargetos")
buildRule.executeTarget("test-nonmatching-mapper")
buildRule.executeTarget(target)
buildRule.getProject()
buildRule.getProject().getProperty("result")
buildRule.configureProject("src/etc/testcases/taskdefs/presetdef.xml")
buildRule.executeTarget("simple")
buildRule.getLog()
buildRule.executeTarget("text")
buildRule.getLog()
buildRule.executeTarget("uri")
buildRule.getLog()
buildRule.executeTarget("defaulttest")
buildRule.getLog()
buildRule.executeTarget("doubledefault")
buildRule.getLog()
buildRule.executeTarget("text.optional")
buildRule.getLog()
buildRule.executeTarget("element.order")
buildRule.getLog()
buildRule.executeTarget("element.order2")
buildRule.getLog()
buildRule.executeTarget("antTypeTest")
buildRule.getLog()
thrown.expect(BuildException.class)
thrown.expectMessage("javac doesn't support the")
buildRule.executeTarget("correct_taskname_badattr")
thrown.expect(BuildException.class)
thrown.expectMessage("javac doesn't support the")
buildRule.executeTarget("correct_taskname_badel")
buildRule.executeTarget("presetdef-with-nested-element-twice")
buildRule.executeTarget("presetdef-with-nested-element-twice")
getProject()
getProject().log("attribute is "+attribute)
Runtime.getRuntime()
Runtime.getRuntime().exec("java -cp "+System.getProperty("java.class.path")+" "+getClass().getName())
System.getProperty("java.class.path")
getClass()
getClass().getName()
processDestroyer.isAddedAsShutdownHook()
processDestroyer.add(process)
processDestroyer.isAddedAsShutdownHook()
process.destroy()
processDestroyer.remove(process)
processDestroyer.isAddedAsShutdownHook()
newProcessDestroyerTest().testProcessDestroyer()
Thread.sleep(60000)
buildRule.configureProject("src/etc/testcases/taskdefs/property.xml")
buildRule.executeTarget("setUp")
buildRule.executeTarget("test1")
buildRule.getOutput()
buildRule.getError()
buildRule.executeTarget("test2")
buildRule.getLog()
containsString("testprop1=aa, testprop3=xxyy, testprop4=aazz")
thrown.expect(BuildException.class)
thrown.expectMessage("was circularly defined")
buildRule.executeTarget("test3")
buildRule.executeTarget("test4")
buildRule.getLog()
containsString("http.url is http://localhost:999")
buildRule.getProject()
buildRule.getProject().getProperty(MagicNames.PROJECT_BASEDIR)
FileUtils.getFileUtils()
FileUtils.getFileUtils().toURI(baseDir+"/property3.properties")
buildRule.getProject()
buildRule.getProject().setNewProperty("test5.url",uri)
buildRule.executeTarget("test5")
buildRule.getLog()
containsString("http.url is http://localhost:999")
buildRule.executeTarget("prefix.success")
buildRule.getProject()
buildRule.getProject().getProperty("server1.http.port")
thrown.expect(BuildException.class)
thrown.expectMessage("Prefix is only valid")
buildRule.executeTarget("prefix.fail")
thrown.expect(BuildException.class)
thrown.expectMessage("was circularly defined")
buildRule.executeTarget("testCircularReference")
buildRule.executeTarget("thisIsNotACircularReference")
buildRule.getLog()
containsString("b is A/A/A")
Class.forName("java.lang.Iterable")
assumeNoException("XML Loading only on Java 5+",e)
buildRule.executeTarget("testXmlProperty")
buildRule.getProject()
buildRule.getProject().getProperty("xml.one")
buildRule.getProject()
buildRule.getProject().getProperty("xml.two")
buildRule.executeTarget("testRuntime")
Runtime.getRuntime()
Runtime.getRuntime().availableProcessors()
Integer.parseInt(buildRule.getProject().getProperty("testruntime.availableProcessors"))
buildRule.getProject()
buildRule.getProject().getProperty("testruntime.availableProcessors")
Runtime.getRuntime()
Runtime.getRuntime().maxMemory()
Long.parseLong(buildRule.getProject().getProperty("testruntime.maxMemory"))
buildRule.getProject()
buildRule.getProject().getProperty("testruntime.maxMemory")
buildRule.getProject()
buildRule.getProject().getProperty("testruntime.freeMemory")
buildRule.getProject()
buildRule.getProject().getProperty("testruntime.totalMemory")
buildRule.configureProject("src/etc/testcases/taskdefs/jar.xml")
buildRule.executeTarget("setUp")
buildRule.executeTarget("testIndexTests")
buildRule.getProject()
buildRule.getProject().getProperty(tempJar)
Jar.grabFilesAndDirs(archive,dirs,files)
dirs.size()
Arrays.stream(expectedDirs)
hasItem(expectedDir)
files.size()
Arrays.stream(expectedFiles)
hasItem(expectedFile)
Jar.findJarName("foo",null)
Jar.findJarName("lib"+File.separatorChar+"foo",null)
Jar.findJarName("foo",newString[]{"bar"})
Jar.findJarName("foo",newString[]{"foo"})
Jar.findJarName("foo",newString[]{"lib/foo"})
Jar.findJarName("bar"+File.separatorChar+"foo",newString[]{"foo"})
Jar.findJarName("bar"+File.separatorChar+"foo",newString[]{"lib/foo"})
Jar.findJarName("lib/foo",newString[]{"foo","lib/foo","lib/bar/foo"})
buildRule.configureProject("src/etc/testcases/taskdefs/recorder.xml")
buildRule.executeTarget("setUp")
buildRule.executeTarget("noappend")
FILE_UTILS.contentEquals(buildRule.getProject().resolveFile(REC_IN+"rectest1.result"),newFile(buildRule.getOutputDir(),"rectest1.log"),true)
buildRule.getProject()
buildRule.getProject().resolveFile(REC_IN+"rectest1.result")
buildRule.getOutputDir()
buildRule.executeTarget("append")
FILE_UTILS.contentEquals(buildRule.getProject().resolveFile(REC_IN+"rectest2.result"),newFile(buildRule.getOutputDir(),"rectest2.log"),true)
buildRule.getProject()
buildRule.getProject().resolveFile(REC_IN+"rectest2.result")
buildRule.getOutputDir()
buildRule.executeTarget("restart")
FILE_UTILS.contentEquals(buildRule.getProject().resolveFile(REC_IN+"rectest3.result"),newFile(buildRule.getOutputDir(),"rectest3.log"),true)
buildRule.getProject()
buildRule.getProject().resolveFile(REC_IN+"rectest3.result")
buildRule.getOutputDir()
buildRule.executeTarget("deleterestart")
FILE_UTILS.contentEquals(buildRule.getProject().resolveFile(REC_IN+"rectest4.result"),newFile(buildRule.getOutputDir(),"rectest4.log"),true)
buildRule.getProject()
buildRule.getProject().resolveFile(REC_IN+"rectest4.result")
buildRule.getOutputDir()
buildRule.executeTarget("subbuild")
FILE_UTILS.contentEquals(buildRule.getProject().resolveFile(REC_IN+"rectest5.result"),newFile(buildRule.getOutputDir(),"rectest5.log"),true)
buildRule.getProject()
buildRule.getProject().resolveFile(REC_IN+"rectest5.result")
buildRule.getOutputDir()
FILE_UTILS.contentEquals(buildRule.getProject().resolveFile(REC_IN+"rectest6.result"),newFile(buildRule.getOutputDir(),"rectest6.log"),true)
buildRule.getProject()
buildRule.getProject().resolveFile(REC_IN+"rectest6.result")
buildRule.getOutputDir()
buildRule.configureProject("src/etc/testcases/taskdefs/rename.xml")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.executeTarget("test4")
buildRule.executeTarget("test5")
buildRule.executeTarget("test6")
buildRule.configureProject("src/etc/testcases/taskdefs/replace.xml")
buildRule.executeTarget("setUp")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.executeTarget("test4")
buildRule.executeTarget("test5")
buildRule.executeTarget("test6")
buildRule.executeTarget("test7")
buildRule.executeTarget("test8")
buildRule.executeTarget("test9")
buildRule.getOutputDir()
buildRule.getOutputDir()
buildRule.executeTarget("lastModifiedSetup")
buildRule.getOutputDir()
assumeTrue("Could not change file modification time",testFile.setLastModified(testFile.lastModified()-FileUtils.getFileUtils().getFileTimestampGranularity()*5))
testFile.setLastModified(testFile.lastModified()-FileUtils.getFileUtils().getFileTimestampGranularity()*5)
testFile.lastModified()
FileUtils.getFileUtils()
FileUtils.getFileUtils().getFileTimestampGranularity()
testFile.lastModified()
buildRule.executeTarget("testNoPreserve")
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"test.txt").lastModified()
buildRule.executeTarget("lastModifiedSetup")
buildRule.getOutputDir()
assumeTrue("Could not change file modification time",testFile.setLastModified(testFile.lastModified()-FileUtils.getFileUtils().getFileTimestampGranularity()*5))
testFile.setLastModified(testFile.lastModified()-FileUtils.getFileUtils().getFileTimestampGranularity()*5)
testFile.lastModified()
FileUtils.getFileUtils()
FileUtils.getFileUtils().getFileTimestampGranularity()
testFile.lastModified()
buildRule.executeTarget("testPreserve")
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"test.txt").lastModified()
result.exists()
Files.newInputStream(expect.toPath())
expect.toPath()
Files.newInputStream(result.toPath())
result.toPath()
inExpect.read()
inResult.read()
inExpect.read()
inResult.read()
buildRule.configureProject("src/etc/testcases/taskdefs/rmic/rmic.xml")
buildRule.executeTarget("testDefault")
buildRule.executeTarget("testDefaultDest")
buildRule.executeTarget("testEmpty")
buildRule.executeTarget("testEmptyDest")
buildRule.executeTarget("testRmic")
buildRule.executeTarget("testRmicDest")
buildRule.executeTarget("testRmicJArg")
buildRule.executeTarget("testRmicJArgDest")
buildRule.executeTarget("testKaffe")
buildRule.executeTarget("testKaffeDest")
buildRule.executeTarget("testWlrmic")
buildRule.executeTarget("testWlrmicJArg")
buildRule.executeTarget("testForking")
buildRule.executeTarget("testForkingAntClasspath")
buildRule.executeTarget("testForkingAntClasspathDest")
buildRule.executeTarget("testAntClasspath")
buildRule.executeTarget("testAntClasspathDest")
thrown.expect(BuildException.class)
thrown.expectMessage(RmicAdapterFactory.ERROR_UNKNOWN_COMPILER)
buildRule.executeTarget("testBadName")
buildRule.executeTarget("testExplicitClass")
thrown.expect(BuildException.class)
thrown.expectMessage(RmicAdapterFactory.ERROR_NOT_RMIC_ADAPTER)
buildRule.executeTarget("testWrongClass")
thrown.expect(BuildException.class)
thrown.expectMessage(Rmic.ERROR_RMIC_FAILED)
buildRule.executeTarget("testDefaultBadClass")
buildRule.getLog()
containsString("unimplemented.class")
thrown.expect(BuildException.class)
thrown.expectMessage(RmicAdapterFactory.ERROR_UNKNOWN_COMPILER)
buildRule.executeTarget("testMagicProperty")
thrown.expect(BuildException.class)
thrown.expectMessage(RmicAdapterFactory.ERROR_UNKNOWN_COMPILER)
buildRule.executeTarget("testMagicPropertyOverridesEmptyString")
buildRule.executeTarget("testMagicPropertyIsEmptyString")
thrown.expect(BuildException.class)
thrown.expectMessage(Rmic.ERROR_RMIC_FAILED)
buildRule.executeTarget("testFailingAdapter")
buildRule.executeTarget("testVersion11")
buildRule.executeTarget("testVersion11Dest")
buildRule.executeTarget("testVersion12")
buildRule.executeTarget("testVersion12Dest")
buildRule.executeTarget("testVersionCompat")
buildRule.executeTarget("testVersionCompatDest")
assumeFalse("Current system is Java 9 or newer",JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9))
JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
buildRule.executeTarget("testXnewForked")
assumeTrue("Current system is Java 8 or older",JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9))
JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
thrown.expect(BuildException.class)
thrown.expectMessage("JDK9 has removed support for -Xnew")
buildRule.executeTarget("testXnewForked")
assumeFalse("Current system is Java 9 or newer",JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9))
JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
buildRule.executeTarget("testXnewForkedDest")
assumeTrue("Current system is Java 8 or older",JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9))
JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
thrown.expect(BuildException.class)
thrown.expectMessage("JDK9 has removed support for -Xnew")
buildRule.executeTarget("testXnewForkedDest")
assumeFalse("Current system is Java 9 or newer",JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9))
JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
buildRule.executeTarget("testXnewCompiler")
assumeTrue("Current system is Java 8 or older",JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9))
JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
thrown.expect(BuildException.class)
thrown.expectMessage("JDK9 has removed support for -Xnew")
buildRule.executeTarget("testXnewCompiler")
assumeFalse("Current system is Java 9 or newer",JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9))
JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
buildRule.executeTarget("testXnewCompilerDest")
assumeTrue("Current system is Java 8 or older",JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9))
JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
thrown.expect(BuildException.class)
thrown.expectMessage("JDK9 has removed support for -Xnew")
buildRule.executeTarget("testXnewCompilerDest")
assumeFalse("Current system is Java 11 or newer",JavaEnvUtils.isAtLeastJavaVersion("11"))
JavaEnvUtils.isAtLeastJavaVersion("11")
buildRule.executeTarget("testIDL")
assumeTrue("Current system is Java 10 or older",JavaEnvUtils.isAtLeastJavaVersion("11"))
JavaEnvUtils.isAtLeastJavaVersion("11")
thrown.expect(BuildException.class)
thrown.expectMessage("this rmic implementation doesn't support the -idl switch")
buildRule.executeTarget("testIDL")
assumeFalse("Current system is Java 11 or newer",JavaEnvUtils.isAtLeastJavaVersion("11"))
JavaEnvUtils.isAtLeastJavaVersion("11")
buildRule.executeTarget("testIDLDest")
assumeTrue("Current system is Java 10 or older",JavaEnvUtils.isAtLeastJavaVersion("11"))
JavaEnvUtils.isAtLeastJavaVersion("11")
thrown.expect(BuildException.class)
thrown.expectMessage("this rmic implementation doesn't support the -idl switch")
buildRule.executeTarget("testIDL")
assumeFalse("Current system is Java 11 or newer",JavaEnvUtils.isAtLeastJavaVersion("11"))
JavaEnvUtils.isAtLeastJavaVersion("11")
buildRule.executeTarget("testIIOP")
assumeTrue("Current system is Java 10 or older",JavaEnvUtils.isAtLeastJavaVersion("11"))
JavaEnvUtils.isAtLeastJavaVersion("11")
thrown.expect(BuildException.class)
thrown.expectMessage("this rmic implementation doesn't support the -iiop switch")
buildRule.executeTarget("testIIOP")
assumeFalse("Current system is Java 11 or newer",JavaEnvUtils.isAtLeastJavaVersion("11"))
JavaEnvUtils.isAtLeastJavaVersion("11")
buildRule.executeTarget("testIIOPDest")
assumeTrue("Current system is Java 10 or older",JavaEnvUtils.isAtLeastJavaVersion("11"))
JavaEnvUtils.isAtLeastJavaVersion("11")
thrown.expect(BuildException.class)
thrown.expectMessage("this rmic implementation doesn't support the -iiop switch")
buildRule.executeTarget("testIIOP")
getRmic()
getRmic().log(LOG_MESSAGE)
project.init()
rmic.setProject(project)
rmic.getCurrentCompilerArgs()
rmic.createCompilerArg()
arg.setValue(testArg)
rmic.getCurrentCompilerArgs()
arg.setCompiler("weblogic")
rmic.getCurrentCompilerArgs()
project.setProperty("build.rmic","sun")
rmic.getCurrentCompilerArgs()
project.setProperty("build.rmic","weblogic")
rmic.getCurrentCompilerArgs()
rmic.getCompiler()
project.setNewProperty("build.rmic","weblogic")
rmic.getCompiler()
rmic.setCompiler("kaffe")
rmic.getCompiler()
buildRule.configureProject("src/etc/testcases/taskdefs/signjar.xml")
Boolean.getBoolean("offline")
buildRule.executeTarget("sigfile")
sj.setAlias("testonly")
sj.setKeystore("testkeystore")
sj.setStorepass("apacheant")
sj.setJar(newFile(buildRule.getProject().getProperty("test.jar")))
buildRule.getProject()
buildRule.getProject().getProperty("test.jar")
sj.isSigned()
sj.setSigfile("TEST")
sj.isSigned()
buildRule.executeTarget("invalidchars")
sj.setAlias("test@nly")
sj.setKeystore("testkeystore")
sj.setStorepass("apacheant")
sj.setJar(newFile(buildRule.getProject().getProperty("test.jar")))
buildRule.getProject()
buildRule.getProject().getProperty("test.jar")
sj.isSigned()
isSigned(jar)
buildRule.executeTarget("urlKeystoreFile")
assumeFalse("Test is set offline",isOffline())
isOffline()
buildRule.executeTarget("urlKeystoreHTTP")
thrown.expect(BuildException.class)
thrown.expectMessage("jarsigner returned: 1")
buildRule.executeTarget("testTsaLocalhost")
buildRule.executeTarget("jar")
buildRule.getProject()
buildRule.getProject().getProperty("test.jar")
testJar.getParentFile()
testJarParent.getName()
testJar.getName()
testJar.getCanonicalPath()
f.getCanonicalPath()
s.setProject(buildRule.getProject())
buildRule.getProject()
s.setJar(f)
s.setAlias("testonly")
s.setStorepass("apacheant")
s.setKeystore("testkeystore")
s.execute()
buildRule.configureProject("src/etc/testcases/taskdefs/sleep.xml")
buildRule.executeTarget("test1")
timer.stop()
timer.time()
buildRule.executeTarget("test2")
timer.stop()
timer.time()
buildRule.executeTarget("test3")
timer.stop()
timer.time()
buildRule.executeTarget("test3")
timer.stop()
timer.time()
timer.time()
buildRule.executeTarget("test5")
buildRule.executeTarget("test6")
timer.stop()
timer.time()
start()
System.currentTimeMillis()
System.currentTimeMillis()
JDBCTask.getLoaderMap()
JDBCTask.getLoaderMap().clear()
thrown.expect(BuildException.class)
thrown.expectMessage("No suitable Driver")
createTask(getProperties(NULL))
getProperties(NULL)
SQLExec.getLoaderMap()
not(hasKey(NULL_DRIVER))
hasKey(NULL_DRIVER)
sql.execute()
SQLExec.getLoaderMap()
hasKey(NULL_DRIVER)
sql.getLoader()
JDBCTask.getLoaderMap()
JDBCTask.getLoaderMap().get(NULL_DRIVER)
sql.getLoader()
createTask(getProperties(NULL))
getProperties(NULL)
JDBCTask.getLoaderMap()
hasKey(NULL_DRIVER)
sql.execute()
JDBCTask.getLoaderMap()
hasKey(NULL_DRIVER)
sql.getLoader()
JDBCTask.getLoaderMap()
JDBCTask.getLoaderMap().get(NULL_DRIVER)
sql.getLoader()
doMultipleCalls(1000,NULL,true,true)
doMultipleCalls(1000,ORACLE,true,false)
doMultipleCalls(1000,MYSQL,true,false)
getProperties(database)
createTask(props)
sql.setCaching(caching)
sql.execute()
sql.setProject(newProject())
sql.setDriver(props.getProperty(DRIVER))
props.getProperty(DRIVER)
sql.setUserid(props.getProperty(USER))
props.getProperty(USER)
sql.setPassword(props.getProperty(PASSWORD))
props.getProperty(PASSWORD)
sql.setUrl(props.getProperty(URL))
props.getProperty(URL)
sql.createClasspath()
sql.createClasspath().setLocation(newFile(props.getProperty(PATH)))
props.getProperty(PATH)
sql.addText(props.getProperty(SQL))
props.getProperty(SQL)
resource.replace('.','/')
getClass()
getClass().getClassLoader()
getClass().getClassLoader().getResource(resource)
url.toString()
u.startsWith("jar:file:")
u.indexOf("!")
u.substring("jar:file:".length(),pling)
"jar:file:".length()
u.startsWith("file:")
u.indexOf(resource)
u.substring("file:".length(),tail)
"file:".length()
getProperties("oracle.jdbc.driver.OracleDriver","test","test","jdbc:oracle:thin:@127.0.0.1:1521:orcl")
getProperties("org.gjt.mm.mysql.Driver","test","test","jdbc:mysql://127.0.0.1:3306/test")
getProperties(NULL_DRIVER,"test","test","jdbc:database://hostname:port/name")
findResourcePath(props.getProperty(DRIVER))
props.getProperty(DRIVER)
props.put(PATH,path)
props.put(SQL,"create table OOME_TEST(X INTEGER NOT NULL);\ndrop table if exists OOME_TEST;")
getProperties("oracle.jdbc.driver.OracleDriver","test","test","jdbc:oracle:thin:@127.0.0.1:1521:orcl")
getProperties("org.gjt.mm.mysql.Driver","test","test","jdbc:mysql://127.0.0.1:3306/test")
getProperties(NULL_DRIVER,"test","test","jdbc:database://hostname:port/name")
findResourcePath(props.getProperty(DRIVER))
props.getProperty(DRIVER)
props.put(PATH,path)
props.put(SQL,"create table OOME_TEST(X INTEGER NOT NULL);\ndrop table if exists OOME_TEST;")
Logger.getAnonymousLogger()
s.lastDelimiterPosition(newStringBuffer(),null)
s.lastDelimiterPosition(newStringBuffer("GO"),null)
s.lastDelimiterPosition(newStringBuffer("; "),null)
s.lastDelimiterPosition(newStringBuffer("ab;"),null)
s.setDelimiter("GO")
s.lastDelimiterPosition(newStringBuffer("GO "),null)
s.lastDelimiterPosition(newStringBuffer("go"),null)
s.lastDelimiterPosition(newStringBuffer("GO"),null)
s.setStrictDelimiterMatching(false)
s.lastDelimiterPosition(newStringBuffer(),null)
s.lastDelimiterPosition(newStringBuffer("GO"),null)
s.lastDelimiterPosition(newStringBuffer("; "),null)
s.lastDelimiterPosition(newStringBuffer("ab;"),null)
s.setDelimiter("GO")
s.lastDelimiterPosition(newStringBuffer("GO "),null)
s.lastDelimiterPosition(newStringBuffer("go"),null)
s.lastDelimiterPosition(newStringBuffer("GO"),null)
t.setValue("row")
s.setDelimiterType(t)
s.lastDelimiterPosition(null,"")
s.lastDelimiterPosition(null,"GO")
s.lastDelimiterPosition(null,"; ")
s.lastDelimiterPosition(newStringBuffer("ab"),";")
s.setDelimiter("GO")
s.lastDelimiterPosition(null,"GO ")
s.lastDelimiterPosition(null,"go")
s.lastDelimiterPosition(newStringBuffer("ab"),"GO")
t.setValue("row")
s.setDelimiterType(t)
s.setStrictDelimiterMatching(false)
s.lastDelimiterPosition(null,"")
s.lastDelimiterPosition(null,"GO")
s.lastDelimiterPosition(newStringBuffer("; "),"; ")
s.lastDelimiterPosition(newStringBuffer("ab"),";")
s.setDelimiter("GO")
s.lastDelimiterPosition(newStringBuffer("abcd"),"GO ")
s.lastDelimiterPosition(newStringBuffer("go"),"go")
s.lastDelimiterPosition(newStringBuffer("ab"),"GO")
buildRule.configureProject("src/etc/testcases/taskdefs/style/build.xml")
thrown.expect(BuildException.class)
thrown.expectMessage("specify the stylesheet either as a filename in style attribute or "+"as a nested resource")
buildRule.executeTarget("testStyleIsSet")
expectFileContains("testTransferParameterSet",buildRule.getOutputDir().getAbsoluteFile()+"/out.xml","set='myvalue'")
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
expectFileContains("testTransferParameterEmpty",buildRule.getOutputDir().getAbsoluteFile()+"/out.xml","empty=''")
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
expectFileContains("testTransferParameterUnset",buildRule.getOutputDir().getAbsoluteFile()+"/out.xml","undefined='${value}'")
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
expectFileContains("testTransferParameterUnsetWithIf",buildRule.getOutputDir().getAbsoluteFile()+"/out.xml","undefined='undefined default value'")
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
expectFileContains("testNewerStylesheet",buildRule.getOutputDir().getAbsoluteFile()+"/out.xml","new-value")
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
testDefaultMapper("testDefaultMapper")
testDefaultMapper("testExplicitFileset")
testDefaultMapper("testDefaultMapper")
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
newFile(buildRule.getOutputDir().getAbsoluteFile(),"out.xml").exists()
expectFileContains("testCustomMapper",buildRule.getOutputDir().getAbsoluteFile()+"/out.xml","set='myvalue'")
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
newFile(buildRule.getOutputDir().getAbsoluteFile(),"out.xml").exists()
expectFileContains("testTypedMapper",buildRule.getOutputDir().getAbsoluteFile()+"/out.xml","set='myvalue'")
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
buildRule.executeTarget("testDirectoryHierarchyWithDirMatching")
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
newFile(buildRule.getOutputDir().getAbsoluteFile(),"dest/level1/data.html").exists()
buildRule.executeTarget("testDirsWithSpaces")
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
newFile(buildRule.getOutputDir().getAbsoluteFile(),"d est/data.html").exists()
thrown.expect(BuildException.class)
thrown.expectMessage("specify the stylesheet either as a filename in style attribute or "+"as a nested resource but not as both")
buildRule.executeTarget("testWithStyleAttrAndResource")
expectFileContains("testWithFileResource",buildRule.getOutputDir().getAbsoluteFile()+"/out.xml","set='value'")
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
expectFileContains("testWithUrlResource",buildRule.getOutputDir().getAbsoluteFile()+"/out.xml","set='value'")
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
buildRule.executeTarget("testFilenameAsParam")
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
buildRule.executeTarget("testFilenameAsParamNoSetting")
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
buildRule.executeTarget("testFilenameAndFiledirAsParam")
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
buildRule.getOutputDir()
buildRule.getOutputDir().getAbsoluteFile()
FileUtilities.getFileContents(newFile(filename))
buildRule.executeTarget(target)
getFileString(filename)
containsString(contains)
buildRule.configureProject("src/etc/testcases/taskdefs/subant.xml")
buildRule.executeTarget("testnodirs")
buildRule.getLog()
buildRule.getProject()
buildRule.getProject().resolveFile(".")
buildRule.getProject()
buildRule.getProject().resolveFile("subant/subant-test1")
buildRule.getProject()
buildRule.getProject().resolveFile("subant/subant-test2")
testBaseDirs("testgenericantfile",newString[]{dir1.getAbsolutePath(),dir2.getAbsolutePath(),dir3.getAbsolutePath()})
dir1.getAbsolutePath()
dir2.getAbsolutePath()
dir3.getAbsolutePath()
buildRule.getProject()
buildRule.getProject().resolveFile(".")
buildRule.getProject()
buildRule.getProject().resolveFile("subant/subant-test1")
buildRule.getProject()
buildRule.getProject().resolveFile("subant")
testBaseDirs("testantfile",newString[]{dir1.getAbsolutePath(),dir2.getAbsolutePath(),dir3.getAbsolutePath()})
dir1.getAbsolutePath()
dir2.getAbsolutePath()
dir3.getAbsolutePath()
buildRule.executeTarget("multipleTargets")
buildRule.getLog()
containsString("test1-one")
buildRule.getLog()
containsString("test1-two")
buildRule.getLog()
containsString("test2-one")
buildRule.getLog()
containsString("test2-two")
buildRule.executeTarget("multipleTargetsOneDoesntExist_FOEfalse")
buildRule.getLog()
containsString("Target \"three\" does not exist in the project \"subant\"")
thrown.expect(BuildException.class)
thrown.expectMessage("Target \"three\" does not exist in the project \"subant\"")
buildRule.executeTarget("multipleTargetsOneDoesntExist_FOEtrue")
buildRule.getProject()
buildRule.getProject().addBuildListener(bc)
buildRule.executeTarget(target)
bc.getError()
buildRule.getProject()
buildRule.getProject().removeBuildListener(bc)
event.getTarget()
event.getTarget().getName()
event.getTarget().getName().isEmpty()
event.getProject()
event.getProject().getBaseDir()
event.getProject().getBaseDir().getAbsolutePath()
buildRule.configureProject("src/etc/testcases/taskdefs/sync.xml")
buildRule.executeTarget("simplecopy")
buildRule.getProject()
buildRule.getProject().getProperty("dest")
buildRule.getFullLog()
not(containsString("dangling"))
containsString("dangling")
buildRule.executeTarget("emptycopy")
buildRule.getProject()
buildRule.getProject().getProperty("dest")
buildRule.getProject()
buildRule.getProject().getProperty("dest")
buildRule.getFullLog()
not(containsString("dangling"))
containsString("dangling")
buildRule.executeTarget("emptydircopy")
buildRule.getProject()
buildRule.getProject().getProperty("dest")
buildRule.getProject()
buildRule.getProject().getProperty("dest")
buildRule.getFullLog()
not(containsString("dangling"))
containsString("dangling")
testCopyAndRemove("copyandremove")
testCopyAndRemove("copyandremove-with-filelist")
testCopyAndRemove("copyandremove-with-zipfileset")
testCopyAndRemove("copyandremove")
buildRule.executeTarget("copyandremove-emptypreserve")
buildRule.getProject()
buildRule.getProject().getProperty("dest")
buildRule.getProject()
buildRule.getProject().getProperty("dest")
buildRule.getFullLog()
containsString(("Removing orphan file:"))
buildRule.getFullLog()
containsString("Removed 1 dangling file from")
buildRule.getFullLog()
containsString("Removed 1 dangling directory from")
buildRule.executeTarget("emptydircopyandremove")
buildRule.getProject()
buildRule.getProject().getProperty("dest")
buildRule.getProject()
buildRule.getProject().getProperty("dest")
buildRule.getProject()
buildRule.getProject().getProperty("dest")
buildRule.getFullLog()
containsString(("Removing orphan directory:"))
buildRule.getFullLog()
containsString("NO dangling file to remove from")
buildRule.getFullLog()
containsString("Removed 2 dangling directories from")
buildRule.executeTarget("copynoremove")
buildRule.getProject()
buildRule.getProject().getProperty("dest")
buildRule.getProject()
buildRule.getProject().getProperty("dest")
buildRule.getFullLog()
not(containsString("Removing orphan file:"))
containsString("Removing orphan file:")
buildRule.executeTarget("copynoremove-selectors")
buildRule.getProject()
buildRule.getProject().getProperty("dest")
buildRule.getProject()
buildRule.getProject().getProperty("dest")
buildRule.getFullLog()
not(containsString("Removing orphan file:"))
containsString("Removing orphan file:")
buildRule.executeTarget("casesensitivity-test")
buildRule.getProject()
buildRule.getProject().getProperty("dest")
FileUtils.isCaseSensitiveFileSystem(buildRule.getProject().resolveFile(destDir).toPath())
buildRule.getProject()
buildRule.getProject().resolveFile(destDir)
buildRule.getProject().resolveFile(destDir).toPath()
FileUtils.isCaseSensitiveFileSystem(buildRule.getProject().resolveFile(destDir).toPath()).orElse(true)
buildRule.getProject()
buildRule.getProject().resolveFile(f)
buildRule.getProject().resolveFile(f).exists()
buildRule.getProject()
buildRule.getProject().resolveFile(f)
buildRule.getProject().resolveFile(f).exists()
buildRule.configureProject("src/etc/testcases/taskdefs/tar.xml")
buildRule.executeTarget("setUp")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.executeTarget("test4")
buildRule.executeTarget("test5")
buildRule.getProject()
buildRule.getProject().getProperty("output")
f.exists()
buildRule.executeTarget("test6")
test7("test7")
test7("test7UsingPlainFileSet")
test7("test7UsingFileList")
test7("test7")
test8("test8")
test8("test8UsingZipFileset")
test8("test8UsingZipFilesetSrc")
test8("test8UsingTarFilesetSrc")
test8("test8UsingZipEntry")
test8("test8")
buildRule.executeTarget("test9")
buildRule.executeTarget("test10")
buildRule.getProject()
buildRule.getProject().getProperty("output")
f1.exists()
buildRule.executeTarget("test11")
buildRule.getProject()
buildRule.getProject().getProperty("output")
f1.exists()
buildRule.executeTarget("testGZipResource")
FileUtilities.getFileContents(buildRule.getProject().resolveFile("../asf-logo.gif"))
buildRule.getProject()
buildRule.getProject().resolveFile("../asf-logo.gif")
FileUtilities.getFileContents(newFile(buildRule.getProject().getProperty("output"),"untar/asf-logo.gif.gz"))
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.executeTarget("testTarFilesetWithReference")
buildRule.configureProject("src/etc/testcases/taskdefs/taskdef.xml")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.executeTarget("test4")
buildRule.executeTarget("test5")
buildRule.executeTarget("test5a")
buildRule.executeTarget("test6")
buildRule.getLog()
buildRule.executeTarget("test7")
buildRule.getLog()
buildRule.executeTarget("testGlobal")
buildRule.getLog()
buildRule.executeTarget("testOverride")
buildRule.getLog()
containsString("Trying to override old definition of task copy")
containsString("In target")
containsString("In TaskContainer")
buildRule.configureProject("src/etc/testcases/taskdefs/touch.xml")
buildRule.executeTarget("cleanup")
buildRule.getProject()
buildRule.getProject().getBaseDir()
file.exists()
file.lastModified()
buildRule.executeTarget("noSeconds")
getTargetTime()
buildRule.executeTarget("seconds")
getTargetTime()
touchFile("testMillis",662256000000L)
System.currentTimeMillis()
buildRule.executeTarget("testNow")
getTargetTime()
touchFile("test2000",946080000000L)
touchFile("testFilelist",662256000000L)
touchFile("testFileset",946080000000L)
touchFile("testResourceCollection",1662256000000L)
buildRule.executeTarget("testMappedFileset")
buildRule.executeTarget("testExplicitMappedFileset")
buildRule.executeTarget("testMappedFilelist")
buildRule.executeTarget("testGoodPattern")
thrown.expect(BuildException.class)
thrown.expectMessage("Unparseable")
buildRule.executeTarget("testBadPattern")
buildRule.executeTarget(targetName)
getTargetTime()
FILE_UTILS.getFileTimestampGranularity()
FILE_UTILS.getFileTimestampGranularity()
tstamp.setLocation(location)
tstamp.setProject(project)
tstamp.createFormat()
format.setProperty("today")
format.setPattern("HH:mm:ss z")
format.setTimezone("GMT")
Calendar.getInstance()
Calendar.getInstance().getTime()
format.execute(project,date,location)
project.getProperty("today")
sdf.setTimeZone(TimeZone.getTimeZone("GMT"))
TimeZone.getTimeZone("GMT")
sdf.format(date)
tstamp.createFormat()
format.setProperty("TODAY")
format.setPattern("HH:mm:ss z")
format.setTimezone("GMT")
Calendar.getInstance()
Calendar.getInstance().getTime()
format.execute(project,date,location)
project.getProperty("TODAY")
sdf.setTimeZone(TimeZone.getTimeZone("GMT"))
TimeZone.getTimeZone("GMT")
sdf.format(date)
tstamp.setPrefix("prefix")
tstamp.execute()
project.getProperty("prefix.DSTAMP")
tstamp.createFormat()
format.setProperty("format")
format.setPattern("HH:mm:ss z")
format.setTimezone("GMT")
tstamp.setPrefix("prefix")
tstamp.execute()
project.getProperty("prefix.format")
buildRule.configureProject("src/etc/testcases/taskdefs/typeadapter.xml")
buildRule.executeTarget("taskadapter")
buildRule.getLog()
containsString("MyExec called")
buildRule.executeTarget("runadapter")
buildRule.getLog()
containsString("MyRunnable called")
thrown.expect(BuildException.class)
thrown.expectMessage("No public run() method in")
buildRule.executeTarget("runadaptererror")
buildRule.executeTarget("delay")
buildRule.getLog()
containsString("MyTask called")
buildRule.executeTarget("onerror.report")
buildRule.getLog()
containsString("MyTaskNotPresent cannot be found")
buildRule.executeTarget("onerror.ignore")
buildRule.getLog()
log("MyTask called")
log("MyTask called")
project.log("MyRunnable called")
proxyClass.getMethod(execMethodName)
Void.TYPE.equals(execMethod.getReturnType())
execMethod.getReturnType()
execMethod.getReturnType()
log(message,Project.MSG_WARN)
log(message,Project.MSG_ERR)
getExecuteMethod(proxyClass)
getExecuteMethod(o.getClass())
o.getClass()
log("MyTask called")
buildRule.configureProject("src/etc/testcases/taskdefs/typedef.xml")
buildRule.executeTarget("empty")
thrown.expect(BuildException.class)
thrown.expectMessage("Only antlib URIs can be located from the URI alone, not the URI ''")
buildRule.executeTarget("noName")
buildRule.executeTarget("noClassname")
buildRule.executeTarget("classNotFound")
buildRule.executeTarget("testGlobal")
buildRule.getLog()
buildRule.getProject()
buildRule.getProject().getReferences()
buildRule.getProject().getReferences().get("global")
ref.getClass()
ref.getClass().getName()
buildRule.executeTarget("testLocal")
buildRule.getLog()
buildRule.getProject()
buildRule.getProject().getReferences()
buildRule.getProject().getReferences().get("local")
ref.getClass()
ref.getClass().getName()
buildRule.executeTarget("double-notpresent")
buildRule.getLog()
containsString("hi")
thrown.expect(BuildException.class)
thrown.expectMessage("Could not load definitions from resource ")
buildRule.executeTarget("noresourcefailall")
buildRule.executeTarget("noresourcefail")
buildRule.getLog()
containsString("Could not load definitions from resource ")
buildRule.executeTarget("noresourcenotfail")
buildRule.getLog()
containsString("Could not load definitions from resource ")
buildRule.configureProject("src/etc/testcases/taskdefs/untar.xml")
testLogoExtraction("realTest")
testLogoExtraction("realGzipTest")
testLogoExtraction("realBzip2Test")
testLogoExtraction("testTarTask")
testLogoExtraction("testGzipTarTask")
testLogoExtraction("testBzip2TarTask")
buildRule.executeTarget("srcDirTest")
buildRule.executeTarget("encodingTest")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.getProject()
buildRule.getProject().resolveFile(filename)
buildRule.getProject().resolveFile(filename).exists()
testLogoExtraction("resourceCollection")
buildRule.executeTarget(target)
FileUtilities.getFileContents(buildRule.getProject().resolveFile("../asf-logo.gif"))
buildRule.getProject()
buildRule.getProject().resolveFile("../asf-logo.gif")
FileUtilities.getFileContents(newFile(buildRule.getProject().getProperty("output"),"untar/asf-logo.gif"))
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.executeTarget("testDocumentationClaimsOnCopy")
buildRule.getProject()
buildRule.getProject().getProperty("output")
newFile(buildRule.getProject().getProperty("output"),"untar/1/foo").exists()
buildRule.getProject()
buildRule.getProject().getProperty("output")
newFile(buildRule.getProject().getProperty("output"),"untar/2/bar").exists()
buildRule.configureProject("src/etc/testcases/taskdefs/unzip.xml")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.executeTarget("realTest")
FileUtilities.getFileContents(buildRule.getProject().resolveFile("../asf-logo.gif"))
buildRule.getProject()
buildRule.getProject().resolveFile("../asf-logo.gif")
FileUtilities.getFileContents(newFile(buildRule.getProject().getProperty("output"),"asf-logo.gif"))
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.executeTarget("testZipTask")
buildRule.executeTarget("testUncompressedZipTask")
buildRule.executeTarget("testPatternSetExcludeOnly")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.executeTarget("testPatternSetIncludeOnly")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.executeTarget("testPatternSetIncludeAndExclude")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.executeTarget("testTwoPatternSets")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.executeTarget("testTwoPatternSetsWithExcludes")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.executeTarget("selfExtractingArchive")
buildRule.executeTarget("testPatternSetSlashOnly")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.executeTarget("encodingTest")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.executeTarget("testFlattenMapper")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.getProject()
buildRule.getProject().resolveFile(filename)
buildRule.getProject().resolveFile(filename).exists()
buildRule.getProject()
buildRule.getProject().resolveFile(filename)
buildRule.getProject().resolveFile(filename).exists()
buildRule.executeTarget("testGlobMapper")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.executeTarget("testTwoMappers")
buildRule.executeTarget("testResourceCollection")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.executeTarget("testDocumentationClaimsOnCopy")
buildRule.getProject()
buildRule.getProject().getProperty("output")
buildRule.configureProject("src/etc/testcases/taskdefs/uptodate.xml")
buildRule.executeTarget("setUp")
buildRule.getProject()
buildRule.getProject().resolveFile("source")
assumeTrue("Could not change modification timestamp of source directory",srcDir.setLastModified(srcDir.lastModified()-3*FileUtils.getFileUtils().getFileTimestampGranularity()))
srcDir.setLastModified(srcDir.lastModified()-3*FileUtils.getFileUtils().getFileTimestampGranularity())
srcDir.lastModified()
FileUtils.getFileUtils()
FileUtils.getFileUtils().getFileTimestampGranularity()
buildRule.executeTarget("tearDown")
buildRule.executeTarget("testFilesetUpToDate")
buildRule.getProject()
buildRule.getProject().getProperty("foo")
buildRule.executeTarget("testFilesetOutOfDate")
buildRule.getProject()
buildRule.getProject().getProperty("foo")
buildRule.executeTarget("testRCUpToDate")
buildRule.getProject()
buildRule.getProject().getProperty("foo")
buildRule.executeTarget("testRCOutOfDate")
buildRule.getProject()
buildRule.getProject().getProperty("foo")
buildRule.configureProject("src/etc/testcases/taskdefs/war.xml")
buildRule.executeTarget("testlibrefs")
buildRule.getOutputDir()
f.exists()
buildRule.configureProject("src/etc/testcases/taskdefs/whichresource.xml")
buildRule.executeTarget("testClassname")
buildRule.getProject()
buildRule.getProject().getProperty("antmain")
buildRule.executeTarget("testResourcename")
buildRule.getProject()
buildRule.getProject().getProperty("defaults")
buildRule.executeTarget("testResourcenameWithLeadingSlash")
buildRule.getProject()
buildRule.getProject().getProperty("defaults")
buildRule.configureProject("src/etc/testcases/taskdefs/xmlns.xml")
buildRule.executeTarget("xmlns")
buildRule.getLog()
buildRule.executeTarget("xmlns.file")
buildRule.getLog()
buildRule.executeTarget("core")
buildRule.getLog()
thrown.expect(BuildException.class)
thrown.expectMessage("Attempt to use a reserved URI ant:notallowed")
buildRule.executeTarget("excluded")
buildRule.executeTarget("other")
buildRule.getLog()
buildRule.executeTarget("ns.attributes")
buildRule.getLog()
log("MyTask called")
buildRule.configureProject("src/etc/testcases/taskdefs/xmlproperty.xml")
testProperties("test")
testProperties("testResource")
buildRule.executeTarget(target)
buildRule.getProject()
buildRule.getProject().getProperty("root-tag(myattr)")
buildRule.getProject()
buildRule.getProject().getProperty("root-tag.inner-tag")
buildRule.getProject()
buildRule.getProject().getProperty("root-tag.inner-tag(someattr)")
buildRule.getProject()
buildRule.getProject().getProperty("root-tag.a2.a3.a4")
buildRule.getProject()
buildRule.getProject().getProperty("root-tag.cdatatag")
buildRule.executeTarget("testdtd")
buildRule.getProject()
buildRule.getProject().getProperty("root-tag.inner-tag")
doTest("testNone",false,false,false,false,false)
doTest("testKeeproot",true,false,false,false,false)
doTest("testCollapse",false,true,false,false,false)
doTest("testSemantic",false,false,true,false,false)
doTest("testKeeprootCollapse",true,true,false,false,false)
doTest("testKeeprootSemantic",true,false,true,false,false)
doTest("testCollapseSemantic",false,true,true,false,false)
doTest("testKeeprootCollapseSemantic",true,true,true,false,false)
doTest("testInclude",false,false,false,true,false)
doTest("testSemanticInclude",false,false,true,true,false)
doTest("testSemanticInclude",false,false,true,false,true)
buildRule.executeTarget("testneedscat")
buildRule.getProject()
buildRule.getProject().getProperty("skinconfig.foo")
getFiles(buildRule.getProject().resolveFile("xmlproperty/inputs"))
buildRule.getProject()
buildRule.getProject().resolveFile("xmlproperty/inputs")
inputFile.getParentFile()
FILE_UTILS.resolveFile(newFile("."),".")
getGoldfile(inputFile,keepRoot,collapse,semantic,include,localRoot)
propertyFile.exists()
xmlproperty.setProject(p)
xmlproperty.setFile(inputFile)
xmlproperty.setKeeproot(keepRoot)
xmlproperty.setCollapseAttributes(collapse)
xmlproperty.setSemanticAttributes(semantic)
xmlproperty.setIncludeSemanticAttribute(include)
xmlproperty.setRootDirectory(workingDir)
p.setNewProperty("override.property.test","foo")
xmlproperty.execute()
props.load(newFileInputStream(propertyFile))
ensureProperties(msg,inputFile,workingDir,p,props)
ensureReferences(msg,inputFile,p.getReferences())
p.getReferences()
p.getProperties()
properties.stringPropertyNames()
inputFile.getName()
properties.getProperty(currentKey)
xmlproperties.get(currentKey)
propertyValue.startsWith("ID.")
p.getReferences()
p.getReferences().get(currentKey)
propertyValue.substring(3)
propertyValue.equals("path")
obj.getClass()
obj.getClass().getName()
instanceOf(Path.class)
obj.toString()
propertyValue.startsWith("FILE.")
propertyValue.substring(5)
f.getAbsolutePath()
xmlproperties.forEach((key,value)->System.out.println(key+" = "+value))
System.out.println(key+" = "+value)
inputFile.getName()
key.startsWith("ant.")
input.getName()
input.getName().toLowerCase()
baseName.endsWith(".xml")
baseName.substring(0,baseName.length()-4)
baseName.length()
input.getParentFile()
input.getParentFile().getParentFile()
getFiles(startingDir,result)
getFiles(startingDir,result)
testExtraField(newZip(),true)
testExtraField(newJar(),false)
testInstance.add(newResourceCollection(){publicbooleanisFilesystemOnly(){returnfalse;}publicintsize(){return1;}publicIterator<Resource>iterator(){returnCollections.<Resource>singleton(r).iterator();}})
Collections.<Resource>singleton(r).iterator()
testInstance.execute()
zf.getEntry("x")
ze.getExtraFields()
ze.getExtraFields()
instanceOf(JarMarker.class)
ze.getExtraFields()
instanceOf(Zip64ExtendedInformationExtraField.class)
ZipFile.closeQuietly(zf)
f.exists()
f.delete()
Collections.<Resource>singleton(r).iterator()
testInstance.execute()
zf.getEntry("x")
ze.getExtraFields()
ze.getExtraFields()
instanceOf(JarMarker.class)
ze.getExtraFields()
instanceOf(Zip64ExtendedInformationExtraField.class)
ZipFile.closeQuietly(zf)
f.exists()
f.delete()
buildRule.configureProject("src/etc/testcases/taskdefs/zip.xml")
buildRule.executeTarget("setUp")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.executeTarget("test4")
zfPrefixAddsDir.close()
buildRule.executeTarget("test5")
buildRule.executeTarget("test6")
buildRule.executeTarget("test7")
buildRule.executeTarget("test8")
buildRule.executeTarget("testZipgroupfileset")
buildRule.getProject()
buildRule.getProject().getProperty("output")
zipFile.getEntry("ant.xml")
zipFile.getEntry("optional/jspc.xml")
zipFile.getEntry("zip/zipgroupfileset3.zip")
zipFile.getEntry("test6.mf")
zipFile.getEntry("test7.mf")
zipFile.close()
buildRule.executeTarget("testUpdateNotNecessary")
buildRule.getLog()
not(containsString("Updating"))
containsString("Updating")
buildRule.executeTarget("testUpdateIsNecessary")
buildRule.getLog()
containsString("Updating")
buildRule.executeTarget("testPrefixAddsDir")
buildRule.getProject()
buildRule.getProject().getProperty("output")
zfPrefixAddsDir.getEntry("test/")
buildRule.executeTarget("testFilesOnlyDoesntCauseRecreateSetup")
buildRule.getOutputDir()
assumeTrue("Could not change file modification time",testFile.setLastModified(testFile.lastModified()-(FileUtils.getFileUtils().getFileTimestampGranularity()*5)))
testFile.setLastModified(testFile.lastModified()-(FileUtils.getFileUtils().getFileTimestampGranularity()*5))
testFile.lastModified()
FileUtils.getFileUtils()
FileUtils.getFileUtils().getFileTimestampGranularity()
testFile.lastModified()
buildRule.executeTarget("testFilesOnlyDoesntCauseRecreate")
testFile.lastModified()
buildRule.executeTarget("testEmptySkip")
buildRule.executeTarget("zipEmptyDir")
buildRule.executeTarget("zipEmptyDirFilesOnly")
buildRule.executeTarget("zipEmptyCreate")
buildRule.getLog()
containsString("Note: creating empty")
buildRule.executeTarget("testCompressionLevel")
buildRule.executeTarget("testDefaultExcludesAndUpdate")
buildRule.getProject()
buildRule.getProject().getProperty("output")
f.getEntry("ziptest~")
buildRule.executeTarget("testFileResource")
buildRule.executeTarget("testNonFileResource")
buildRule.executeTarget("testTarFileSet")
buildRule.getProject()
buildRule.getProject().getProperty("output")
zf.getEntry("asf-logo.gif")
ze.getUnixMode()
buildRule.executeTarget("rewriteZeroPermissions")
buildRule.getProject()
buildRule.getProject().getProperty("output")
zf.getEntry("testdir/test.txt")
ze.getUnixMode()
buildRule.executeTarget("acceptZeroPermissions")
buildRule.getProject()
buildRule.getProject().getProperty("output")
zf.getEntry("testdir/test.txt")
ze.getUnixMode()
buildRule.executeTarget("testForBugzilla34764")
buildRule.getProject()
buildRule.getProject().getProperty("output")
zf.getEntry("file1")
ze.getUnixMode()
buildRule.executeTarget("testRegexpMapper1")
buildRule.getOutputDir()
testFile.lastModified()
buildRule.executeTarget("testRegexpMapper2")
testFile.lastModified()
sb.append(msg)
sb.toString()
super.setupModernJavacCommandlineSwitches(cmd)
super.setupModernJavacCommandlineSwitches(cmd)
testSource(null,"javac1.3","",null,"1.1")
testSource(null,"javac1.3","",null,"1.2")
testSource(null,"javac1.3","",null,"1.3")
testSource(null,"javac1.3","",null,"1.4")
testSource("1.3","javac1.4","",null,"1.1")
testSource("1.3","javac1.5","",null,"1.1")
testSource("1.3","javac1.6","",null,"1.1")
testSource("1.3","javac1.7","",null,"1.1")
testSource("1.3","javac1.8","",null,"1.1")
testSource("1.3","javac1.4","",null,"1.2")
testSource("1.3","javac1.5","",null,"1.2")
testSource("1.3","javac1.6","",null,"1.2")
testSource("1.3","javac1.7","",null,"1.2")
testSource("1.3","javac1.8","",null,"1.2")
commonSourceDowngrades("javac1.5")
testSource(null,"javac1.5","","1.5")
testSource(null,"javac1.5","","5")
commonSourceDowngrades("javac1.6")
testSource(null,"javac1.6","","1.5")
testSource(null,"javac1.6","","5")
testSource(null,"javac1.6","","1.6")
testSource(null,"javac1.6","","6")
commonSourceDowngrades("javac1.7")
testSource("1.5","javac1.7","If you specify -target 1.5 you now must also specify"+" -source 1.5","1.5")
testSource("1.6","javac1.7","If you specify -target 1.6 you now must also specify"+" -source 1.6","1.6")
testSource("5","javac1.7","If you specify -target 5 you now must also specify"+" -source 5","5")
testSource("6","javac1.7","If you specify -target 6 you now must also specify"+" -source 6","6")
testSource(null,"javac1.7","","1.7")
testSource(null,"javac1.7","","7")
commonSourceDowngrades("javac1.8")
testSource("1.5","javac1.8","If you specify -target 1.5 you now must also specify"+" -source 1.5","1.5")
testSource("1.6","javac1.8","If you specify -target 1.6 you now must also specify"+" -source 1.6","1.6")
testSource("1.7","javac1.8","If you specify -target 1.7 you now must also specify"+" -source 1.7","1.7")
testSource("5","javac1.8","If you specify -target 5 you now must also specify"+" -source 5","5")
testSource("6","javac1.8","If you specify -target 6 you now must also specify"+" -source 6","6")
testSource("7","javac1.8","If you specify -target 7 you now must also specify"+" -source 7","7")
testSource(null,"javac1.8","","1.8")
testSource(null,"javac1.8","","8")
commonSourceDowngrades("javac1.9")
testSource("1.5","javac1.9","If you specify -target 1.5 you now must also specify"+" -source 1.5","1.5")
testSource("1.6","javac1.9","If you specify -target 1.6 you now must also specify"+" -source 1.6","1.6")
testSource("1.7","javac1.9","If you specify -target 1.7 you now must also specify"+" -source 1.7","1.7")
testSource("1.8","javac1.9","If you specify -target 1.8 you now must also specify"+" -source 1.8","1.8")
testSource("5","javac1.9","If you specify -target 5 you now must also specify"+" -source 5","5")
testSource("6","javac1.9","If you specify -target 6 you now must also specify"+" -source 6","6")
testSource("7","javac1.9","If you specify -target 7 you now must also specify"+" -source 7","7")
testSource("8","javac1.9","If you specify -target 8 you now must also specify"+" -source 8","8")
testSource(null,"javac1.9","","1.9")
testSource(null,"javac1.9","","9")
commonSourceDowngrades("javac9")
testSource("1.5","javac9","If you specify -target 1.5 you now must also specify"+" -source 1.5","1.5")
testSource("1.6","javac1.9","If you specify -target 1.6 you now must also specify"+" -source 1.6","1.6")
testSource("1.7","javac9","If you specify -target 1.7 you now must also specify"+" -source 1.7","1.7")
testSource("1.8","javac9","If you specify -target 1.8 you now must also specify"+" -source 1.8","1.8")
testSource("5","javac9","If you specify -target 5 you now must also specify"+" -source 5","5")
testSource("6","javac9","If you specify -target 6 you now must also specify"+" -source 6","6")
testSource("7","javac9","If you specify -target 7 you now must also specify"+" -source 7","7")
testSource("8","javac9","If you specify -target 8 you now must also specify"+" -source 8","8")
testSource(null,"javac9","","1.9")
testSource(null,"javac9","","9")
setupModernJavacCommand()
srcPath.setLocation(src)
javac.setSrcdir(srcPath)
javac.createModulepath()
javac.createModulepath().setLocation(modules)
javac.setSource("9")
javac.setTarget("9")
javac.setIncludeantruntime(false)
javac.add(impl)
javac.execute()
Arrays.asList(cmd[0].getCommandline())
cmd[0].getCommandline()
not(hasItem("--module-source-path"))
hasItem("--module-source-path")
cmdLine.indexOf("-sourcepath")
cmdLine.size()
src.getAbsolutePath()
cmdLine.get(index+1)
cmdLine.indexOf("--module-path")
cmdLine.size()
modules.getAbsolutePath()
cmdLine.get(index+1)
Collections.addAll(expected,java1.getAbsolutePath(),java2.getAbsolutePath())
java1.getAbsolutePath()
java2.getAbsolutePath()
cmdLine.subList(cmdLine.size()-2,cmdLine.size())
cmdLine.size()
cmdLine.size()
delete(workDir)
setupModernJavacCommand()
moduleSourcePath.setPath(moduleSrcPathStr)
javac.setModulesourcepath(moduleSourcePath)
javac.createModulepath()
javac.createModulepath().setLocation(modules)
javac.setSource("9")
javac.setTarget("9")
javac.setDestdir(build)
javac.setIncludeantruntime(false)
javac.add(impl)
javac.execute()
Arrays.asList(cmd[0].getCommandline())
cmd[0].getCommandline()
not(hasItem("-sourcepath"))
hasItem("-sourcepath")
cmdLine.indexOf("--module-source-path")
cmdLine.size()
String.format("%s/%s",workDir.getAbsolutePath(),moduleSrcPathStr)
workDir.getAbsolutePath()
String.format("%s/%s",workDir.getAbsolutePath(),moduleSrcPathStr).replace('/',File.separatorChar)
String.format("%s/%s",workDir.getAbsolutePath(),moduleSrcPathStr).replace('/',File.separatorChar).replace('\\',File.separatorChar)
cmdLine.get(index+1)
cmdLine.indexOf("--module-path")
cmdLine.size()
modules.getAbsolutePath()
cmdLine.get(index+1)
Collections.addAll(expectedFiles,java1.getAbsolutePath(),java2.getAbsolutePath(),java3.getAbsolutePath())
java1.getAbsolutePath()
java2.getAbsolutePath()
java3.getAbsolutePath()
cmdLine.subList(cmdLine.size()-3,cmdLine.size())
cmdLine.size()
cmdLine.size()
delete(workDir)
setupModernJavacCommand()
moduleSourcePath.setPath(moduleSrcPathStr)
javac.setModulesourcepath(moduleSourcePath)
javac.setSource("9")
javac.setTarget("9")
javac.setDestdir(build)
javac.setIncludeantruntime(false)
javac.createExclude()
javac.createExclude().setName("org/**/invisible/**")
javac.add(impl)
javac.execute()
Collections.addAll(expectedFiles,java1.getAbsolutePath(),java2.getAbsolutePath())
java1.getAbsolutePath()
java2.getAbsolutePath()
Arrays.stream(compileList)
Arrays.stream(compileList).map(File::getAbsolutePath)
Arrays.stream(compileList).map(File::getAbsolutePath).collect(Collectors.toCollection(TreeSet::new))
Collectors.toCollection(TreeSet::new)
delete(workDir)
javac.setProject(p)
javac.setCompiler("javac8")
javac.setSource("6")
javac.setTarget("6")
javac.setRelease("6")
javac.setSourcepath(newPath(p))
sth.setJavac(javac)
sth.setupModernJavacCommandlineSwitches(cmd)
javac.getLog()
containsString("Support for javac --release has been added in Java9 ignoring it")
cmd.getCommandline()
javac.setProject(p)
javac.setCompiler("javac9")
javac.setSource("6")
javac.setTarget("6")
javac.setRelease("6")
javac.setSourcepath(newPath(p))
sth.setJavac(javac)
sth.setupModernJavacCommandlineSwitches(cmd)
javac.getLog()
containsString("Ignoring source, target and bootclasspath as release has been set")
cmd.getCommandline()
testSource("1.3",javaVersion,"If you specify -target 1.1 you now must also specify"+" -source 1.3","1.1")
testSource("1.3",javaVersion,"If you specify -target 1.2 you now must also specify"+" -source 1.3","1.2")
testSource("1.3",javaVersion,"If you specify -target 1.3 you now must also specify"+" -source 1.3","1.3")
testSource("1.4",javaVersion,"If you specify -target 1.4 you now must also specify"+" -source 1.4","1.4")
testSource(expectedSource,javaVersion,expectedLog,configuredTarget,null)
testSource(expectedSource,javaVersion,expectedLog,configuredTarget,null)
System.getProperty("java.io.tmpdir")
String.format("%s%s%d",getClass().getName(),testName,System.currentTimeMillis()/1000)
getClass()
getClass().getName()
System.currentTimeMillis()
destDir.mkdirs()
relativePath.replace('/',File.separatorChar)
relativePath.replace('/',File.separatorChar).replace('\\',File.separatorChar)
FileUtils.getFileUtils()
FileUtils.getFileUtils().createNewFile(file,true)
f.isDirectory()
f.listFiles()
Arrays.stream(clds)
Arrays.stream(clds).forEach(this::delete)
f.delete()
buildRule.configureProject("src/etc/testcases/taskdefs/conditions/antversion.xml")
buildRule.executeTarget("testatleast")
buildRule.executeTarget("testexactly")
con.setString("abc")
con.setSubstring("A")
con.eval()
con.setCasesensitive(false)
con.eval()
eq.setArg1("a")
eq.setArg2(" a")
eq.eval()
eq.setTrim(true)
eq.eval()
eq.setArg2("a\t")
eq.eval()
eq.setArg1("a")
eq.setArg2("A")
eq.eval()
eq.setCasesensitive(false)
eq.eval()
buildRule.configureProject("src/etc/testcases/taskdefs/conditions/http.xml")
buildRule.executeTarget("basic-no-method")
buildRule.getProject()
buildRule.getProject().getProperty("basic-no-method")
buildRule.getProject()
buildRule.getProject().getProperty("basic-no-method-bad-url")
buildRule.executeTarget("test-head-request")
buildRule.getProject()
buildRule.getProject().getProperty("test-head-request")
buildRule.getProject()
buildRule.getProject().getProperty("test-head-request-bad-url")
buildRule.executeTarget("test-get-request")
buildRule.getProject()
buildRule.getProject().getProperty("test-get-request")
buildRule.getProject()
buildRule.getProject().getProperty("test-get-request-bad-url")
buildRule.executeTarget("bad-request-method")
buildRule.configureProject("src/etc/testcases/taskdefs/conditions/isfailure.xml")
buildRule.executeTarget("testisfailure")
buildRule.configureProject("src/etc/testcases/taskdefs/conditions/isfileselected.xml")
buildRule.executeTarget("simple")
buildRule.executeTarget("name")
buildRule.executeTarget("basedir")
buildRule.executeTarget("type")
thrown.expect(BuildException.class)
thrown.expectMessage("fileset doesn't support the nested \"isfileselected\"")
buildRule.executeTarget("not.selector")
buildRule.configureProject("src/etc/testcases/taskdefs/conditions/isreachable.xml")
buildRule.executeTarget("testLocalhost")
buildRule.executeTarget("testLocalhostURL")
buildRule.executeTarget("testIpv4localhost")
buildRule.executeTarget("testFTPURL")
thrown.expect(BuildException.class)
thrown.expectMessage(IsReachable.ERROR_BOTH_TARGETS)
buildRule.executeTarget("testBoth")
thrown.expect(BuildException.class)
thrown.expectMessage(IsReachable.ERROR_NO_HOSTNAME)
buildRule.executeTarget("testNoTargets")
thrown.expect(BuildException.class)
thrown.expectMessage(IsReachable.ERROR_BAD_TIMEOUT)
buildRule.executeTarget("testBadTimeout")
thrown.expect(BuildException.class)
thrown.expectMessage(IsReachable.ERROR_NO_HOST_IN_URL)
buildRule.executeTarget("testFile")
thrown.expect(BuildException.class)
thrown.expectMessage(IsReachable.ERROR_BAD_URL)
buildRule.executeTarget("testBadURL")
buildRule.configureProject("src/etc/testcases/taskdefs/conditions/isreference.xml")
buildRule.executeTarget("basic")
buildRule.getProject()
buildRule.getProject().getProperty("global-path")
buildRule.getProject()
buildRule.getProject().getProperty("target-path")
buildRule.getProject()
buildRule.getProject().getProperty("undefined")
thrown.expect(BuildException.class)
thrown.expectMessage("No reference specified for isreference condition")
buildRule.executeTarget("isreference-incomplete")
buildRule.executeTarget("type")
buildRule.getProject()
buildRule.getProject().getProperty("global-path")
buildRule.getProject()
buildRule.getProject().getProperty("global-path-as-fileset")
buildRule.getProject()
buildRule.getProject().getProperty("global-path-as-foo")
buildRule.getProject()
buildRule.getProject().getProperty("global-echo")
buildRule.configureProject("src/etc/testcases/taskdefs/conditions/issigned.xml")
buildRule.executeTarget("pass")
buildRule.executeTarget("password")
buildRule.executeTarget("apassword")
buildRule.executeTarget("allsigned")
buildRule.configureProject("src/etc/testcases/taskdefs/conditions/parsersupports.xml")
thrown.expect(BuildException.class)
thrown.expectMessage(ParserSupports.ERROR_NO_ATTRIBUTES)
buildRule.executeTarget("testEmpty")
thrown.expect(BuildException.class)
thrown.expectMessage(ParserSupports.ERROR_BOTH_ATTRIBUTES)
buildRule.executeTarget("testBoth")
buildRule.executeTarget("testNamespaces")
thrown.expect(BuildException.class)
thrown.expectMessage(ParserSupports.ERROR_NO_VALUE)
buildRule.executeTarget("testPropertyNoValue")
buildRule.executeTarget("testUnknownProperty")
buildRule.executeTarget("testPropertyInvalid")
buildRule.executeTarget("testXercesProperty")
buildRule.configureProject("src/etc/testcases/taskdefs/conditions/typefound.xml")
buildRule.executeTarget("testTask")
buildRule.getProject()
buildRule.getProject().getProperty("testTask")
thrown.expect(BuildException.class)
thrown.expectMessage("No type specified")
buildRule.executeTarget("testUndefined")
buildRule.executeTarget("testTaskThatIsntDefined")
buildRule.getProject()
buildRule.getProject().getProperty("testTaskThatIsntDefined")
buildRule.executeTarget("testTaskThatDoesntReallyExist")
buildRule.getProject()
buildRule.getProject().getProperty("testTaskThatDoesntReallyExist")
buildRule.executeTarget("testType")
buildRule.getProject()
buildRule.getProject().getProperty("testType")
buildRule.executeTarget("testPreset")
buildRule.getProject()
buildRule.getProject().getProperty("testPreset")
buildRule.executeTarget("testMacro")
buildRule.getProject()
buildRule.getProject().getProperty("testMacro")
buildRule.configureProject("src/etc/testcases/taskdefs/conditions/xor.xml")
buildRule.executeTarget("testEmpty")
buildRule.executeTarget("test0")
buildRule.executeTarget("test1")
buildRule.executeTarget("test00")
buildRule.executeTarget("test10")
buildRule.executeTarget("test01")
buildRule.executeTarget("test11")
parser.stdout("Working file: build.xml")
parser.stdout("revision 1.475")
parser.stdout("date: 2004/06/05 16:10:32;  author: somebody;  state: Exp;  lines: +2 -2")
parser.stdout("I have done something. I swear.")
parser.stdout("=============================================================================")
parser.getEntrySetAsArray()
entries[0].getAuthor()
Calendar.getInstance(TimeZone.getTimeZone("UTC"),Locale.US)
TimeZone.getTimeZone("UTC")
cal.set(Calendar.MILLISECOND,0)
cal.set(2004,Calendar.JUNE,5,16,10,32)
cal.getTime()
entries[0].getDate()
parser.stdout("Working file: build.xml")
parser.stdout("revision 1.475")
parser.stdout("date: 2004-06-05 16:10:32 +0000; author: somebody; state: Exp;  lines: +2 -2")
parser.stdout("I have done something. I swear.")
parser.stdout("=============================================================================")
parser.getEntrySetAsArray()
entries[0].getAuthor()
Calendar.getInstance(TimeZone.getTimeZone("UTC"),Locale.US)
TimeZone.getTimeZone("UTC")
cal.set(Calendar.MILLISECOND,0)
cal.set(2004,Calendar.JUNE,5,16,10,32)
cal.getTime()
entries[0].getDate()
entry.addFile("Medicare & review.doc","1.1")
entry.addFile("El\u00e8ments de style","1.2")
writer.printChangeLog(pwriter,entries)
JAXPUtils.getXMLReader()
output.toByteArray()
xmlReader.setContentHandler(newNullContentHandler())
xmlReader.parse(newInputSource(input))
expectNameAddress(newEmailAddress("address (name)"))
expectNameAddress(newEmailAddress("(name) address"))
expectNameAddress(newEmailAddress("name <address>"))
expectNameAddress(newEmailAddress("<address> name"))
expectNameAddress(newEmailAddress("<address> (name)"))
expectNameAddress(newEmailAddress("(name) <address>"))
expectNameAddress2(newEmailAddress("address (<name>)"))
expectNameAddress2(newEmailAddress("(<name>) address"))
expectNameAddress3(newEmailAddress("address"))
expectNameAddress3(newEmailAddress("<address>"))
expectNameAddress3(newEmailAddress(" <address> "))
expectNameAddress3(newEmailAddress("< address >"))
expectNameAddress3(newEmailAddress(" < address > "))
e.getName()
e.getAddress()
e.getName()
e.getAddress()
e.getName()
e.getName()
e.getAddress()
buildRule.configureProject("src/etc/testcases/taskdefs/email/mail.xml")
thrown.expect(BuildException.class)
thrown.expectMessage("SMTP auth only possible with MIME mail")
buildRule.executeTarget("test1")
thrown.expect(BuildException.class)
thrown.expectMessage("SSL and STARTTLS only possible with MIME mail")
buildRule.executeTarget("test2")
DummyMailServer.startMailServer()
buildRule.getProject()
buildRule.getProject().setProperty("EmailTaskTest.test3.port",String.valueOf(mailServer.getPort()))
String.valueOf(mailServer.getPort())
mailServer.getPort()
buildRule.executeTarget("test3")
mailServer.disconnect()
mailServer.getResult()
smtpInteraction.contains("RCPT TO:<whoami>")
ms.setProject(p)
ms.addText("hi, this is an email")
testFolder.newFile("message.txt")
ms.print(newPrintStream(fos))
fos.write(120)
buildRule.configureProject("src/etc/testcases/taskdefs/jmod.xml")
buildRule.executeTarget("setUp")
buildRule.executeTarget("destAndClasspathNoJmod")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
buildRule.executeTarget("classpath-nested")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
buildRule.executeTarget("destAndClasspathOlderThanJmod")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
buildRule.getProject()
buildRule.getProject().getProperty("hello.jar")
Files.getLastModifiedTime(jmod.toPath())
jmod.toPath()
Files.getLastModifiedTime(jmod.toPath()).toInstant()
Files.getLastModifiedTime(jmod.toPath()).toInstant().isAfter(Instant.now().plus(30,ChronoUnit.MINUTES))
Instant.now()
Instant.now().plus(30,ChronoUnit.MINUTES)
expected.expect(BuildException.class)
buildRule.executeTarget("noDestFile")
expected.expect(BuildException.class)
buildRule.executeTarget("noClasspath")
expected.expect(BuildException.class)
buildRule.executeTarget("emptyClasspath")
expected.expect(BuildException.class)
buildRule.executeTarget("nonexistentClasspath")
buildRule.executeTarget("classpathref")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
buildRule.executeTarget("classpath-both")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
buildRule.executeTarget("modulepath")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
buildRule.executeTarget("modulepathref")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
buildRule.executeTarget("modulepath-nested")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
expected.expect(BuildException.class)
buildRule.executeTarget("modulepathnondir")
buildRule.executeTarget("modulepath-both")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
buildRule.executeTarget("commandpath")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsLine(output,l->l.equals("bin/command1"))
l.equals("bin/command1")
buildRule.executeTarget("commandpathref")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsLine(output,l->l.equals("bin/command2"))
l.equals("bin/command2")
buildRule.executeTarget("commandpath-nested")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsLine(output,l->l.equals("bin/command3"))
l.equals("bin/command3")
buildRule.executeTarget("commandpath-both")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsAll(output,l->l.equals("bin/command4"),l->l.equals("bin/command5"))
l.equals("bin/command4")
l.equals("bin/command5")
buildRule.executeTarget("headerpath")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsLine(output,l->l.equals("include/header1.h"))
l.equals("include/header1.h")
buildRule.executeTarget("headerpathref")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsLine(output,l->l.equals("include/header2.h"))
l.equals("include/header2.h")
buildRule.executeTarget("headerpath-nested")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsLine(output,l->l.equals("include/header3.h"))
l.equals("include/header3.h")
buildRule.executeTarget("headerpath-both")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsAll(output,l->l.equals("include/header4.h"),l->l.equals("include/header5.h"))
l.equals("include/header4.h")
l.equals("include/header5.h")
buildRule.executeTarget("configpath")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsLine(output,l->l.equals("conf/config1.properties"))
l.equals("conf/config1.properties")
buildRule.executeTarget("configpathref")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsLine(output,l->l.equals("conf/config2.properties"))
l.equals("conf/config2.properties")
buildRule.executeTarget("configpath-nested")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsLine(output,l->l.equals("conf/config3.properties"))
l.equals("conf/config3.properties")
buildRule.executeTarget("configpath-both")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsAll(output,l->l.equals("conf/config4.properties"),l->l.equals("conf/config5.properties"))
l.equals("conf/config4.properties")
l.equals("conf/config5.properties")
buildRule.executeTarget("legalpath")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsLine(output,l->l.equals("legal/legal1.txt"))
l.equals("legal/legal1.txt")
buildRule.executeTarget("legalpathref")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsLine(output,l->l.equals("legal/legal2.txt"))
l.equals("legal/legal2.txt")
buildRule.executeTarget("legalpath-nested")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsLine(output,l->l.equals("legal/legal3.txt"))
l.equals("legal/legal3.txt")
buildRule.executeTarget("legalpath-both")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsAll(output,l->l.equals("legal/legal4.txt"),l->l.equals("legal/legal5.txt"))
l.equals("legal/legal4.txt")
l.equals("legal/legal5.txt")
buildRule.executeTarget("manpath")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsLine(output,l->l.equals("man/man1.1"))
l.equals("man/man1.1")
buildRule.executeTarget("manpathref")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsLine(output,l->l.equals("man/man2.1"))
l.equals("man/man2.1")
buildRule.executeTarget("manpath-nested")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsLine(output,l->l.equals("man/man3.1"))
l.equals("man/man3.1")
buildRule.executeTarget("manpath-both")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsAll(output,l->l.equals("man/man4.1"),l->l.equals("man/man5.1"))
l.equals("man/man4.1")
l.equals("man/man5.1")
buildRule.executeTarget("nativelibpath")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsLine(output,l->l.matches("lib/[^/]+\\.(dll|dylib|so)"))
l.matches("lib/[^/]+\\.(dll|dylib|so)")
buildRule.executeTarget("nativelibpathref")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsLine(output,l->l.matches("lib/[^/]+\\.(dll|dylib|so)"))
l.matches("lib/[^/]+\\.(dll|dylib|so)")
buildRule.executeTarget("nativelibpath-nested")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsLine(output,l->l.matches("lib/[^/]+\\.(dll|dylib|so)"))
l.matches("lib/[^/]+\\.(dll|dylib|so)")
buildRule.executeTarget("nativelibpath-both")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("list",jmod.toString())
jmod.toString()
containsAll(output,l->l.matches("lib/(lib)?zip\\.(dll|dylib|so)"),l->l.matches("lib/(lib)?jvm\\.(dll|dylib|so)"))
l.matches("lib/(lib)?zip\\.(dll|dylib|so)")
l.matches("lib/(lib)?jvm\\.(dll|dylib|so)")
buildRule.executeTarget("version")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
buildRule.getProject()
buildRule.getProject().getProperty("version")
version.isEmpty()
runJmod("describe",jmod.toString())
jmod.toString()
containsLine(output,l->l.endsWith("@"+version))
l.endsWith("@"+version)
buildRule.executeTarget("version-nested")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("describe",jmod.toString())
jmod.toString()
containsLine(output,l->l.matches(".*@1\\.0\\.1[-+]+99"))
l.matches(".*@1\\.0\\.1[-+]+99")
buildRule.executeTarget("version-nested-number")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("describe",jmod.toString())
jmod.toString()
containsLine(output,l->l.endsWith("@1.0.1"))
l.endsWith("@1.0.1")
expected.expect(BuildException.class)
buildRule.executeTarget("version-nested-no-number")
expected.expect(BuildException.class)
buildRule.executeTarget("version-nested-invalid-number")
expected.expect(BuildException.class)
buildRule.executeTarget("version-nested-invalid-prerelease")
expected.expect(BuildException.class)
buildRule.executeTarget("version-both")
buildRule.executeTarget("mainclass")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
buildRule.getProject()
buildRule.getProject().getProperty("hello.main-class")
mainClass.isEmpty()
runJmod("describe",jmod.toString())
jmod.toString()
Pattern.quote(mainClass)
containsLine(output,l->l.matches(mainClassPattern))
l.matches(mainClassPattern)
buildRule.executeTarget("platform")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
buildRule.getProject()
buildRule.getProject().getProperty("target-platform")
platform.isEmpty()
runJmod("describe",jmod.toString())
jmod.toString()
Pattern.quote(platform)
containsLine(output,l->l.matches(platformPattern))
l.matches(platformPattern)
buildRule.executeTarget("hashing")
buildRule.getProject()
buildRule.getProject().getProperty("jmod")
jmod.exists()
runJmod("describe",jmod.toString())
jmod.toString()
containsLine(output,l->l.startsWith("hashes"))
l.startsWith("hashes")
ToolProvider.findFirst("jmod")
ToolProvider.findFirst("jmod").orElseThrow(()->newRuntimeException("jmod tool not found in JDK."))
jmod.run(out,err,args)
stdout.toString()
reader.lines()
reader.lines().anyMatch(test)
reader.readLine()
test1.test(line)
test2.test(line)
buildRule.configureProject("src/etc/testcases/taskdefs/link.xml")
buildRule.executeTarget("setUp")
System.getProperty("os.name")
System.getProperty("os.name").contains("Windows")
Files.getLastModifiedTime(path)
Files.getLastModifiedTime(path).toInstant()
Files.getLastModifiedTime(path).toInstant().isBefore(time)
isWindows()
buildRule.getProject()
buildRule.getProject().getProperty("image")
image.root.exists()
image.java.exists()
buildRule.executeTarget("modulepath")
verifyImageBuiltNormally()
buildRule.executeTarget("imageNewerThanJmods")
verifyImageBuiltNormally()
Instant.now()
Instant.now().plus(30,ChronoUnit.MINUTES)
Files.walk(image.root.toPath())
image.root.toPath()
imageFiles.noneMatch(i->isEarlierThan(future,i))
isEarlierThan(future,i)
expected.expect(BuildException.class)
buildRule.executeTarget("nomodulepath")
expected.expect(BuildException.class)
buildRule.executeTarget("nomodules")
buildRule.executeTarget("modulepathref")
verifyImageBuiltNormally()
buildRule.executeTarget("modulepath-nested")
verifyImageBuiltNormally()
buildRule.executeTarget("modulepath-both")
verifyImageBuiltNormally()
buildRule.executeTarget("modules-nested")
verifyImageBuiltNormally()
image.java.toString()
buildRule.getProject()
buildRule.getProject().getProperty("hello.main-class")
builder.inheritIO()
builder.start()
builder.start().waitFor()
builder.command(image.java.toString(),buildRule.getProject().getProperty("smile.main-class"))
image.java.toString()
buildRule.getProject()
buildRule.getProject().getProperty("smile.main-class")
builder.start()
builder.start().waitFor()
expected.expect(BuildException.class)
buildRule.executeTarget("modules-nested-missing-name")
buildRule.executeTarget("modules-both")
verifyImageBuiltNormally()
expected.expect(BuildException.class)
buildRule.executeTarget("observable")
expected.expect(BuildException.class)
buildRule.executeTarget("observable-nested")
expected.expect(BuildException.class)
buildRule.executeTarget("observable-nested-missing-name")
buildRule.executeTarget("observable-both")
verifyImageBuiltNormally()
verifyImageBuiltNormally()
isWindows()
launcher1.exists()
isWindows()
launcher2.exists()
buildRule.executeTarget("launchers")
verifyLaunchersExist()
buildRule.executeTarget("launchers-nested")
verifyLaunchersExist()
expected.expect(BuildException.class)
buildRule.executeTarget("launchers-nested-missing-name")
expected.expect(BuildException.class)
buildRule.executeTarget("launchers-nested-missing-module")
buildRule.executeTarget("launchers-both")
verifyLaunchersExist()
verifyImageBuiltNormally()
buildRule.getProject()
buildRule.getProject().getProperty("localefinder.main-class")
image.java.toString()
builder.inheritIO()
builder.start()
builder.start().waitFor()
builder.command(image.java.toString(),mainClass,"ja")
image.java.toString()
builder.start()
builder.start().waitFor()
buildRule.executeTarget("locales")
verifyLocales()
buildRule.executeTarget("locales-nested")
verifyLocales()
expected.expect(BuildException.class)
buildRule.executeTarget("locales-nested-missing-name")
buildRule.executeTarget("locales-both")
verifyLocales()
buildRule.executeTarget("excluderesources")
verifyImageBuiltNormally()
buildRule.getProject()
buildRule.getProject().getProperty("hello.main-class")
image.java.toString()
builder.redirectInput(ProcessBuilder.Redirect.INHERIT)
builder.redirectErrorStream(true)
builder.start()
process.getInputStream()
reader.lines()
reader.lines().collect(Collectors.toList())
Collectors.toList()
outputLines.stream()
outputLines.stream().anyMatch(l->l.endsWith("resource1.txt absent"))
l.endsWith("resource1.txt absent")
outputLines.stream()
outputLines.stream().anyMatch(l->l.endsWith("resource2.txt present"))
l.endsWith("resource2.txt present")
buildRule.executeTarget("excluderesources-nested")
verifyImageBuiltNormally()
buildRule.getProject()
buildRule.getProject().getProperty("hello.main-class")
image.java.toString()
builder.redirectInput(ProcessBuilder.Redirect.INHERIT)
builder.redirectErrorStream(true)
builder.start()
process.getInputStream()
reader.lines()
reader.lines().collect(Collectors.toList())
Collectors.toList()
outputLines.stream()
outputLines.stream().anyMatch(l->l.endsWith("resource1.txt absent"))
l.endsWith("resource1.txt absent")
outputLines.stream()
outputLines.stream().anyMatch(l->l.endsWith("resource2.txt present"))
l.endsWith("resource2.txt present")
buildRule.executeTarget("excluderesources-nested-file")
verifyImageBuiltNormally()
buildRule.getProject()
buildRule.getProject().getProperty("hello.main-class")
image.java.toString()
builder.redirectInput(ProcessBuilder.Redirect.INHERIT)
builder.redirectErrorStream(true)
builder.start()
process.getInputStream()
reader.lines()
reader.lines().collect(Collectors.toList())
Collectors.toList()
outputLines.stream()
outputLines.stream().anyMatch(l->l.endsWith("resource1.txt absent"))
l.endsWith("resource1.txt absent")
outputLines.stream()
outputLines.stream().anyMatch(l->l.endsWith("resource2.txt present"))
l.endsWith("resource2.txt present")
expected.expect(BuildException.class)
buildRule.executeTarget("excluderesources-nested-no-attr")
expected.expect(BuildException.class)
buildRule.executeTarget("excluderesources-nested-both")
buildRule.executeTarget("excluderesources-both")
verifyImageBuiltNormally()
buildRule.getProject()
buildRule.getProject().getProperty("hello.main-class")
image.java.toString()
builder.redirectInput(ProcessBuilder.Redirect.INHERIT)
builder.redirectErrorStream(true)
builder.start()
process.getInputStream()
reader.lines()
reader.lines().collect(Collectors.toList())
Collectors.toList()
outputLines.stream()
outputLines.stream().anyMatch(l->l.endsWith("resource1.txt absent"))
l.endsWith("resource1.txt absent")
outputLines.stream()
outputLines.stream().anyMatch(l->l.endsWith("resource2.txt absent"))
l.endsWith("resource2.txt absent")
buildRule.executeTarget("excludefiles")
verifyImageBuiltNormally()
buildRule.executeTarget("excludefiles-nested")
verifyImageBuiltNormally()
buildRule.executeTarget("excludefiles-nested-file")
verifyImageBuiltNormally()
expected.expect(BuildException.class)
buildRule.executeTarget("excludefiles-nested-no-attr")
expected.expect(BuildException.class)
buildRule.executeTarget("excludefiles-nested-both")
buildRule.executeTarget("excludefiles-both")
verifyImageBuiltNormally()
buildRule.executeTarget("ordering")
verifyImageBuiltNormally()
buildRule.executeTarget("ordering-nested")
verifyImageBuiltNormally()
buildRule.executeTarget("ordering-nested-file")
verifyImageBuiltNormally()
expected.expect(BuildException.class)
buildRule.executeTarget("ordering-nested-no-attr")
expected.expect(BuildException.class)
buildRule.executeTarget("ordering-nested-both")
buildRule.executeTarget("ordering-both")
verifyImageBuiltNormally()
buildRule.executeTarget("includeheaders")
verifyImageBuiltNormally()
newFile(image.root,"include").listFiles()
buildRule.executeTarget("includemanpages")
verifyImageBuiltNormally()
newFile(image.root,"man").listFiles()
buildRule.executeTarget("includenativecommands")
buildRule.getProject()
buildRule.getProject().getProperty("image")
image.root.exists()
image.java.exists()
Files.isDirectory(path)
Files.newDirectoryStream(path)
totalSizeOf(child)
Files.isRegularFile(path)
Files.size(path)
buildRule.executeTarget("compression")
verifyImageBuiltNormally()
buildRule.getProject()
buildRule.getProject().getProperty("compressed-image")
totalSizeOf(image.root.toPath())
image.root.toPath()
totalSizeOf(compressedImageRoot.toPath())
compressedImageRoot.toPath()
buildRule.executeTarget("compression-nested")
verifyImageBuiltNormally()
buildRule.getProject()
buildRule.getProject().getProperty("compressed-image")
totalSizeOf(image.root.toPath())
image.root.toPath()
totalSizeOf(compressedImageRoot.toPath())
compressedImageRoot.toPath()
expected.expect(BuildException.class)
buildRule.executeTarget("compression-nested-no-attr")
expected.expect(BuildException.class)
buildRule.executeTarget("compression-both")
buildRule.executeTarget("endian")
verifyImageBuiltNormally()
buildRule.executeTarget("vm")
verifyImageBuiltNormally()
buildRule.executeTarget("releaseinfo-file")
verifyImageBuiltNormally()
Files.newBufferedReader(release.toPath())
release.toPath()
reader.lines()
reader.lines().anyMatch(l->l.equals("test=true"))
l.equals("test=true")
buildRule.executeTarget("releaseinfo-delete")
verifyImageBuiltNormally()
Files.newBufferedReader(release.toPath())
release.toPath()
reader.lines()
reader.lines().anyMatch(l->l.startsWith("test="))
l.startsWith("test=")
buildRule.executeTarget("releaseinfo-nested-delete")
verifyImageBuiltNormally()
Files.newBufferedReader(release.toPath())
release.toPath()
reader.lines()
reader.lines().anyMatch(l->l.startsWith("test="))
l.startsWith("test=")
expected.expect(BuildException.class)
buildRule.executeTarget("releaseinfo-nested-delete-no-key")
buildRule.executeTarget("releaseinfo-nested-delete-both")
verifyImageBuiltNormally()
Files.newBufferedReader(release.toPath())
release.toPath()
reader.lines()
reader.lines().noneMatch(l->l.startsWith("test=")||l.startsWith("foo="))
l.startsWith("test=")
l.startsWith("foo=")
buildRule.executeTarget("releaseinfo-add-file")
verifyImageBuiltNormally()
reader.lines()
reader.lines().anyMatch(l->l.equals("test=s\u00ed"))
l.equals("test=s\u00ed")
buildRule.executeTarget("releaseinfo-add-file-charset")
verifyImageBuiltNormally()
reader.lines()
reader.lines().anyMatch(l->l.equals("test=s\u00ed"))
l.equals("test=s\u00ed")
buildRule.executeTarget("releaseinfo-add-key")
verifyImageBuiltNormally()
Files.newBufferedReader(release.toPath())
release.toPath()
reader.lines()
reader.lines().anyMatch(l->l.equals("test=true"))
l.equals("test=true")
expected.expect(BuildException.class)
buildRule.executeTarget("releaseinfo-add-no-value")
expected.expect(BuildException.class)
buildRule.executeTarget("releaseinfo-add-no-key")
expected.expect(BuildException.class)
buildRule.executeTarget("releaseinfo-add-file-and-key")
expected.expect(BuildException.class)
buildRule.executeTarget("releaseinfo-add-file-and-value")
buildRule.executeTarget("debug")
verifyImageBuiltNormally()
image.java.toString()
buildRule.getProject()
buildRule.getProject().getProperty("thrower.main-class")
builder.redirectInput(ProcessBuilder.Redirect.INHERIT)
builder.redirectErrorStream(true)
builder.start()
process.getInputStream()
linesReader.lines()
linesReader.lines().noneMatch(l->l.matches(".*\\([^)]*:[0-9]+\\)"))
l.matches(".*\\([^)]*:[0-9]+\\)")
process.waitFor()
buildRule.executeTarget("dedup")
verifyImageBuiltNormally()
buildRule.getProject()
buildRule.getProject().getProperty("hello.mod")
buildRule.getProject()
buildRule.getProject().getProperty("smile.mod")
Assume.assumeFalse("Checking that this operating system"+" supports symbolic links as a means of license de-duplication.",System.getProperty("os.name").contains("Windows"))
System.getProperty("os.name")
System.getProperty("os.name").contains("Windows")
image.root.toPath()
image.root.toPath().resolve("legal")
legal.resolve(helloModuleName)
legal.resolve(helloModuleName).resolve("USELESSLICENSE")
legal.resolve(smileModuleName)
legal.resolve(smileModuleName).resolve("USELESSLICENSE")
Files.isSymbolicLink(license)
buildRule.executeTarget("ignoresigning")
verifyImageBuiltNormally()
expected.expect(BuildException.class)
buildRule.executeTarget("dedup-identical")
buildRule.executeTarget("bindservices")
verifyImageBuiltNormally()
buildRule.getProject()
buildRule.getProject().getProperty("inc.main-class")
image.java.toString()
builder.redirectInput(ProcessBuilder.Redirect.INHERIT)
builder.redirectError(ProcessBuilder.Redirect.INHERIT)
builder.start()
process.getInputStream()
linesReader.lines()
linesReader.lines().count()
process.waitFor()
buildRule.getProject()
buildRule.getProject().getProperty("image2")
image.root.exists()
image.java.exists()
image.java.toString()
builder.redirectInput(ProcessBuilder.Redirect.INHERIT)
builder.redirectError(ProcessBuilder.Redirect.INHERIT)
builder.start()
process.getInputStream()
linesReader.lines()
linesReader.lines().count()
process.waitFor()
ToolProvider.findFirst("jlink")
ToolProvider.findFirst("jlink").orElseThrow(()->newRuntimeException("jlink tool not found in JDK."))
jlink.run(out,err,args)
stdout.toString()
createLiaison()
getClass()
getClass().getResource(name)
FILE_UTILS.fromURI(url.toExternalForm())
url.toExternalForm()
getFile("/taskdefs/optional/xsltliaison-in.xsl")
liaison.setStylesheet(xsl)
liaison.addParam("param","value")
getFile("/taskdefs/optional/xsltliaison-in.xml")
testFolder.newFile("xsltliaison.tmp")
liaison.transform(in,out)
getFile("/taskdefs/optional/xsltliaison-encoding-in.xsl")
liaison.setStylesheet(xsl)
getFile("/taskdefs/optional/xsltliaison-encoding-in.xml")
testFolder.newFile("xsltliaison-encoding.tmp")
liaison.transform(in,out)
parseXML(out)
doc.getDocumentElement()
doc.getDocumentElement().getNodeName()
doc.getDocumentElement()
doc.getDocumentElement().getFirstChild()
doc.getDocumentElement().getFirstChild().getNodeName()
doc.getDocumentElement()
doc.getDocumentElement().getFirstChild()
doc.getDocumentElement().getFirstChild().getFirstChild()
doc.getDocumentElement().getFirstChild().getFirstChild().getNodeValue()
DocumentBuilderFactory.newInstance()
dbfactory.newDocumentBuilder()
dbuilder.parse(file)
buildRule.configureProject("src/etc/testcases/taskdefs/optional/antlr/antlr.xml")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.executeTarget("test4")
buildRule.executeTarget("test5")
buildRule.executeTarget("test6")
buildRule.executeTarget("test7")
buildRule.executeTarget("test8")
buildRule.executeTarget("test9")
buildRule.executeTarget("test10")
buildRule.getProject()
buildRule.getProject().getProperty("output")
outputDirectory.list(newHTMLFilter())
buildRule.executeTarget("test11")
buildRule.executeTarget("test12")
buildRule.executeTarget("test13")
buildRule.executeTarget("test9")
buildRule.getFullLog()
not(containsString("Skipped grammar file."))
containsString("Skipped grammar file.")
buildRule.executeTarget("noRecompile")
buildRule.getFullLog()
containsString("Skipped grammar file.")
buildRule.executeTarget("test9")
buildRule.getFullLog()
not(containsString("Skipped grammar file."))
containsString("Skipped grammar file.")
FileUtilities.rollbackTimestamps(buildRule.getOutputDir(),5)
buildRule.getOutputDir()
buildRule.executeTarget("normalRecompile")
buildRule.getFullLog()
not(containsString("Skipped grammar file."))
containsString("Skipped grammar file.")
buildRule.executeTarget("test9")
buildRule.getFullLog()
not(containsString("Skipped grammar file."))
containsString("Skipped grammar file.")
FileUtilities.rollbackTimestamps(buildRule.getOutputDir(),5)
buildRule.getOutputDir()
buildRule.executeTarget("supergrammarChangeRecompile")
buildRule.getFullLog()
not(containsString("Skipped grammar file."))
containsString("Skipped grammar file.")
name.endsWith("html")
buildRule.configureProject("src/etc/testcases/taskdefs/optional/script.xml")
buildRule.executeTarget("useBeanshell")
buildRule.getLog()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/echoproperties.xml")
buildRule.getProject()
buildRule.getProject().setProperty("test.property",TEST_VALUE)
buildRule.executeTarget("cleanup")
buildRule.executeTarget("testEchoToLog")
buildRule.getLog()
containsString("test.property="+TEST_VALUE)
buildRule.executeTarget("testEchoWithEmptyPrefixToLog")
buildRule.getLog()
containsString("test.property="+TEST_VALUE)
thrown.expect(BuildException.class)
thrown.expectMessage("srcfile is a directory!")
buildRule.executeTarget("testReadBadFile")
buildRule.executeTarget("testReadBadFileNoFail")
buildRule.getLog()
containsString("srcfile is a directory!")
thrown.expect(BuildException.class)
thrown.expectMessage("destfile is a directory!")
buildRule.executeTarget("testEchoToBadFile")
buildRule.executeTarget("testEchoToBadFileNoFail")
buildRule.getLog()
containsString("destfile is a directory!")
buildRule.executeTarget("testEchoToGoodFile")
buildRule.executeTarget("testEchoToGoodFileXml")
buildRule.getProject()
buildRule.getProject().getBaseDir()
br.lines()
br.lines().anyMatch(line->line.contains("<property name=\"test.property\" value=\""+TEST_VALUE+"\" />"))
line.contains("<property name=\"test.property\" value=\""+TEST_VALUE+"\" />")
buildRule.executeTarget("testEchoToGoodFileFail")
buildRule.executeTarget("testEchoToGoodFileNoFail")
testEchoPrefixVarious("testEchoPrefix")
testEchoPrefixVarious("testEchoPrefixAsPropertyset")
testEchoPrefixVarious("testEchoPrefixAsNegatedPropertyset")
testEchoPrefixVarious("testEchoPrefixAsDoublyNegatedPropertyset")
thrown.expect(BuildException.class)
thrown.expectMessage("Please specify either prefix or regex, but not both")
buildRule.executeTarget("testWithPrefixAndRegex")
buildRule.executeTarget("testEchoWithEmptyPrefixToLog")
buildRule.getLog()
containsString("test.property="+TEST_VALUE)
assumeTrue("Test skipped because no regexp matcher is present.",RegexpMatcherFactory.regexpMatcherPresent(buildRule.getProject()))
RegexpMatcherFactory.regexpMatcherPresent(buildRule.getProject())
buildRule.getProject()
buildRule.executeTarget("testWithRegex")
buildRule.getFullLog()
containsString("ant.version=")
buildRule.executeTarget(target)
loadPropFile(PREFIX_OUTFILE)
props.getProperty("a.set")
props.getProperty("b.set")
buildRule.getProject()
buildRule.getProject().getBaseDir()
f.getAbsolutePath()
f.exists()
props.load(in)
loadPropFile(GOOD_OUTFILE)
props.list(System.out)
props.getProperty("test.property")
buildRule.configureProject("src/etc/testcases/taskdefs/optional/javah/build.xml")
buildRule.executeTarget("tearDown")
assumeFalse(JavaEnvUtils.isAtLeastJavaVersion("10"))
JavaEnvUtils.isAtLeastJavaVersion("10")
buildRule.executeTarget("simple-compile")
buildRule.getProject()
buildRule.getProject().getProperty("output")
newFile(buildRule.getProject().getProperty("output"),"org_example_Foo.h").exists()
assumeFalse(JavaEnvUtils.isAtLeastJavaVersion("10"))
JavaEnvUtils.isAtLeastJavaVersion("10")
buildRule.executeTarget("test-fileset")
buildRule.getProject()
buildRule.getProject().getProperty("output")
newFile(buildRule.getProject().getProperty("output"),"org_example_Foo.h").exists()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/jspc.xml")
executeJspCompile("testSimple","simple_jsp.java")
executeJspCompile("testUriroot","uriroot_jsp.java")
executeJspCompile("testXml","xml_jsp.java")
executeJspCompile("testKeyword","default_jsp.java")
executeJspCompile("testInvalidClassname","_1nvalid_0002dclassname_jsp.java")
thrown.expect(BuildException.class)
thrown.expectMessage("Java returned: 9")
buildRule.executeTarget("testNoTld")
buildRule.executeTarget("testNotAJspFile")
buildRule.executeTarget("testWebapp")
buildRule.executeTarget(target)
getOutputFile(filename)
file.exists()
file.length()
buildRule.getProject()
buildRule.getProject().getProperty("output")
JspCompilerAdapterFactory.getCompiler("jasper",null,null)
adapter.createMangler()
instanceOf(JspNameMangler.class)
JspCompilerAdapterFactory.getCompiler("jasper41",null,null)
adapter.createMangler()
instanceOf(Jasper41Mangler.class)
mangler.mapJspToJavaName(newFile(filename))
buildRule.configureProject("src/etc/testcases/taskdefs/optional/native2ascii/build.xml")
buildRule.executeTarget("tearDown")
buildRule.executeTarget("testIso8859-1")
buildRule.getProject()
buildRule.getProject().resolveFile("expected/iso8859-1.test")
buildRule.getProject()
buildRule.getProject().getProperty("output")
FileUtils.getFileUtils()
FileUtils.getFileUtils().contentEquals(in,out,true)
buildRule.configureProject(projectFilePath)
buildRule.executeTarget("setUp")
initTestPropFile()
initBuildPropFile()
buildRule.configureProject(projectFilePath)
buildRule.getProject()
buildRule.getProject().setProperty(valueDoesNotGetOverwrittenPropertyFileKey,valueDoesNotGetOverwrittenPropertyFile)
pf.setProject(buildRule.getProject())
buildRule.getProject()
pf.setFile(file)
file.exists()
pf.execute()
file.exists()
file.delete()
getTestProperties()
beforeUpdate.getProperty(FNAME_KEY)
beforeUpdate.getProperty(LNAME_KEY)
beforeUpdate.getProperty(EMAIL_KEY)
beforeUpdate.getProperty(PHONE_KEY)
beforeUpdate.getProperty(AGE_KEY)
beforeUpdate.getProperty(DATE_KEY)
buildRule.executeTarget("update-existing-properties")
getTestProperties()
afterUpdate.getProperty(FNAME_KEY)
afterUpdate.getProperty(LNAME_KEY)
afterUpdate.getProperty(EMAIL_KEY)
afterUpdate.getProperty(PHONE_KEY)
afterUpdate.getProperty(AGE_KEY)
afterUpdate.getProperty(DATE_KEY)
getTestProperties()
beforeUpdate.getProperty(FNAME_KEY)
beforeUpdate.getProperty(LNAME_KEY)
buildRule.executeTarget("delete-properties")
getTestProperties()
afterUpdate.getProperty(LNAME_KEY)
afterUpdate.getProperty(FNAME_KEY)
buildRule.executeTarget("exercise")
buildRule.getProject()
buildRule.getProject().getProperty("int.with.default")
buildRule.getProject()
buildRule.getProject().getProperty("int.without.default")
buildRule.getProject()
buildRule.getProject().getProperty("string.with.default")
buildRule.getProject()
buildRule.getProject().getProperty("string.without.default")
buildRule.getProject()
buildRule.getProject().getProperty("ethans.birth")
buildRule.getProject()
buildRule.getProject().getProperty("first.birthday")
buildRule.getProject()
buildRule.getProject().getProperty("olderThanAWeek")
buildRule.getProject()
buildRule.getProject().getProperty("existing.prop")
buildRule.getProject()
buildRule.getProject().getProperty("int.without.value")
buildRule.executeTarget("bugDemo1")
buildRule.executeTarget("bugDemo2")
buildRule.getProject()
buildRule.getProject().getProperty("foo")
pf.setProject(buildRule.getProject())
buildRule.getProject()
pf.setFile(newFile(buildRule.getOutputDir(),testPropsFilePath))
buildRule.getOutputDir()
pf.createEntry()
entry.setKey("date")
entry.setValue(String.valueOf(delta))
String.valueOf(delta)
type.setValue("date")
entry.setType(type)
entry.setPattern("yyyy/MM/dd")
operation.setValue("+")
entry.setOperation(operation)
pf.execute()
getTestProperties()
LocalDate.now()
LocalDate.now().plusDays(delta)
String.format("%d/%02d/%02d",currentDate.getYear(),currentDate.getMonthValue(),currentDate.getDayOfMonth())
currentDate.getYear()
currentDate.getMonthValue()
currentDate.getDayOfMonth()
props.getProperty("date")
buildRule.getOutputDir()
testProps.load(propsFile)
propsFile.close()
testProps.put(FNAME_KEY,FNAME)
testProps.put(LNAME_KEY,LNAME)
testProps.put(EMAIL_KEY,EMAIL)
testProps.put("existing.prop","37")
buildRule.getOutputDir()
testProps.store(fos,"defaults")
fos.close()
buildProps.put(testPropertyFileKey,testPropertyFile)
buildProps.put(FNAME_KEY,NEW_FNAME)
buildProps.put(LNAME_KEY,NEW_LNAME)
buildProps.put(EMAIL_KEY,NEW_EMAIL)
buildProps.put(PHONE_KEY,NEW_PHONE)
buildProps.put(AGE_KEY,NEW_AGE)
buildProps.put(DATE_KEY,NEW_DATE)
buildRule.getOutputDir()
buildProps.store(fos,null)
fos.close()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/pvcs.xml")
buildRule.executeTarget("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.executeTarget("test4")
buildRule.executeTarget("test5")
buildRule.executeTarget("test6")
buildRule.configureProject("src/etc/testcases/taskdefs/optional/replaceregexp.xml")
buildRule.getProject()
buildRule.getProject().getBaseDir()
original.load(propsFile)
original.get("OldAbc")
buildRule.executeTarget("testReplace")
buildRule.getOutputDir()
after.load(propsFile)
after.get("OldAbc")
after.get("NewProp")
buildRule.executeTarget("touchDirectory")
buildRule.getOutputDir()
myFile.lastModified()
buildRule.executeTarget("testDirectoryDateDoesNotChange")
myFile.lastModified()
buildRule.executeTarget("testDontAddNewline1")
FileUtilities.getFileContents(newFile(buildRule.getOutputDir(),"test.properties"))
buildRule.getOutputDir()
FileUtilities.getFileContents(newFile(buildRule.getProject().getBaseDir(),"replaceregexp2.result.properties"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
buildRule.executeTarget("testDontAddNewline2")
FileUtilities.getFileContents(newFile(buildRule.getOutputDir(),"test.properties"))
buildRule.getOutputDir()
FileUtilities.getFileContents(newFile(buildRule.getProject().getBaseDir(),"replaceregexp2.result.properties"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
buildRule.executeTarget("lastModifiedSetup")
buildRule.getOutputDir()
assumeTrue(testFile.setLastModified(testFile.lastModified()-FileUtils.getFileUtils().getFileTimestampGranularity()*3))
testFile.setLastModified(testFile.lastModified()-FileUtils.getFileUtils().getFileTimestampGranularity()*3)
testFile.lastModified()
FileUtils.getFileUtils()
FileUtils.getFileUtils().getFileTimestampGranularity()
testFile.lastModified()
buildRule.executeTarget("testNoPreserve")
testFile.lastModified()
buildRule.executeTarget("lastModifiedSetup")
buildRule.getOutputDir()
assumeTrue(testFile.setLastModified(testFile.lastModified()-FileUtils.getFileUtils().getFileTimestampGranularity()*3))
testFile.setLastModified(testFile.lastModified()-FileUtils.getFileUtils().getFileTimestampGranularity()*3)
testFile.lastModified()
FileUtils.getFileUtils()
FileUtils.getFileUtils().getFileTimestampGranularity()
testFile.lastModified()
buildRule.executeTarget("testPreserve")
testFile.lastModified()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/script_reference.xml")
buildRule.executeTarget("script")
buildRule.configureProject("src/etc/testcases/taskdefs/optional/script.xml")
buildRule.executeTarget("example1")
buildRule.getLog()
buildRule.getLog().indexOf("1")
buildRule.getLog()
buildRule.getLog().indexOf("4",index)
buildRule.getLog()
buildRule.getLog().indexOf("9",index)
buildRule.getLog()
buildRule.getLog().indexOf("16",index)
buildRule.getLog()
buildRule.getLog().indexOf("25",index)
buildRule.getLog()
buildRule.getLog().indexOf("36",index)
buildRule.getLog()
buildRule.getLog().indexOf("49",index)
buildRule.getLog()
buildRule.getLog().indexOf("64",index)
buildRule.getLog()
buildRule.getLog().indexOf("81",index)
buildRule.getLog()
buildRule.getLog().indexOf("100",index)
buildRule.getProject()
buildRule.getProject().setProperty("useSrcAndEncoding.reader.encoding","UTF-8")
buildRule.executeTarget("useSrcAndEncoding")
thrown.expect(BuildException.class)
thrown.expectMessage("expected <eacute [\u00e9]> but was <eacute [\u00c3\u00a9]>")
buildRule.getProject()
buildRule.getProject().setProperty("useSrcAndEncoding.reader.encoding","ISO-8859-1")
buildRule.executeTarget("useSrcAndEncoding")
thrown.expect(BuildException.class)
thrown.expectMessage("' failed with exit code 2")
rpm.setProject(newProject())
rpm.setFailOnError(true)
rpm.execute()
rpm.execute()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/schemavalidate.xml")
buildRule.executeTarget("testNoNamespace")
buildRule.executeTarget("testNSMapping")
thrown.expect(BuildException.class)
thrown.expectMessage(SchemaValidate.SchemaLocation.ERROR_NO_URI)
buildRule.executeTarget("testNoEmptySchemaNamespace")
thrown.expect(BuildException.class)
thrown.expectMessage(SchemaValidate.SchemaLocation.ERROR_NO_LOCATION)
buildRule.executeTarget("testNoEmptySchemaLocation")
thrown.expect(BuildException.class)
thrown.expectMessage(SchemaValidate.SchemaLocation.ERROR_NO_FILE)
buildRule.executeTarget("testNoFile")
thrown.expect(BuildException.class)
thrown.expectMessage(SchemaValidate.SchemaLocation.ERROR_TWO_LOCATIONS)
buildRule.executeTarget("testNoDoubleSchemaLocation")
thrown.expect(BuildException.class)
thrown.expectMessage(SchemaValidate.ERROR_DUPLICATE_SCHEMA)
buildRule.executeTarget("testNoDuplicateSchema")
buildRule.executeTarget("testEqualsSchemasOK")
buildRule.executeTarget("testFileset")
f.exists()
f.delete()
l.setLogger(this)
name.startsWith("META-INF/services/")
super.getResourceAsStream(name)
System.setSecurityManager(newSecurityManager(){publicvoidcheckPermission(Permissionperm){}})
liaison.transform(in,out)
out.delete()
Thread.currentThread()
Thread.currentThread().setContextClassLoader(orig)
System.setSecurityManager(null)
liaison.transform(in,out)
out.delete()
Thread.currentThread()
Thread.currentThread().setContextClassLoader(orig)
System.setSecurityManager(null)
liaison.transform(in,out)
out.delete()
Thread.currentThread()
Thread.currentThread().setContextClassLoader(orig)
System.setSecurityManager(null)
liaison.transform(in,out)
out.delete()
System.setSecurityManager(null)
getFile("/taskdefs/optional/xsltliaison-in.xsl")
liaison.setStylesheet(xsl)
liaison.addParam("param","value")
getFile("/taskdefs/optional/xsltliaison-in.xml")
liaison.transform(in,out)
out.delete()
JAXPUtils.getSystemId(file)
startsWith("file:/")
not(startsWith("file:////"))
startsWith("file:////")
buildRule.configureProject("src/etc/testcases/taskdefs/optional/xmlvalidate.xml")
buildRule.executeTarget("xmlcatalogfiles")
buildRule.executeTarget("xmlcatalogpath")
buildRule.configureProject("src/etc/testcases/taskdefs/optional/xmlvalidate.xml")
buildRule.executeTarget("testValidate")
buildRule.executeTarget("testDeepValidate")
buildRule.executeTarget("xmlcatalog")
buildRule.executeTarget("xmlcatalogViaRefid")
buildRule.executeTarget("xmlcatalogfiles-override")
buildRule.executeTarget("xmlcatalogpath-override")
buildRule.executeTarget("xmlcatalognested")
buildRule.executeTarget("testSchemaGood")
thrown.expect(BuildException.class)
thrown.expectMessage("not a valid XML document")
buildRule.executeTarget("testSchemaBad")
buildRule.executeTarget("testIso2022Jp")
buildRule.executeTarget("testUtf8")
buildRule.executeTarget("testProperty.validXML")
buildRule.executeTarget("testProperty.invalidXML")
buildRule.configureProject("src/etc/testcases/taskdefs/optional/xslt.xml")
buildRule.executeTarget("testCatchNoDtd")
buildRule.executeTarget("testCatalog")
buildRule.executeTarget("testOutputProperty")
buildRule.executeTarget("testXMLWithEntitiesInNonAsciiPath")
buildRule.executeTarget("testStyleSheetWithInclude")
buildRule.getLog()
not(containsString("java.io.FileNotFoundException"))
containsString("java.io.FileNotFoundException")
buildRule.configureProject("src/etc/testcases/taskdefs/optional/depend/depend.xml")
buildRule.executeTarget("src1setup")
buildRule.executeTarget("compile")
FileUtilities.rollbackTimestamps(newFile(buildRule.getProject().getProperty("tempsrc.dir")),5)
buildRule.getProject()
buildRule.getProject().getProperty("tempsrc.dir")
FileUtilities.rollbackTimestamps(newFile(buildRule.getProject().getProperty("classes.dir")),5)
buildRule.getProject()
buildRule.getProject().getProperty("classes.dir")
buildRule.executeTarget("testdirect")
getResultFiles()
files.size()
hasKey("A.class")
hasKey("D.class")
buildRule.executeTarget("src1setup")
buildRule.executeTarget("compile")
FileUtilities.rollbackTimestamps(newFile(buildRule.getProject().getProperty("tempsrc.dir")),5)
buildRule.getProject()
buildRule.getProject().getProperty("tempsrc.dir")
FileUtilities.rollbackTimestamps(newFile(buildRule.getProject().getProperty("classes.dir")),5)
buildRule.getProject()
buildRule.getProject().getProperty("classes.dir")
buildRule.executeTarget("testclosure")
getResultFiles()
files.size()
hasKey("D.class")
buildRule.executeTarget("src2setup")
buildRule.executeTarget("compile")
FileUtilities.rollbackTimestamps(newFile(buildRule.getProject().getProperty("tempsrc.dir")),5)
buildRule.getProject()
buildRule.getProject().getProperty("tempsrc.dir")
FileUtilities.rollbackTimestamps(newFile(buildRule.getProject().getProperty("classes.dir")),5)
buildRule.getProject()
buildRule.getProject().getProperty("classes.dir")
buildRule.executeTarget("testinner")
getResultFiles()
getResultFiles().size()
buildRule.executeTarget("src3setup")
buildRule.executeTarget("compile")
FileUtilities.rollbackTimestamps(newFile(buildRule.getProject().getProperty("tempsrc.dir")),5)
buildRule.getProject()
buildRule.getProject().getProperty("tempsrc.dir")
FileUtilities.rollbackTimestamps(newFile(buildRule.getProject().getProperty("classes.dir")),5)
buildRule.getProject()
buildRule.getProject().getProperty("classes.dir")
buildRule.executeTarget("testinnerinner")
getResultFiles()
getResultFiles().size()
thrown.expect(BuildException.class)
thrown.expectMessage("srcdir attribute must be set")
buildRule.executeTarget("testnosource")
thrown.expect(BuildException.class)
thrown.expectMessage("srcdir attribute must be non-empty")
buildRule.executeTarget("testemptysource")
buildRule.getProject()
buildRule.getProject().getReference(RESULT_FILESET)
resultFileSet.getDirectoryScanner(buildRule.getProject())
buildRule.getProject()
Arrays.stream(scanner.getIncludedFiles())
scanner.getIncludedFiles()
Arrays.stream(scanner.getIncludedFiles()).collect(Collectors.toMap(file->file,file->file,(a,b)->b,Hashtable::new))
Collectors.toMap(file->file,file->file,(a,b)->b,Hashtable::new)
buildRule.executeTarget("testinnerclosure")
getResultFiles()
getResultFiles().size()
buildRule.executeTarget("testcache")
buildRule.executeTarget("src5setup")
buildRule.executeTarget("compile")
FileUtilities.rollbackTimestamps(newFile(buildRule.getProject().getProperty("tempsrc.dir")),5)
buildRule.getProject()
buildRule.getProject().getProperty("tempsrc.dir")
FileUtilities.rollbackTimestamps(newFile(buildRule.getProject().getProperty("classes.dir")),5)
buildRule.getProject()
buildRule.getProject().getProperty("classes.dir")
buildRule.executeTarget("testnonpublic")
buildRule.getLog()
both(containsString("The class APrivate in file"))
containsString("The class APrivate in file")
both(containsString("The class APrivate in file")).and(containsString("but has not been deleted because its source file could not be determined"))
containsString("but has not been deleted because its source file could not be determined")
atLeastJava9.setAtLeast("9")
Assume.assumeTrue("Skipping test execution since Java version is lesser than 9",atLeastJava9.eval())
atLeastJava9.eval()
buildRule.executeTarget("testmoduleinfo")
buildRule.configureProject(TASKDEFS_DIR+"/translate.xml")
buildRule.executeTarget("test1")
compareFiles(newFile(buildRule.getProject().getBaseDir(),"expected/de/template.txt"),newFile(buildRule.getOutputDir(),"de/template.txt"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
buildRule.getOutputDir()
file1.exists()
file2.exists()
file1.length()
file2.length()
fis1.read(buffer1)
fis2.read(buffer2)
buildRule.configureProject("src/etc/testcases/taskdefs/optional/image/imageio.xml")
buildRule.executeTarget("testEchoToLog")
buildRule.getLog()
containsString("Processing File")
buildRule.executeTarget("testSimpleScale")
buildRule.getLog()
containsString("Processing File")
buildRule.getOutputDir()
f.getAbsolutePath()
f.exists()
buildRule.executeTarget("testSimpleScale")
buildRule.getLog()
containsString("Processing File")
buildRule.getOutputDir()
assumeTrue("Could not change file modification date",f.setLastModified(f.lastModified()-FILE_UTILS.getFileTimestampGranularity()*2))
f.setLastModified(f.lastModified()-FILE_UTILS.getFileTimestampGranularity()*2)
f.lastModified()
FILE_UTILS.getFileTimestampGranularity()
f.lastModified()
buildRule.executeTarget("testOverwriteTrue")
buildRule.getLog()
containsString("Processing File")
buildRule.getOutputDir()
f.lastModified()
buildRule.executeTarget("testSimpleScale")
buildRule.getLog()
containsString("Processing File")
buildRule.getOutputDir()
assumeTrue("Could not change file modification date",f.setLastModified(f.lastModified()-FILE_UTILS.getFileTimestampGranularity()*2))
f.setLastModified(f.lastModified()-FILE_UTILS.getFileTimestampGranularity()*2)
f.lastModified()
FILE_UTILS.getFileTimestampGranularity()
f.lastModified()
buildRule.executeTarget("testDrawOverwriteTrue")
buildRule.getLog()
containsString("Processing File")
buildRule.getOutputDir()
f.lastModified()
buildRule.executeTarget("testSimpleScale")
buildRule.getLog()
containsString("Processing File")
buildRule.getOutputDir()
f.lastModified()
buildRule.executeTarget("testOverwriteFalse")
buildRule.getLog()
containsString("Processing File")
buildRule.getOutputDir()
f.lastModified()
buildRule.executeTarget("testSimpleScaleWithMapper")
buildRule.getLog()
containsString("Processing File")
buildRule.getOutputDir()
f.getAbsolutePath()
f.exists()
buildRule.executeTarget("testFlip")
buildRule.getFullLog()
containsString("Flipping an image")
buildRule.getOutputDir()
f.getAbsolutePath()
f.exists()
thrown.expect(BuildException.class)
thrown.expectMessage(message)
buildRule.executeTarget("testFailOnError")
buildRule.getLog()
containsString(message)
assumeFalse(JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9))
JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
buildRule.configureProject("src/etc/testcases/taskdefs/optional/image/image.xml")
buildRule.executeTarget("testEchoToLog")
buildRule.getLog()
containsString("Processing File")
buildRule.executeTarget("testSimpleScale")
buildRule.getLog()
containsString("Processing File")
buildRule.getOutputDir()
f.getAbsolutePath()
f.exists()
buildRule.executeTarget("testSimpleScale")
buildRule.getLog()
containsString("Processing File")
buildRule.getOutputDir()
assumeTrue("Could not change file modification date",f.setLastModified(f.lastModified()-FILE_UTILS.getFileTimestampGranularity()*2))
f.setLastModified(f.lastModified()-FILE_UTILS.getFileTimestampGranularity()*2)
f.lastModified()
FILE_UTILS.getFileTimestampGranularity()
f.lastModified()
buildRule.executeTarget("testOverwriteTrue")
buildRule.getLog()
containsString("Processing File")
buildRule.getOutputDir()
f.lastModified()
buildRule.executeTarget("testSimpleScale")
buildRule.getLog()
containsString("Processing File")
buildRule.getOutputDir()
f.lastModified()
buildRule.executeTarget("testOverwriteFalse")
buildRule.getLog()
containsString("Processing File")
buildRule.getOutputDir()
f.lastModified()
buildRule.executeTarget("testSimpleScaleWithMapper")
buildRule.getLog()
containsString("Processing File")
buildRule.getOutputDir()
f.getAbsolutePath()
f.exists()
thrown.expect(RuntimeException.class)
thrown.expectMessage(message)
buildRule.executeTarget("testFailOnError")
buildRule.getLog()
containsString(message)
System.getProperty("build.tests.value")
buildRule.configureProject("src/etc/testcases/taskdefs/optional/jdepend/jdepend.xml")
buildRule.executeTarget("simple")
buildRule.getOutput()
containsString("Package: org.apache.tools.ant.util.facade")
buildRule.executeTarget("xml")
buildRule.getOutput()
containsString("<DependsUpon>")
buildRule.executeTarget("fork")
buildRule.getLog()
containsString("Package: org.apache.tools.ant.util.facade")
buildRule.executeTarget("fork-xml")
buildRule.getLog()
containsString("<DependsUpon>")
buildRule.executeTarget("fork-timeout")
buildRule.getLog()
containsString("JDepend FAILED - Timed out")
buildRule.executeTarget("fork-timeout-not")
buildRule.getLog()
containsString("Package: org.apache.tools.ant.util.facade")
Arrays.asList(null,","," ,",", "," , ",",a"," ,a","  ,a","  , a","  ,a  ","  ,a  ,","ab,,cd","ab, ,cd","ab,  ,cd","ab,  ,cd,",",ab,  ,cd,","1","1a","1ab","1abc","1abc d","1abc de","1abc def","1abc def,",",1abc def")
JUnitTest.parseTestMethodNamesList(argument)
Arrays.asList(null,","," ,",", "," , ",",a"," ,a","  ,a","  , a","  ,a  ","  ,a  ,","ab,,cd","ab, ,cd","ab,  ,cd","ab,  ,cd,",",ab,  ,cd,","1","1a","1ab","1abc","1abc d","1abc de","1abc def","1abc def,",",1abc def")
JUnitTest.parseTestMethodNamesList(argument)
JAXPUtils.getDocumentBuilder()
this.getClass()
this.getClass().getClassLoader()
this.getClass().getClassLoader().getResourceAsStream("taskdefs/optional/junit/matches.xml")
db.parse(is)
DOMUtil.listChildNodes(doc.getDocumentElement(),newFooNodeFilter(),true)
doc.getDocumentElement()
nl.getLength()
node.getNodeName()
node.getNodeName().equals("foo")
Thread.currentThread()
Thread.currentThread().getContextClassLoader()
getClass()
getClass().getClassLoader()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/junitreport.xml")
buildRule.executeTarget("reports1")
buildRule.getProject()
buildRule.getProject().resolveFile("junitreport/test/html/junit-noframes.html")
buildRule.getProject().resolveFile("junitreport/test/html/junit-noframes.html").exists()
commonIndexFileAssertions()
buildRule.getOutputDir()
commonIndexFileAssertions(reportFile)
buildRule.getOutputDir()
commonIndexFileAssertions(reportFile)
buildRule.executeTarget("testEmptyFile")
buildRule.getLog()
containsString(XMLResultAggregator.WARNING_EMPTY_FILE)
buildRule.executeTarget("testIncompleteFile")
buildRule.getLog()
containsString(XMLResultAggregator.WARNING_IS_POSSIBLY_CORRUPTED)
buildRule.executeTarget("testWrongElement")
buildRule.getLog()
containsString(XMLResultAggregator.WARNING_INVALID_ROOT_ELEMENT)
buildRule.executeTarget("testStackTraceLineBreaks")
buildRule.getOutputDir()
FileUtils.readFully(r)
containsString("junit.framework.AssertionFailedError: DOEG<br>")
containsString("cur['line.separator'] = '\\r\\n';")
buildRule.executeTarget("testSpecialSignsInSrcPath")
commonIndexFileAssertions()
buildRule.executeTarget("testSpecialSignsInHtmlPath")
buildRule.getOutputDir()
commonIndexFileAssertions(reportFile)
buildRule.executeTarget("testWithStyleFromDir")
commonIndexFileAssertions()
buildRule.executeTarget("testNoFrames")
buildRule.getOutputDir()
commonIndexFileAssertions(reportFile)
buildRule.executeTarget("testWithStyleFromDirAndXslImport")
commonIndexFileAssertions()
buildRule.executeTarget("testWithStyleFromClasspath")
commonIndexFileAssertions()
buildRule.executeTarget("testWithParams")
buildRule.getLog()
containsString("key1=value1,key2=value2")
commonIndexFileAssertions()
buildRule.executeTarget("testWithStyleFromClasspath")
commonIndexFileAssertions()
System.setSecurityManager(null)
buildRule.executeTarget("testWithStyleFromClasspath")
commonIndexFileAssertions()
System.setSecurityManager(null)
name.startsWith("META-INF/services/")
super.getResourceAsStream(name)
System.setSecurityManager(newSecurityManager(){publicvoidcheckPermission(Permissionperm){}})
buildRule.executeTarget("testWithStyleFromClasspath")
commonIndexFileAssertions()
System.setSecurityManager(null)
buildRule.executeTarget("testWithStyleFromClasspath")
commonIndexFileAssertions()
System.setSecurityManager(null)
Thread.currentThread()
Thread.currentThread().setContextClassLoader(orig)
buildRule.configureProject("src/etc/testcases/taskdefs/optional/junit.xml")
buildRule.executeTarget("crash")
buildRule.getProject()
buildRule.getProject().getProperty("crashed")
buildRule.executeTarget("nocrash")
buildRule.getProject()
buildRule.getProject().getProperty("crashed")
buildRule.executeTarget("timeout")
buildRule.getProject()
buildRule.getProject().getProperty("timeout")
buildRule.executeTarget("notimeout")
buildRule.getProject()
buildRule.getProject().getProperty("timeout")
buildRule.executeTarget("capture")
buildRule.getLog()
buildRule.getFullLog()
buildRule.getProject()
buildRule.getProject().setProperty("fork","true")
testNonForkedCapture()
buildRule.getOutput()
buildRule.getError()
JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_1_5)
Class.forName("junit.framework.JUnit4TestAdapter")
assumeTrue("Skipping test since it fails with JUnit 4",clazz==null)
buildRule.getOutputDir()
buildRule.getOutputDir()
testDir.getAbsolutePath()
testDir.exists()
collectorFile.getAbsolutePath()
collectorFile.exists()
buildRule.executeTarget("failureRecorder.prepare")
testDir.getAbsolutePath()
testDir.exists()
(newFile(testDir,"A.class")).exists()
collectorFile.getAbsolutePath()
collectorFile.exists()
buildRule.executeTarget("failureRecorder.runtest")
collectorFile.getAbsolutePath()
collectorFile.exists()
buildRule.executeTarget("A.test01")
buildRule.getOutput()
containsString("1st run: should run A.test01")
buildRule.executeTarget("B.test05")
buildRule.getOutput()
containsString("1st run: should run B.test05")
buildRule.executeTarget("B.test06")
buildRule.getOutput()
containsString("1st run: should run B.test06")
buildRule.executeTarget("C.test07")
buildRule.getOutput()
containsString("1st run: should run C.test07")
buildRule.executeTarget("C.test08")
buildRule.getOutput()
containsString("1st run: should run C.test08")
buildRule.executeTarget("C.test09")
buildRule.getOutput()
containsString("1st run: should run C.test09")
buildRule.executeTarget("A.test02")
buildRule.getOutput()
containsString("1st run: should run A.test02")
buildRule.executeTarget("A.test03")
buildRule.getOutput()
containsString("1st run: should run A.test03")
buildRule.executeTarget("B.test04")
buildRule.getOutput()
containsString("1st run: should run B.test04")
buildRule.executeTarget("D.test10")
buildRule.getOutput()
containsString("1st run: should run D.test10")
buildRule.executeTarget("failureRecorder.runtest")
collectorFile.getAbsolutePath()
collectorFile.exists()
buildRule.executeTarget("A.test01")
buildRule.getOutput()
not(containsString("2nd run: should not run A.test01"))
containsString("2nd run: should not run A.test01")
buildRule.executeTarget("B.test05")
buildRule.getOutput()
not(containsString("2nd run: should not run A.test05"))
containsString("2nd run: should not run A.test05")
buildRule.executeTarget("B.test06")
buildRule.getOutput()
not(containsString("2nd run: should not run B.test06"))
containsString("2nd run: should not run B.test06")
buildRule.executeTarget("C.test07")
buildRule.getOutput()
not(containsString("2nd run: should not run C.test07"))
containsString("2nd run: should not run C.test07")
buildRule.executeTarget("C.test08")
buildRule.getOutput()
not(containsString("2nd run: should not run C.test08"))
containsString("2nd run: should not run C.test08")
buildRule.executeTarget("C.test09")
buildRule.getOutput()
not(containsString("2nd run: should not run C.test09"))
containsString("2nd run: should not run C.test09")
buildRule.executeTarget("A.test02")
buildRule.getOutput()
containsString("2nd run: should run A.test02")
buildRule.executeTarget("A.test03")
buildRule.getOutput()
containsString("2nd run: should run A.test03")
buildRule.executeTarget("B.test04")
buildRule.getOutput()
containsString("2nd run: should run B.test04")
buildRule.executeTarget("D.test10")
buildRule.getOutput()
containsString("2nd run: should run D.test10")
buildRule.executeTarget("failureRecorder.fixing")
buildRule.executeTarget("failureRecorder.runtest")
collectorFile.getAbsolutePath()
collectorFile.exists()
buildRule.executeTarget("A.test02")
buildRule.getOutput()
containsString("3rd run: should run A.test02")
buildRule.executeTarget("A.test03")
buildRule.getOutput()
containsString("3rd run: should run A.test03")
buildRule.executeTarget("B.test04")
buildRule.getOutput()
containsString("3rd run: should run B.test04")
buildRule.executeTarget("D.test10")
buildRule.getOutput()
containsString("3rd run: should run D.test10")
buildRule.executeTarget("failureRecorder.runtest")
collectorFile.getAbsolutePath()
collectorFile.exists()
buildRule.executeTarget("B.test04")
buildRule.getOutput()
containsString("4th run: should run B.test04")
buildRule.executeTarget("D.test10")
buildRule.getOutput()
containsString("4th run: should run D.test10")
buildRule.executeTarget("testMultilineAssertsNoFork")
buildRule.getLog()
not(containsString("messaged up"))
containsString("messaged up")
buildRule.getLog()
not(containsString("crashed)"))
containsString("crashed)")
buildRule.executeTarget("testMultilineAssertsFork")
buildRule.getLog()
not(containsString("messaged up"))
containsString("messaged up")
buildRule.getLog()
not(containsString("crashed)"))
containsString("crashed)")
buildRule.executeTarget(target)
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"TEST-org.apache.tools.ant."+"taskdefs.optional.junit."+classNameFragment+"Test"+ext).exists()
not(containsString("print to System."))
containsString("print to System.")
buildRule.getOutputDir()
reader.readLine()
reader.readLine()
startsWith("Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed:")
reader.readLine()
reader.readLine()
reader.readLine()
reader.readLine()
reader.readLine()
reader.readLine()
reader.readLine()
reader.readLine()
reader.readLine()
reader.readLine()
reader.readLine()
reader.readLine()
startsWith("Testcase: testNoCrash took ")
buildRule.executeTarget("testSkippableTests")
DocumentBuilderFactory.newInstance()
dbFactory.newDocumentBuilder()
dBuilder.parse(newFile(buildRule.getOutputDir(),"TEST-org.example.junit.JUnit4Skippable.xml"))
buildRule.getOutputDir()
doc.getElementsByTagName("testcase")
doc.getElementsByTagName("testcase").getLength()
XPathFactory.newInstance()
factory.newXPath()
Integer.parseInt(xpath.compile("//testsuite/@skipped").evaluate(doc))
xpath.compile("//testsuite/@skipped")
xpath.compile("//testsuite/@skipped").evaluate(doc)
Integer.parseInt(xpath.compile("//testsuite/@errors").evaluate(doc))
xpath.compile("//testsuite/@errors")
xpath.compile("//testsuite/@errors").evaluate(doc)
Integer.parseInt(xpath.compile("//testsuite/@failures").evaluate(doc))
xpath.compile("//testsuite/@failures")
xpath.compile("//testsuite/@failures").evaluate(doc)
Integer.parseInt(xpath.compile("//testsuite/@tests").evaluate(doc))
xpath.compile("//testsuite/@tests")
xpath.compile("//testsuite/@tests").evaluate(doc)
xpath.compile("//testsuite/testcase[@name='explicitIgnoreTest']/skipped/@message")
xpath.compile("//testsuite/testcase[@name='explicitIgnoreTest']/skipped/@message").evaluate(doc)
xpath.compile("//testsuite/testcase[@name='explicitlyIgnoreTestNoMessage']/skipped")
xpath.compile("//testsuite/testcase[@name='explicitlyIgnoreTestNoMessage']/skipped").evaluate(doc,XPathConstants.NODE)
((Node)xpath.compile("//testsuite/testcase[@name='explicitlyIgnoreTestNoMessage']/skipped").evaluate(doc,XPathConstants.NODE)).getAttributes()
((Node)xpath.compile("//testsuite/testcase[@name='explicitlyIgnoreTestNoMessage']/skipped").evaluate(doc,XPathConstants.NODE)).getAttributes().getLength()
xpath.compile("//testsuite/testcase[@name='implicitlyIgnoreTest']/skipped/@message")
xpath.compile("//testsuite/testcase[@name='implicitlyIgnoreTest']/skipped/@message").evaluate(doc)
xpath.compile("//testsuite/testcase[@name='implicitlyIgnoreTestNoMessage']/skipped")
xpath.compile("//testsuite/testcase[@name='implicitlyIgnoreTestNoMessage']/skipped").evaluate(doc,XPathConstants.NODE)
buildRule.executeTarget("testTestMethods")
buildRule.executeTarget("testNonTests")
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"TEST-org.example.junit.NonTestMissed.xml").exists()
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"TEST-org.example.junit.JUnit3TestMissed.xml").exists()
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"TEST-org.example.junit.AbstractTestMissed.xml").exists()
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"TEST-org.example.junit.AbstractJUnit3TestMissed.xml").exists()
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"TEST-org.example.junit.AbstractTestNotMissed.xml").exists()
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"TEST-org.example.junit.AbstractJUnit3TestNotMissed.xml").exists()
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"TEST-org.example.junit.TestNotMissed.xml").exists()
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"TEST-org.example.junit.JUnit3TestNotMissed.xml").exists()
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"TEST-org.example.junit.TestWithSuiteNotMissed.xml").exists()
buildRule.executeTarget("testNonTestsRun")
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"TEST-org.example.junit.NonTestMissed.xml").exists()
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"TEST-org.example.junit.JUnit3NonTestMissed.xml").exists()
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"TEST-org.example.junit.TestNotMissed.xml").exists()
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"TEST-org.example.junit.JUnit3TestNotMissed.xml").exists()
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"TEST-org.example.junit.AbstractTestMissed.xml").exists()
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"TEST-org.example.junit.AbstractTestNotMissed.xml").exists()
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"TEST-org.example.junit.AbstractJUnit3TestMissed.xml").exists()
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"TEST-org.example.junit.JUnit3NonTestMissed.xml").exists()
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"TEST-org.example.junit.TestWithSuiteNotMissed.xml").exists()
project.init()
task.setProject(project)
p.setPath("modules")
task.createModulepath()
task.createModulepath().add(p)
task.addTest(newJUnitTest("org.apache.tools.ant.taskdefs.optional.junit.TestTest"))
task.execute()
project.init()
task.setProject(project)
p.setPath("modules")
task.createUpgrademodulepath()
task.createUpgrademodulepath().add(p)
task.addTest(newJUnitTest("org.apache.tools.ant.taskdefs.optional.junit.TestTest"))
task.execute()
System.getProperty("java.io.tmpdir")
String.format("%s_testJCP%d",getClass().getName(),System.currentTimeMillis()/1000)
getClass()
getClass().getName()
System.currentTimeMillis()
workDir.mkdirs()
modulesDir.mkdirs()
project.init()
project.setBaseDir(workDir)
project.addReference(MagicNames.ANT_VM_LAUNCHER_REF_ID,mockProcLauncher)
task.setDir(workDir)
task.setFork(true)
task.setProject(project)
LoaderUtils.getResourceSource(JUnitTask.class.getClassLoader(),"junit/framework/Test.class")
JUnitTask.class.getClassLoader()
cp.setPath(junit.getAbsolutePath())
junit.getAbsolutePath()
task.createClasspath()
task.createClasspath().add(cp)
mp.setPath(modulesDir.getName())
modulesDir.getName()
task.createModulepath()
task.createModulepath().add(mp)
task.addTest(newJUnitTest("org.apache.tools.ant.taskdefs.optional.junit.TestTest"))
task.execute()
"-classpath".equals(mockProcLauncher.cmd[i])
"--module-path".equals(mockProcLauncher.cmd[i])
mockProcLauncher.cmd[i].equals("--add-exports")
resExports.add(mockProcLauncher.cmd[++i])
JUnitTestRunner.class.getName()
JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])
resExports.isEmpty()
project.getProperty(MagicNames.BUILD_SYSCLASSPATH)
System.getProperty(MagicNames.BUILD_SYSCLASSPATH)
cp.toString()
mp.toString()
delete(workDir)
System.getProperty("java.io.tmpdir")
String.format("%s_testJMP%d",getClass().getName(),System.currentTimeMillis()/1000)
getClass()
getClass().getName()
System.currentTimeMillis()
workDir.mkdirs()
modulesDir.mkdirs()
project.init()
project.setBaseDir(workDir)
project.addReference(MagicNames.ANT_VM_LAUNCHER_REF_ID,mockProcLauncher)
task.setDir(workDir)
task.setFork(true)
task.setProject(project)
LoaderUtils.getResourceSource(JUnitTask.class.getClassLoader(),"junit/framework/Test.class")
JUnitTask.class.getClassLoader()
mp.add(newPath(project,junit.getAbsolutePath()))
junit.getAbsolutePath()
mp.add(newPath(project,modulesDir.getName()))
modulesDir.getName()
task.createModulepath()
task.createModulepath().add(mp)
task.addTest(newJUnitTest("org.apache.tools.ant.taskdefs.optional.junit.TestTest"))
task.execute()
"-classpath".equals(mockProcLauncher.cmd[i])
"--module-path".equals(mockProcLauncher.cmd[i])
mockProcLauncher.cmd[i].equals("--add-exports")
resExports.add(mockProcLauncher.cmd[++i])
JUnitTestRunner.class.getName()
JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])
resExports.isEmpty()
project.getProperty(MagicNames.BUILD_SYSCLASSPATH)
System.getProperty(MagicNames.BUILD_SYSCLASSPATH)
mp.toString()
delete(workDir)
LoaderUtils.classNameToResource(Project.class.getName())
Project.class.getName()
LoaderUtils.getResourceSource(Project.class.getClassLoader(),projectResourceName)
Project.class.getClassLoader()
LoaderUtils.classNameToResource(junit.framework.Test.class.getName())
junit.framework.Test.class.getName()
LoaderUtils.getResourceSource(Project.class.getClassLoader(),testResourceName)
Project.class.getClassLoader()
buildRule.getProject()
buildRule.getProject().setProperty("antclasses",antclasses.getAbsolutePath())
antclasses.getAbsolutePath()
buildRule.getProject()
buildRule.getProject().setProperty("junitjar",junitJar.getAbsolutePath())
junitJar.getAbsolutePath()
setupCheckDuplicateTest()
buildRule.executeTarget("testCheckForkedPath")
buildRule.getLog()
containsString("WARNING: multiple versions of ant detected in path for junit")
setupCheckDuplicateTest()
buildRule.getProject()
buildRule.getProject().setProperty("includeantruntime","no")
buildRule.executeTarget("testCheckForkedPath")
buildRule.getLog()
not(containsString("WARNING: multiple versions of ant detected in path for junit"))
containsString("WARNING: multiple versions of ant detected in path for junit")
f.isDirectory()
f.listFiles()
Arrays.stream(clds)
Arrays.stream(clds).forEach(this::delete)
f.delete()
Arrays.copyOf(cmd,cmd.length)
exitValue()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/junit.xml")
buildRule.getProject()
buildRule.getProject().setProperty("enableEvents","true")
buildRule.executeTarget(PASS_TEST_TARGET)
buildRule.getFullLog()
containsString(JUnitTask.TESTLISTENER_PREFIX)
buildRule.getProject()
buildRule.getProject().setProperty("enableEvents","true")
buildRule.executeTarget(PASS_TEST_TARGET)
buildRule.getLog()
not(containsString(JUnitTask.TESTLISTENER_PREFIX))
containsString(JUnitTask.TESTLISTENER_PREFIX)
buildRule.getProject()
buildRule.getProject().setProperty("enableEvents","true")
buildRule.executeTarget(PASS_TEST_TARGET)
buildRule.getFullLog()
containsString(JUnitTask.TESTLISTENER_PREFIX+"tests to run: ")
buildRule.getProject()
buildRule.getProject().setProperty("enableEvents","true")
buildRule.executeTarget(PASS_TEST_TARGET)
buildRule.getFullLog()
containsString(JUnitTask.TESTLISTENER_PREFIX+"startTest("+PASS_TEST+")")
buildRule.getProject()
buildRule.getProject().setProperty("enableEvents","true")
buildRule.executeTarget(PASS_TEST_TARGET)
buildRule.getFullLog()
containsString(JUnitTask.TESTLISTENER_PREFIX+"endTest("+PASS_TEST+")")
buildRule.executeTarget(PASS_TEST_TARGET)
buildRule.getFullLog()
not(containsString(JUnitTask.TESTLISTENER_PREFIX))
containsString(JUnitTask.TESTLISTENER_PREFIX)
buildRule.getProject()
buildRule.getProject().setProperty(JUnitTask.ENABLE_TESTLISTENER_EVENTS,"true")
buildRule.executeTarget(PASS_TEST_TARGET)
buildRule.getFullLog()
containsString(JUnitTask.TESTLISTENER_PREFIX)
buildRule.getProject()
buildRule.getProject().setProperty(JUnitTask.ENABLE_TESTLISTENER_EVENTS,"false")
buildRule.getProject()
buildRule.getProject().setProperty("enableEvents","true")
buildRule.executeTarget(PASS_TEST_TARGET)
buildRule.getFullLog()
not(containsString(JUnitTask.TESTLISTENER_PREFIX))
containsString(JUnitTask.TESTLISTENER_PREFIX)
createRunnerForTestMethod(ValidMethodTestCase.class,"testA")
runner.run()
runner.getFormatter()
runner.getFormatter().getError()
runner.getRetCode()
createRunnerForTestMethod(InvalidMethodTestCase.class,"testInvalid")
runner.run()
runner.getFormatter()
runner.getFormatter().getError()
runner.getRetCode()
createRunner(NoSuiteTestCase.class)
runner.run()
runner.getFormatter()
runner.getFormatter().getError()
runner.getRetCode()
createRunner(SuiteTestCase.class)
runner.run()
runner.getFormatter()
runner.getFormatter().getError()
runner.getRetCode()
createRunner(InvalidSuiteTestCase.class)
runner.run()
runner.getFormatter()
runner.getFormatter().getError()
runner.getRetCode()
containsString("thrown on purpose")
createRunner(NoTestCase.class)
runner.run()
runner.getRetCode()
createRunner(NoTestCase.class,true)
runner.run()
runner.getFormatter()
runner.getFormatter().getError()
runner.getRetCode()
createRunner(NoTestCaseStaticInitializerError.class,true)
runner.run()
runner.getFormatter()
runner.getFormatter().getError()
runner.getRetCode()
createRunner(StaticInitializerErrorTestCase.class)
runner.run()
runner.getRetCode()
createRunner(InvalidTestCase.class)
runner.run()
runner.getRetCode()
createRunnerForTestMethod(AssertionErrorTest.class,"throwsAssertionError")
runner.run()
runner.getFormatter()
runner.getFormatter().getFailure()
failure.getMessage()
failure.getCause()
cause.getClass()
cause.getMessage()
clazz.getName()
clazz.getName()
clazz.getName()
super(test,methods,haltonerror,filtertrace,haltonfailure,false,false,TestRunner.class.getClassLoader())
TestRunner.class.getClassLoader()
addFormatter(formatter)
error.printStackTrace(newPrintWriter(sw))
sw.toString()
error()
super(name)
super(name)
super(name)
super(name)
super(name)
super(name)
super(name)
super(name)
super(name)
super(name)
JUnitVersionHelper.getTestCaseName(JUnit4TestAdapterCache.getDefault().asTest(Description.createTestDescription(JUnitVersionHelperTest.class,"testMyOwnName")))
JUnit4TestAdapterCache.getDefault()
JUnit4TestAdapterCache.getDefault().asTest(Description.createTestDescription(JUnitVersionHelperTest.class,"testMyOwnName"))
Description.createTestDescription(JUnitVersionHelperTest.class,"testMyOwnName")
JUnitVersionHelper.getTestCaseName(newFoo1())
JUnitVersionHelper.getTestCaseName(newFoo2())
JUnitVersionHelper.getTestCaseName(newFoo3())
JUnitVersionHelper.getTestCaseName(newFoo4())
JUnitVersionHelper.getTestCaseName(null)
JUnitVersionHelper.getTestCaseName(newFoo5())
super(name)
buildRule.configureProject("src/etc/testcases/taskdefs/optional/junit/teardownlistener.xml")
buildRule.executeTarget("testNoTeardown")
buildRule.getProject()
buildRule.getProject().getProperty("error")
buildRule.getOutput()
not(containsString("tearDown called on Timeout"))
containsString("tearDown called on Timeout")
buildRule.executeTarget("testTeardown")
buildRule.getProject()
buildRule.getProject().getProperty("error")
buildRule.getOutput()
containsString("tearDown called on Timeout")
task.execute()
newFile(d,"index.html").isFile()
task.execute()
newFile(d,"index.html").isFile()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/junitlauncher.xml")
setupTrackerProperty(targetName)
buildRule.executeTarget(targetName)
Assert.fail(targetName+" was expected to fail")
verifyFailed(trackerFile,AlwaysFailingJUnit4Test.class.getName(),"testWillFail")
AlwaysFailingJUnit4Test.class.getName()
setupTrackerProperty(targetName)
buildRule.executeTarget(targetName)
wasTestRun(trackerFile,AlwaysFailingJUnit4Test.class.getName(),"testWillFail")
AlwaysFailingJUnit4Test.class.getName()
verifyFailed(trackerFile,AlwaysFailingJUnit4Test.class.getName(),"testWillFail")
AlwaysFailingJUnit4Test.class.getName()
setupTrackerProperty(targetName)
buildRule.executeTarget(targetName)
wasTestRun(trackerFile,JUnit4SampleTest.class.getName())
JUnit4SampleTest.class.getName()
verifySuccess(trackerFile,JUnit4SampleTest.class.getName(),"testFoo")
JUnit4SampleTest.class.getName()
setupTrackerProperty(targetSpecificMethod)
buildRule.executeTarget(targetSpecificMethod)
wasTestRun(tracker1,JUnit4SampleTest.class.getName(),"testBar")
JUnit4SampleTest.class.getName()
wasTestRun(tracker1,JUnit4SampleTest.class.getName(),"testFoo")
JUnit4SampleTest.class.getName()
setupTrackerProperty(targetMultipleMethods)
buildRule.executeTarget(targetMultipleMethods)
wasTestRun(tracker2,JUnit4SampleTest.class.getName(),"testFooBar")
JUnit4SampleTest.class.getName()
wasTestRun(tracker2,JUnit4SampleTest.class.getName(),"testFoo")
JUnit4SampleTest.class.getName()
wasTestRun(tracker2,JUnit4SampleTest.class.getName(),"testBar")
JUnit4SampleTest.class.getName()
setupTrackerProperty(targetName+"-1")
setupTrackerProperty(targetName+"-2")
buildRule.executeTarget(targetName)
wasTestRun(trackerFile1,AlwaysFailingJUnit4Test.class.getName(),"testWillFail")
AlwaysFailingJUnit4Test.class.getName()
wasTestRun(trackerFile2,JUnit4SampleTest.class.getName(),"testFoo")
JUnit4SampleTest.class.getName()
setupTrackerProperty(targetName)
buildRule.executeTarget(targetName)
verifySuccess(trackerFile,JUnit4SampleTest.class.getName(),"testFoo")
JUnit4SampleTest.class.getName()
verifyFailed(trackerFile,AlwaysFailingJUnit4Test.class.getName(),"testWillFail")
AlwaysFailingJUnit4Test.class.getName()
verifySuccess(trackerFile,JupiterSampleTest.class.getName(),"testSucceeds")
JupiterSampleTest.class.getName()
verifyFailed(trackerFile,JupiterSampleTest.class.getName(),"testFails")
JupiterSampleTest.class.getName()
verifySkipped(trackerFile,JupiterSampleTest.class.getName(),"testSkipped")
JupiterSampleTest.class.getName()
wasTestRun(trackerFile,ForkedTest.class.getName())
ForkedTest.class.getName()
setupTrackerProperty(targetName)
System.setProperty(ForkedTest.SYS_PROP_ONE,"dummy")
buildRule.executeTarget(targetName)
System.getProperty(ForkedTest.SYS_PROP_ONE)
verifySuccess(trackerFile,ForkedTest.class.getName(),"testSysProp")
ForkedTest.class.getName()
buildRule.executeTarget(targetName)
Assert.fail(targetName+" was expected to fail since JUnit platform libraries "+"weren't included in the classpath of the forked JVM")
ClassNotFoundException.class.getName()
buildRule.getFullLog()
buildRule.getFullLog().contains(cnfeMessage)
buildRule.getFullLog()
buildRule.getFullLog().contains(exclusionLogMsg)
buildRule.executeTarget(targetName)
Assert.fail(targetName+" was expected to fail since Ant runtime libraries "+"weren't included in the classpath of the forked JVM")
StandaloneLauncher.class.getName()
buildRule.getFullLog()
buildRule.getFullLog().contains(missingMainClass)
buildRule.getFullLog()
buildRule.getFullLog().contains(exclusionLogMsg)
setupTrackerProperty(targetName)
buildRule.executeTarget(targetName)
buildRule.getFullLog()
buildRule.getFullLog().contains(exclusionLogMsg)
verifySuccess(trackerFile,JupiterSampleTest.class.getName(),"testSucceeds")
JupiterSampleTest.class.getName()
verifyFailed(trackerFile,JupiterSampleTest.class.getName(),"testFails")
JupiterSampleTest.class.getName()
setupTrackerProperty(targetName)
setupRuntimeClassesProperty()
buildRule.executeTarget(targetName)
buildRule.getFullLog()
buildRule.getFullLog().contains(exclusionLogMsg)
verifySuccess(trackerFile,JupiterSampleTest.class.getName(),"testSucceeds")
JupiterSampleTest.class.getName()
verifyFailed(trackerFile,JupiterSampleTest.class.getName(),"testFails")
JupiterSampleTest.class.getName()
verifyFailed(trackerFile,AlwaysFailingJUnit4Test.class.getName(),"testWillFail")
AlwaysFailingJUnit4Test.class.getName()
verifySuccess(trackerFile,ForkedTest.class.getName(),"testSysProp")
ForkedTest.class.getName()
setupTrackerProperty(targetName)
setupRuntimeClassesProperty()
buildRule.executeTarget(targetName)
buildRule.getFullLog()
buildRule.getFullLog().contains("Excluding Ant runtime libraries")
buildRule.getFullLog()
buildRule.getFullLog().contains("Excluding JUnit platform libraries")
verifySuccess(trackerFile,JUnit4SampleTest.class.getName(),"testBar")
JUnit4SampleTest.class.getName()
setupTrackerProperty(target)
buildRule.executeTarget(target)
wasTestRun(tracker2,JupiterSampleTest.class.getName(),"testMethodIncludeTagisExecuted")
JupiterSampleTest.class.getName()
wasTestRun(tracker2,JupiterSampleTest.class.getName(),"testMethodIncludeTagisNotExecuted")
JupiterSampleTest.class.getName()
setupTrackerProperty(target)
buildRule.executeTarget(target)
wasTestRun(tracker2,JupiterSampleTest.class.getName(),"testMethodIncludeTagisExecuted")
JupiterSampleTest.class.getName()
wasTestRun(tracker2,JupiterSampleTest.class.getName(),"testMethodIncludeTagisNotExecuted")
JupiterSampleTest.class.getName()
setupTrackerProperty(target+"1")
setupTrackerProperty(target+"2")
buildRule.executeTarget(target)
wasTestRun(tracker1,JupiterSampleTest.class.getName(),"testMethodIncludeTagisExecuted")
JupiterSampleTest.class.getName()
wasTestRun(tracker1,JupiterSampleTest.class.getName(),"testMethodIncludeTagisNotExecuted")
JupiterSampleTest.class.getName()
wasTestRun(tracker2,JupiterTagSampleTest.class.getName(),"testMethodIncludeTagisExecutedTagSampleTest")
JupiterTagSampleTest.class.getName()
wasTestRun(tracker2,JupiterTagSampleTest.class.getName(),"testMethodIncludeTagisNotExecutedTagSampleTest")
JupiterTagSampleTest.class.getName()
wasTestRun(tracker2,JupiterTagSampleTest.class.getName(),"testMethodIncludeTagisNotExecutedTagSampleTest2")
JupiterTagSampleTest.class.getName()
setupTrackerProperty(targetName)
buildRule.executeTarget(targetName)
Assert.fail(targetName+" was expected to fail")
verifySetupFailed(trackerFile,JupiterSampleTestFailingBeforeAll.class.getName())
JupiterSampleTestFailingBeforeAll.class.getName()
setupTrackerProperty(targetName)
buildRule.executeTarget(targetName)
verifySetupFailed(trackerFile,JupiterSampleTestFailingBeforeAll.class.getName())
JupiterSampleTestFailingBeforeAll.class.getName()
setupTrackerProperty(target)
buildRule.executeTarget(target)
wasTestRun(tracker,JupiterSampleTest.class.getName(),"testMethodIncludeTagisExecuted")
JupiterSampleTest.class.getName()
wasTestRun(tracker,JupiterSampleTest.class.getName(),"testMethodIncludeTagisNotExecuted")
JupiterSampleTest.class.getName()
wasTestRun(tracker,JupiterTagSampleTest.class.getName(),"testMethodIncludeTagisExecutedTagSampleTest")
JupiterTagSampleTest.class.getName()
wasTestRun(tracker,JupiterTagSampleTest.class.getName(),"testMethodIncludeTagisNotExecutedTagSampleTest")
JupiterTagSampleTest.class.getName()
wasTestRun(tracker,JupiterTagSampleTest.class.getName(),"testMethodIncludeTagisNotExecutedTagSampleTest2")
JupiterTagSampleTest.class.getName()
setupTrackerProperty(target)
buildRule.executeTarget(target)
wasTestRun(tracker,JupiterSampleTest.class.getName(),"testMethodIncludeTagisExecuted")
JupiterSampleTest.class.getName()
wasTestRun(tracker,JupiterSampleTest.class.getName(),"testMethodIncludeTagisNotExecuted")
JupiterSampleTest.class.getName()
wasTestRun(tracker,JupiterTagSampleTest.class.getName(),"testMethodIncludeTagisExecutedTagSampleTest")
JupiterTagSampleTest.class.getName()
wasTestRun(tracker,JupiterTagSampleTest.class.getName(),"testMethodIncludeTagisNotExecutedTagSampleTest")
JupiterTagSampleTest.class.getName()
wasTestRun(tracker,JupiterTagSampleTest.class.getName(),"testMethodIncludeTagisNotExecutedTagSampleTest2")
JupiterTagSampleTest.class.getName()
Files.deleteIfExists(tracker)
buildRule.getProject()
buildRule.getProject().setProperty(targetName+".tracker",filename)
buildRule.getProject()
buildRule.getProject().getProperty("output.dir")
Paths.get(outputDir,filename)
LoaderUtils.classNameToResource(Project.class.getName())
Project.class.getName()
LoaderUtils.getResourceSource(Project.class.getClassLoader(),projectResourceName)
Project.class.getClassLoader()
buildRule.getProject()
buildRule.getProject().setProperty("ant.runtime.classes.original.path",antClassesPath.getAbsolutePath())
antClassesPath.getAbsolutePath()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/net/ftp.xml")
buildRule.getProject()
project.executeTarget("setup")
project.getProperty("tmp.dir")
project.getProperty("ftp.filesep")
myFTPTask.setSeparator(ftpFileSep)
myFTPTask.setProject(project)
myFTPTask.resolveFile(tmpDir)
project.getProperty("ftp.host")
Integer.parseInt(project.getProperty("ftp.port"))
project.getProperty("ftp.port")
project.getProperty("ftp.user")
project.getProperty("ftp.password")
ftp.connect(remoteHost,port)
ftp.login(remoteUser,password)
ftp.disconnect()
buildRule.getProject()
buildRule.getProject().executeTarget("cleanup")
ftp.cwd(remoteDir)
System.out.println("could not change directory to "+remoteTmpDir)
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setIncludes(newString[]{"alpha"})
ds.scan()
compareFiles(ds,newString[]{},newString[]{"alpha"})
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setIncludes(newString[]{"alpha/"})
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setIncludes(newString[]{"alpha/beta/gamma/GAMMA.XML"})
ds.scan()
compareFiles(ds,newString[]{},newString[]{})
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
myFTPTask.newScanner(ftp)
ds.setCaseSensitive(false)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setIncludes(newString[]{"alpha/beta/gamma/GAMMA.XML"})
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{})
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setIncludes(newString[]{"ALPHA/"})
ds.setCaseSensitive(false)
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setIncludes(newString[]{"alpha/BETA/gamma/"})
ds.setCaseSensitive(false)
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{"alpha/beta/gamma"})
buildRule.executeTarget("ftp-get-with-selector")
buildRule.getLog()
containsString("selectors are not supported in remote filesets")
buildRule.getProject()
buildRule.getProject().getReference("fileset-destination-without-selector")
fsDestination.getDirectoryScanner(buildRule.getProject())
buildRule.getProject()
dsDestination.scan()
dsDestination.getIncludedDirectories()
dsDestination.getIncludedFiles()
sortedDestinationDirectories[counter].replace(File.separatorChar,'/')
sortedDestinationFiles[counter].replace(File.separatorChar,'/')
buildRule.getProject()
buildRule.getProject().getReference("fileset-source-without-selector")
fsSource.getDirectoryScanner(buildRule.getProject())
buildRule.getProject()
dsSource.scan()
compareFiles(dsSource,sortedDestinationFiles,sortedDestinationDirectories)
assumeTrue("System does not support Symlinks",supportsSymlinks)
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
buildRule.getProject()
buildRule.getProject().executeTarget("ftp-get-directory-symbolic-link")
buildRule.getProject()
buildRule.getProject().getReference("fileset-destination-without-selector")
fsDestination.getDirectoryScanner(buildRule.getProject())
buildRule.getProject()
dsDestination.scan()
compareFiles(dsDestination,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
assumeTrue("System does not support Symlinks",supportsSymlinks)
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
buildRule.getProject()
buildRule.getProject().executeTarget("ftp-get-directory-no-symbolic-link")
buildRule.getProject()
buildRule.getProject().getReference("fileset-destination-without-selector")
fsDestination.getDirectoryScanner(buildRule.getProject())
buildRule.getProject()
dsDestination.scan()
compareFiles(dsDestination,newString[]{},newString[]{})
assumeTrue("System does not support Symlinks",supportsSymlinks)
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
buildRule.getProject()
buildRule.getProject().executeTarget("symlink-setup")
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setIncludes(newString[]{"alpha/beta/gamma/"})
ds.setFollowSymlinks(true)
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{"alpha/beta/gamma"})
assumeTrue("System does not support Symlinks",supportsSymlinks)
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
buildRule.getProject()
buildRule.getProject().executeTarget("symlink-setup")
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setIncludes(newString[]{"alpha/beta/gamma/"})
ds.setFollowSymlinks(false)
ds.scan()
compareFiles(ds,newString[]{},newString[]{})
assumeTrue("System does not support Symlinks",supportsSymlinks)
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
buildRule.getProject()
buildRule.getProject().executeTarget("symlink-file-setup")
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setIncludes(newString[]{"alpha/beta/gamma/"})
ds.setFollowSymlinks(true)
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{"alpha/beta/gamma"})
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setIncludes(newString[]{"alpha/be?a/**","alpha/beta/gamma/"})
ds.scan()
compareFiles(ds,expectedFiles,expectedDirectories)
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setIncludes(newString[]{"alpha/beta/gamma/","alpha/be?a/**"})
ds.scan()
compareFiles(ds,expectedFiles,expectedDirectories)
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setIncludes(newString[]{"alpha/","ALPHA/"})
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setIncludes(newString[]{"alpha/","ALPHA/"})
ds.setCaseSensitive(false)
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setIncludes(newString[]{"alpha/beta/gamma/gamma.xml","alpha/beta/gamma/GAMMA.XML"})
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{})
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setIncludes(newString[]{"alpha/beta/gamma/gamma.xml","alpha/beta/gamma/GAMMA.XML"})
ds.setCaseSensitive(false)
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{})
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setIncludes(newString[]{"alpha/","ALPHA/beta/"})
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setIncludes(newString[]{"alpha/","ALPHA/beta/"})
ds.setCaseSensitive(false)
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setIncludes(newString[]{"**/*.xml"})
ds.setExcludes(newString[]{"alpha/beta/b*xml"})
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{})
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setIncludes(newString[]{"alpha/**"})
ds.setExcludes(newString[]{"alpha/**"})
ds.scan()
compareFiles(ds,newString[]{},newString[]{})
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setIncludes(newString[]{"alpha/**","alpha/beta/gamma/**"})
ds.setExcludes(newString[]{"alpha/beta/**"})
ds.scan()
compareFiles(ds,newString[]{},newString[]{"alpha"})
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setExcludes(newString[]{"alpha/**","alpha/beta/gamma/**"})
ds.setIncludes(newString[]{"alpha/beta/**"})
ds.scan()
compareFiles(ds,newString[]{},newString[]{})
assumeTrue(loginFailureMessage,loginSucceeded)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
buildRule.getProject()
buildRule.getProject().executeTarget("children-of-excluded-dir-setup")
myFTPTask.newScanner(ftp)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setExcludes(newString[]{"alpha/**"})
ds.scan()
compareFiles(ds,newString[]{"delta/delta.xml"},newString[]{"delta"})
myFTPTask.newScanner(ftp)
assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
changeRemoteDir(remoteTmpDir)
ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
buildRule.getProject()
buildRule.getProject().getBaseDir()
ds.setExcludes(newString[]{"alpha"})
ds.scan()
compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml","delta/delta.xml"},newString[]{"alpha/beta","alpha/beta/gamma","delta"})
newRegexpMatcherFactory().newRegexpMatcher()
super()
this.matcher.setPattern(pattern)
event.getMessage()
this.matcher.matches(message)
this.matcher.getGroups(message)
super.messageLogged(event)
Integer.parseInt(this.lastMatchGroups.get(1))
this.lastMatchGroups.get(1)
searchMap.put(message,0)
event.getMessage()
this.matcher.matches(message)
this.matcher.getGroups(message)
super.messageLogged(event)
searchMap.get(message)
buildRule.getProject()
buildRule.getProject().executeTarget("timed.test.setup")
buildRule.getProject()
buildRule.getProject().addBuildListener(log)
buildRule.getProject()
buildRule.getProject().executeTarget("timed.test.put.older")
log.getCount()
buildRule.getProject()
buildRule.getProject().executeTarget("timed.test.setup")
buildRule.getProject()
buildRule.getProject().addBuildListener(log)
buildRule.getProject()
buildRule.getProject().executeTarget("timed.test.get.older")
log.getCount()
performConfigTest("configuration.1",expectedCounts)
performConfigTest("configuration.2",expectedCounts)
performConfigTest("configuration.3",expectedCounts)
performConfigTest("configuration.lang.good",expectedCounts)
performConfigTest("configuration.lang.bad",expectedCounts)
performConfigTest("configuration.none",expectedCounts)
buildRule.getProject()
buildRule.getProject().getProperty("ftp.server.timezone")
Arrays.stream(messages)
Arrays.stream(messages).forEach(counter::addLogMessageToSearch)
buildRule.getProject()
buildRule.getProject().addBuildListener(counter)
buildRule.getProject()
buildRule.getProject().executeTarget(target)
counter.getMatchCount(messages[i])
buildRule.getProject()
buildRule.getProject().executeTarget("ftp-delete")
ds.getIncludedFiles()
ds.getIncludedDirectories()
includedFiles[counter].replace(File.separatorChar,'/')
Arrays.sort(includedFiles)
includedDirectories[counter].replace(File.separatorChar,'/')
Arrays.sort(includedDirectories)
super.resolveFile(file)
super.getFile(ftp,dir,filename)
super.executeRetryable(h,r,filename)
super(1)
super(2)
super(3)
super(newRandom().nextInt(Short.MAX_VALUE))
newRandom().nextInt(Short.MAX_VALUE)
buildRule.getProject()
buildRule.getProject().addTaskDefinition("ftp",oneFailureFTP.class)
buildRule.getProject()
buildRule.getProject().executeTarget("ftp-get-with-selector-retryable")
buildRule.getProject()
buildRule.getProject().addTaskDefinition("ftp",twoFailureFTP.class)
buildRule.getProject()
buildRule.getProject().executeTarget("ftp-get-with-selector-retryable")
buildRule.getProject()
buildRule.getProject().addTaskDefinition("ftp",threeFailureFTP.class)
buildRule.getProject()
buildRule.getProject().executeTarget("ftp-get-with-selector-retryable")
buildRule.getProject()
buildRule.getProject().addTaskDefinition("ftp",randomFailureFTP.class)
buildRule.getProject()
buildRule.getProject().setProperty("ftp.retries","forever")
buildRule.getProject()
buildRule.getProject().executeTarget("ftp-get-with-selector-retryable")
performCommandTest("test-initial-command",newint[]{1,0})
performCommandTest("test-site-action",newint[]{1,0})
Arrays.stream(messages)
Arrays.stream(messages).forEach(counter::addLogMessageToSearch)
buildRule.getProject()
buildRule.getProject().addBuildListener(counter)
buildRule.getProject()
buildRule.getProject().executeTarget(target)
counter.getMatchCount(messages[i])
buildRule.configureProject("src/etc/testcases/taskdefs/optional/script/scriptdef.xml")
buildRule.executeTarget("simple")
buildRule.getProject()
p.getReference("testfileset")
fileset.getDir(p)
buildRule.getLog()
containsString("Attribute attr1 = test")
containsString("Fileset basedir = "+baseDir.getAbsolutePath())
baseDir.getAbsolutePath()
thrown.expect(BuildException.class)
thrown.expectMessage("requires a language attribute")
buildRule.executeTarget("nolang")
thrown.expect(BuildException.class)
thrown.expectMessage("scriptdef requires a name attribute")
buildRule.executeTarget("noname")
buildRule.executeTarget("nestedbyclassname")
buildRule.getProject()
p.getReference("testfileset")
fileset.getDir(p)
buildRule.getLog()
containsString("Attribute attr1 = test")
containsString("Fileset basedir = "+baseDir.getAbsolutePath())
baseDir.getAbsolutePath()
buildRule.executeTarget("noelement")
buildRule.getOutput()
buildRule.getOutput().trim()
thrown.expect(BuildException.class)
thrown.expectMessage("TypeError")
buildRule.executeTarget("exception")
buildRule.executeTarget("doubledef")
buildRule.getLog()
containsString("Task1")
containsString("Task2")
thrown.expect(BuildException.class)
thrown.expectMessage("attr1 attribute more than once")
buildRule.executeTarget("doubleAttributeDef")
buildRule.executeTarget("property")
buildRule.getLog()
containsString("Attribute value = test")
buildRule.getProject()
buildRule.getProject().setProperty("useSrcAndEncoding.reader.encoding",readerEncoding)
buildRule.executeTarget("useSrcAndEncoding")
thrown.expect(BuildException.class)
thrown.expectMessage("expected <eacute [\u00e9]> but was <eacute [\u00c3\u00a9]>")
buildRule.getProject()
buildRule.getProject().setProperty("useSrcAndEncoding.reader.encoding",readerEncoding)
buildRule.executeTarget("useSrcAndEncoding")
System.nanoTime()
buildRule.executeTarget("useCompiled")
System.nanoTime()
System.nanoTime()
buildRule.executeTarget("useNotCompiled")
System.nanoTime()
project.init()
project.setBasedir(".")
project.getBaseDir()
file.exists()
file.delete()
project.getBaseDir()
project.getBaseDir().getAbsolutePath()
sosGet.setProject(project)
sosGet.setVssServerPath(VSS_SERVER_PATH)
sosGet.setSosServerPath(SOS_SERVER_PATH)
sosGet.setProjectPath(VSS_PROJECT_PATH)
sosGet.setFile(SRC_FILE)
sosGet.setUsername(SOS_USERNAME)
sosGet.setPassword(SOS_PASSWORD)
sosGet.setVersion(VERSION)
sosGet.setLocalPath(newPath(project,LOCAL_PATH))
sosGet.setNoCache(true)
sosGet.setNoCompress(true)
sosGet.setVerbose(true)
sosGet.setRecursive(true)
sosGet.buildCmdLine()
checkCommandLines(sTestCmdLine,commandline.getCommandline())
commandline.getCommandline()
project.getBaseDir()
project.getBaseDir().getAbsolutePath()
sosGet.setProject(project)
sosGet.setVssServerPath(VSS_SERVER_PATH)
sosGet.setSosServerPath(SOS_SERVER_PATH)
sosGet.setProjectPath(DS_VSS_PROJECT_PATH)
sosGet.setLabel(SRC_LABEL)
sosGet.setUsername(SOS_USERNAME)
sosGet.setSosHome(SOS_HOME)
sosGet.setNoCache(true)
sosGet.setNoCompress(false)
sosGet.setVerbose(false)
sosGet.setRecursive(true)
sosGet.buildCmdLine()
checkCommandLines(sTestCmdLine,commandline.getCommandline())
commandline.getCommandline()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/sos/sos.xml")
expectSpecificBuildException("sosget.1","sosserverpath attribute must be set!")
expectSpecificBuildException("sosget.2","username attribute must be set!")
expectSpecificBuildException("sosget.3","vssserverpath attribute must be set!")
expectSpecificBuildException("sosget.4","projectpath attribute must be set!")
project.getBaseDir()
project.getBaseDir().getAbsolutePath()
sosCheckin.setProject(project)
sosCheckin.setVssServerPath(VSS_SERVER_PATH)
sosCheckin.setSosServerPath(SOS_SERVER_PATH)
sosCheckin.setProjectPath(VSS_PROJECT_PATH)
sosCheckin.setFile(SRC_FILE)
sosCheckin.setComment(SRC_COMMENT)
sosCheckin.setUsername(SOS_USERNAME)
sosCheckin.setPassword(SOS_PASSWORD)
sosCheckin.setLocalPath(newPath(project,LOCAL_PATH))
sosCheckin.setNoCache(true)
sosCheckin.setNoCompress(true)
sosCheckin.setVerbose(true)
sosCheckin.setRecursive(true)
sosCheckin.buildCmdLine()
checkCommandLines(sTestCmdLine,commandline.getCommandline())
commandline.getCommandline()
project.getBaseDir()
project.getBaseDir().getAbsolutePath()
sosCheckin.setProject(project)
sosCheckin.setVssServerPath(VSS_SERVER_PATH)
sosCheckin.setSosServerPath(SOS_SERVER_PATH)
sosCheckin.setProjectPath(DS_VSS_PROJECT_PATH)
sosCheckin.setComment(SRC_COMMENT)
sosCheckin.setUsername(SOS_USERNAME)
sosCheckin.setSosHome(SOS_HOME)
sosCheckin.setNoCache(true)
sosCheckin.setNoCompress(false)
sosCheckin.setVerbose(false)
sosCheckin.setRecursive(true)
sosCheckin.buildCmdLine()
checkCommandLines(sTestCmdLine,commandline.getCommandline())
commandline.getCommandline()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/sos/sos.xml")
expectSpecificBuildException("soscheckin.1","sosserverpath attribute must be set!")
expectSpecificBuildException("soscheckin.2","username attribute must be set!")
expectSpecificBuildException("soscheckin.3","vssserverpath attribute must be set!")
expectSpecificBuildException("soscheckin.4","projectpath attribute must be set!")
project.getBaseDir()
project.getBaseDir().getAbsolutePath()
sosCheckout.setProject(project)
sosCheckout.setVssServerPath(VSS_SERVER_PATH)
sosCheckout.setSosServerPath(SOS_SERVER_PATH)
sosCheckout.setProjectPath(DS_VSS_PROJECT_PATH)
sosCheckout.setFile(SRC_FILE)
sosCheckout.setUsername(SOS_USERNAME)
sosCheckout.setPassword(SOS_PASSWORD)
sosCheckout.setLocalPath(newPath(project,LOCAL_PATH))
sosCheckout.setNoCache(true)
sosCheckout.setNoCompress(true)
sosCheckout.setVerbose(true)
sosCheckout.setRecursive(true)
sosCheckout.buildCmdLine()
checkCommandLines(sTestCmdLine,commandline.getCommandline())
commandline.getCommandline()
project.getBaseDir()
project.getBaseDir().getAbsolutePath()
sosCheckout.setProject(project)
sosCheckout.setVssServerPath(VSS_SERVER_PATH)
sosCheckout.setSosServerPath(SOS_SERVER_PATH)
sosCheckout.setProjectPath(VSS_PROJECT_PATH)
sosCheckout.setUsername(SOS_USERNAME)
sosCheckout.setSosHome(SOS_HOME)
sosCheckout.setNoCache(true)
sosCheckout.setNoCompress(false)
sosCheckout.setVerbose(false)
sosCheckout.setRecursive(true)
sosCheckout.buildCmdLine()
checkCommandLines(sTestCmdLine,commandline.getCommandline())
commandline.getCommandline()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/sos/sos.xml")
expectSpecificBuildException("soscheckout.1","sosserverpath attribute must be set!")
expectSpecificBuildException("soscheckout.2","username attribute must be set!")
expectSpecificBuildException("soscheckout.3","vssserverpath attribute must be set!")
expectSpecificBuildException("soscheckout.4","projectpath attribute must be set!")
sosLabel.setVssServerPath(VSS_SERVER_PATH)
sosLabel.setSosServerPath(SOS_SERVER_PATH)
sosLabel.setProjectPath(DS_VSS_PROJECT_PATH)
sosLabel.setUsername(SOS_USERNAME)
sosLabel.setSosHome(SOS_HOME)
sosLabel.setComment(SRC_COMMENT)
sosLabel.setLabel(SRC_LABEL)
sosLabel.setNoCache(true)
sosLabel.setNoCompress(false)
sosLabel.setVerbose(true)
sosLabel.buildCmdLine()
checkCommandLines(sTestCmdLine,commandline.getCommandline())
commandline.getCommandline()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/sos/sos.xml")
expectSpecificBuildException("soslabel.1","sosserverpath attribute must be set!")
expectSpecificBuildException("soslabel.2","username attribute must be set!")
expectSpecificBuildException("soslabel.3","vssserverpath attribute must be set!")
expectSpecificBuildException("soslabel.4","projectpath attribute must be set!")
expectSpecificBuildException("soslabel.5","label attribute must be set!")
thrown.expect(BuildException.class)
thrown.expectMessage(exceptionMessage)
buildRule.executeTarget(target)
String.valueOf(i)
t.setProject(p)
t.execute()
Thread.sleep(2000)
p.fireBuildFinished(null)
System.err.println("finished")
Thread.sleep(2000)
System.err.println("exiting")
System.exit(0)
createTask()
System.getProperty("scp.tmp")
System.getProperty("scp.tmp")
cleanUpList.clear()
cleanUpList.forEach(File::delete)
assumeNotNull("system property scp.host must be set",sshHostUri)
createTemporaryFile()
scpTask.setFile(uploadFile.getPath())
uploadFile.getPath()
scpTask.setTodir(sshHostUri)
scpTask.execute()
tempDir.getPath()
addCleanup(testFile)
testFile.exists()
createTask()
scpTask.setFile(sshHostUri+"/"+uploadFile.getName())
uploadFile.getName()
scpTask.setTodir(testFile.getPath())
testFile.getPath()
scpTask.execute()
testFile.exists()
compareFiles(uploadFile,testFile)
assumeNotNull("system property scp.host must be set",sshHostUri)
uploadList.add(createTemporaryFile())
createTemporaryFile()
selector.setName("scp*")
fileset.setDir(tempDir)
fileset.addFilename(selector)
scpTask.addFileset(fileset)
scpTask.setTodir(sshHostUri)
scpTask.execute()
multi.mkdir()
addCleanup(multi)
createTask()
scpTask.setFile(sshHostUri+"/scp*")
scpTask.setTodir(multi.getPath())
multi.getPath()
scpTask.execute()
match.setFile1(f)
f.getName()
match.setFile2(f2)
f.getPath()
f2.getPath()
match.eval()
assumeNotNull("system property scp.host must be set",sshHostUri)
uploadList.add(createTemporaryFile())
createTemporaryFile()
sort.setProject(scpTask.getProject())
scpTask.getProject()
reverse.add(newName())
sort.add(reverse)
selector.setName("scp*")
fileset.setProject(scpTask.getProject())
scpTask.getProject()
fileset.setDir(tempDir)
fileset.addFilename(selector)
sort.add(fileset)
scpTask.add(sort)
scpTask.setTodir(sshHostUri)
scpTask.execute()
scpTask.setRemoteTodir("host:/a/path/without/an/at")
scpTask.setRemoteTodir("user:password@host:/a/path/with/an/at")
cleanUpList.add(file)
match.setFile1(src)
match.setFile2(dest)
match.eval()
File.createTempFile("scp","test",tempDir)
writer.write("Can you hear me now?\n")
writer.close()
addCleanup(uploadFile)
p.init()
scp.setProject(p)
scp.setKnownhosts(knownHosts)
scp.setTrust(true)
scp.setPort(port)
assumeTrue("Symlinks not supported on current operating system",Os.isFamily("unix"))
Os.isFamily("unix")
buildRule.configureProject("src/etc/testcases/taskdefs/optional/unix/symlink.xml")
buildRule.executeTarget("setUp")
buildRule.executeTarget("test-single")
buildRule.getProject()
p.getProperty("test.single.file.created")
p.getProperty("test.single.link.created")
buildRule.executeTarget("test-delete")
buildRule.getProject()
p.getProperty("test.delete.file.still.there")
p.getProperty("test.delete.link.still.there")
buildRule.executeTarget("test-record")
buildRule.getProject()
p.getProperty("test.record.dir1.created")
p.getProperty("test.record.dir2.created")
p.getProperty("test.record.file1.created")
p.getProperty("test.record.file2.created")
p.getProperty("test.record.fileA.created")
p.getProperty("test.record.fileB.created")
p.getProperty("test.record.fileC.created")
p.getProperty("test.record.link1.created")
p.getProperty("test.record.link2.created")
p.getProperty("test.record.link3.created")
p.getProperty("test.record.dirlink.created")
p.getProperty("test.record.dirlink2.created")
p.getProperty("test.record.dir1.recorded")
p.getProperty("test.record.dir2.recorded")
p.getProperty("test.record.dir3.recorded")
buildRule.executeTarget("test-recreate")
buildRule.getProject()
p.getProperty("test.recreate.link1.not.removed")
p.getProperty("test.recreate.link2.not.removed")
p.getProperty("test.recreate.link3.not.removed")
p.getProperty("test.recreate.dirlink.not.removed")
p.getProperty("test.recreate.link1.recreated")
p.getProperty("test.recreate.link2.recreated")
p.getProperty("test.recreate.link3.recreated")
p.getProperty("test.recreate.dirlink.recreated")
p.getProperty("test.recreate.dirlink2.recreated.twice")
p.getProperty("test.recreate.dirlink3.was.altered")
buildRule.executeTarget("test-fileutils")
SymbolicLinkUtils.getSymbolicLinkUtils()
buildRule.getOutputDir()
f.exists()
f.isDirectory()
f.isFile()
su.isSymbolicLink(f.getAbsolutePath())
f.getAbsolutePath()
su.isSymbolicLink(f.getParentFile(),f.getName())
f.getParentFile()
f.getName()
su.isDanglingSymbolicLink(f.getAbsolutePath())
f.getAbsolutePath()
su.isDanglingSymbolicLink(f.getParentFile(),f.getName())
f.getParentFile()
f.getName()
buildRule.getOutputDir()
f.exists()
f.isDirectory()
f.isFile()
su.isSymbolicLink(f.getAbsolutePath())
f.getAbsolutePath()
su.isSymbolicLink(f.getParentFile(),f.getName())
f.getParentFile()
f.getName()
su.isDanglingSymbolicLink(f.getAbsolutePath())
f.getAbsolutePath()
su.isDanglingSymbolicLink(f.getParentFile(),f.getName())
f.getParentFile()
f.getName()
buildRule.getOutputDir()
f.exists()
f.isDirectory()
f.isFile()
su.isSymbolicLink(f.getAbsolutePath())
f.getAbsolutePath()
su.isSymbolicLink(f.getParentFile(),f.getName())
f.getParentFile()
f.getName()
su.isDanglingSymbolicLink(f.getAbsolutePath())
f.getAbsolutePath()
su.isDanglingSymbolicLink(f.getParentFile(),f.getName())
f.getParentFile()
f.getName()
buildRule.getOutputDir()
f.exists()
f.isDirectory()
f.isFile()
su.isSymbolicLink(f.getAbsolutePath())
f.getAbsolutePath()
su.isSymbolicLink(f.getParentFile(),f.getName())
f.getParentFile()
f.getName()
su.isDanglingSymbolicLink(f.getAbsolutePath())
f.getAbsolutePath()
su.isDanglingSymbolicLink(f.getParentFile(),f.getName())
f.getParentFile()
f.getName()
buildRule.getOutputDir()
f.exists()
f.isDirectory()
f.isFile()
su.isSymbolicLink(f.getAbsolutePath())
f.getAbsolutePath()
su.isSymbolicLink(f.getParentFile(),f.getName())
f.getParentFile()
f.getName()
su.isDanglingSymbolicLink(f.getAbsolutePath())
f.getAbsolutePath()
su.isDanglingSymbolicLink(f.getParentFile(),f.getName())
f.getParentFile()
f.getName()
buildRule.getOutputDir()
f.exists()
f.isDirectory()
f.isFile()
su.isSymbolicLink(f.getAbsolutePath())
f.getAbsolutePath()
su.isSymbolicLink(f.getParentFile(),f.getName())
f.getParentFile()
f.getName()
su.isDanglingSymbolicLink(f.getAbsolutePath())
f.getAbsolutePath()
su.isDanglingSymbolicLink(f.getParentFile(),f.getName())
f.getParentFile()
f.getName()
buildRule.getOutputDir()
f.exists()
f.isDirectory()
f.isFile()
su.isSymbolicLink(f.getAbsolutePath())
f.getAbsolutePath()
su.isSymbolicLink(f.getParentFile(),f.getName())
f.getParentFile()
f.getName()
su.isDanglingSymbolicLink(f.getAbsolutePath())
f.getAbsolutePath()
su.isDanglingSymbolicLink(f.getParentFile(),f.getName())
f.getParentFile()
f.getName()
buildRule.getOutputDir()
f.exists()
f.isDirectory()
f.isFile()
su.isSymbolicLink(f.getAbsolutePath())
f.getAbsolutePath()
su.isSymbolicLink(f.getParentFile(),f.getName())
f.getParentFile()
f.getName()
su.isDanglingSymbolicLink(f.getAbsolutePath())
f.getAbsolutePath()
su.isDanglingSymbolicLink(f.getParentFile(),f.getName())
f.getParentFile()
f.getName()
buildRule.executeTarget("test-overwrite-link")
buildRule.getProject()
p.getProperty("test.overwrite.link.target.dir")
Paths.get(linkTargetResource)
Files.isDirectory(targetResourcePath)
Files.list(targetResourcePath)
Files.list(targetResourcePath).count()
buildRule.getProject()
buildRule.executeTarget("tearDown")
project.setBasedir(".")
project.init()
project.getBaseDir()
file.exists()
file.delete()
project.getBaseDir()
project.getBaseDir().getAbsolutePath()
vssGet.setProject(project)
vssGet.setRecursive(true)
vssGet.setLocalpath(newPath(project,LOCAL_PATH))
vssGet.setLogin(VSS_USERNAME+","+VSS_PASSWORD)
vssGet.setVersion(VERSION)
vssGet.setQuiet(false)
vssGet.setDate(DATE)
vssGet.setLabel(SRC_LABEL)
vssGet.setVsspath(VSS_PROJECT_PATH)
cmu.setValue(TIME_UPDATED)
vssGet.setFileTimeStamp(cmu)
wf.setValue(WRITABLE_SKIP)
vssGet.setWritableFiles(wf)
vssGet.buildCmdLine()
checkCommandLines(sTestCmdLine,commandline.getCommandline())
commandline.getCommandline()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/vss/vss.xml")
expectSpecificBuildException("vssget.1","vsspath attribute must be set!")
vssLabel.setProject(project)
vssLabel.setComment(SRC_COMMENT)
vssLabel.setLogin(VSS_USERNAME+","+VSS_PASSWORD)
vssLabel.setVersion(VERSION)
vssLabel.setAutoresponse("Y")
vssLabel.setLabel(SRC_LABEL)
vssLabel.setVsspath(VSS_PROJECT_PATH)
vssLabel.buildCmdLine()
checkCommandLines(sTestCmdLine,commandline.getCommandline())
commandline.getCommandline()
vssLabel.setProject(project)
vssLabel.setComment(SRC_COMMENT)
vssLabel.setLogin(VSS_USERNAME+","+VSS_PASSWORD)
vssLabel.setLabel(LONG_LABEL+"blahblah")
vssLabel.setVsspath(VSS_PROJECT_PATH)
vssLabel.buildCmdLine()
checkCommandLines(sTestCmdLine,commandline.getCommandline())
commandline.getCommandline()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/vss/vss.xml")
expectSpecificBuildException("vsslabel.1","vsspath attribute must be set!")
expectSpecificBuildException("vsslabel.2","label attribute must be set!")
project.getBaseDir()
project.getBaseDir().getAbsolutePath()
vssHistory.setProject(project)
vssHistory.setLogin(VSS_USERNAME+","+VSS_PASSWORD)
vssHistory.setFromLabel(SRC_LABEL)
vssHistory.setToLabel(LONG_LABEL+"blahblah")
vssHistory.setVsspath(VSS_PROJECT_PATH)
vssHistory.setRecursive(false)
vssHistory.setOutput(newFile(project.getBaseDir().getAbsolutePath(),OUTPUT))
project.getBaseDir()
project.getBaseDir().getAbsolutePath()
vssHistory.buildCmdLine()
checkCommandLines(sTestCmdLine,commandline.getCommandline())
commandline.getCommandline()
vssHistory.setProject(project)
vssHistory.setLogin(VSS_USERNAME+","+VSS_PASSWORD)
vssHistory.setFromDate(DATE2)
vssHistory.setToDate(DATE)
vssHistory.setVsspath(VSS_PROJECT_PATH)
vssHistory.setRecursive(true)
vssHistory.buildCmdLine()
checkCommandLines(sTestCmdLine,commandline.getCommandline())
commandline.getCommandline()
tstamp.setLocation(location)
tstamp.setProject(project)
tstamp.createFormat()
format.setProperty("today")
format.setPattern("HH:mm:ss z")
format.setTimezone("GMT")
Calendar.getInstance()
Calendar.getInstance().getTime()
format.execute(project,date,location)
project.getProperty("today")
sdf.setTimeZone(TimeZone.getTimeZone("GMT"))
TimeZone.getTimeZone("GMT")
sdf.format(date)
vssHistory.setProject(project)
vssHistory.setLogin(VSS_USERNAME)
vssHistory.setToDate(today)
vssHistory.setVsspath(VSS_PROJECT_PATH)
vssHistory.buildCmdLine()
checkCommandLines(sTestCmdLine,commandline.getCommandline())
commandline.getCommandline()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/vss/vss.xml")
expectSpecificBuildException("vsshistory.1","vsspath attribute must be set!")
thrown.expect(BuildException.class)
thrown.expectMessage(exceptionMessage)
buildRule.executeTarget(target)
vssCheckin.setProject(project)
vssCheckin.setComment(SRC_COMMENT)
vssCheckin.setLogin(VSS_USERNAME)
vssCheckin.setAutoresponse("N")
vssCheckin.setVsspath(VSS_PROJECT_PATH)
vssCheckin.setWritable(true)
vssCheckin.buildCmdLine()
checkCommandLines(sTestCmdLine,commandline.getCommandline())
commandline.getCommandline()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/vss/vss.xml")
expectSpecificBuildException("vsscheckin.1","vsspath attribute must be set!")
vssCheckout.setProject(project)
vssCheckout.setLogin(VSS_USERNAME)
vssCheckout.setVsspath(DS_VSS_PROJECT_PATH)
vssCheckout.setRecursive(true)
vssCheckout.setDate(DATE)
vssCheckout.setLabel(SRC_LABEL)
vssCheckout.setSsdir(SS_DIR)
cmu.setValue(TIME_MODIFIED)
vssCheckout.setFileTimeStamp(cmu)
vssCheckout.setGetLocalCopy(false)
vssCheckout.buildCmdLine()
checkCommandLines(sTestCmdLine,commandline.getCommandline())
commandline.getCommandline()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/vss/vss.xml")
expectSpecificBuildException("vsscheckout.1","vsspath attribute must be set!")
expectSpecificBuildException("vsscheckout.2","blah is not a legal value for this attribute")
project.getBaseDir()
project.getBaseDir().getAbsolutePath()
vssAdd.setProject(project)
vssAdd.setLogin(VSS_USERNAME+","+VSS_PASSWORD)
vssAdd.setVsspath(DS_VSS_PROJECT_PATH)
vssAdd.setRecursive(true)
vssAdd.setSsdir(SS_DIR)
vssAdd.setWritable(false)
vssAdd.setLocalpath(newPath(project,LOCAL_PATH))
vssAdd.buildCmdLine()
checkCommandLines(sTestCmdLine,commandline.getCommandline())
commandline.getCommandline()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/vss/vss.xml")
expectSpecificBuildException("vssadd.1","localPath attribute must be set!")
vssCp.setProject(project)
vssCp.setLogin(VSS_USERNAME)
vssCp.setVsspath(DS_VSS_PROJECT_PATH)
vssCp.buildCmdLine()
checkCommandLines(sTestCmdLine,commandline.getCommandline())
commandline.getCommandline()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/vss/vss.xml")
expectSpecificBuildException("vsscp.1","vsspath attribute must be set!")
vssCreate.setProject(project)
vssCreate.setComment(SRC_COMMENT)
vssCreate.setLogin(VSS_USERNAME)
vssCreate.setVsspath(DS_VSS_PROJECT_PATH)
vssCreate.setFailOnError(true)
vssCreate.setAutoresponse("N")
vssCreate.setQuiet(true)
vssCreate.buildCmdLine()
checkCommandLines(sTestCmdLine,commandline.getCommandline())
commandline.getCommandline()
buildRule.configureProject("src/etc/testcases/taskdefs/optional/vss/vss.xml")
expectSpecificBuildException("vsscreate.1","vsspath attribute must be set!")
sGeneratedCmdLine[genIndex].isEmpty()
Arrays.stream(sGeneratedCmdLine)
Arrays.stream(sGeneratedCmdLine).filter(String::isEmpty)
Arrays.stream(sGeneratedCmdLine).filter(String::isEmpty).count()
project.setBasedir(".")
getInstance()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
f.setIncludes("**/*.java")
f.setRefid(newReference(getProject(),"dummyref"))
getProject()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
f.createPatternSet()
f.setRefid(newReference(getProject(),"dummyref"))
getProject()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
f.createInclude()
f.setRefid(newReference(getProject(),"dummyref"))
getProject()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
f.setRefid(newReference(getProject(),"dummyref"))
getProject()
f.setIncludes("**/*.java")
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
f.setRefid(newReference(getProject(),"dummyref"))
getProject()
f.setIncludesfile(newFile("/a"))
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
f.setRefid(newReference(getProject(),"dummyref"))
getProject()
f.setExcludes("**/*.java")
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
f.setRefid(newReference(getProject(),"dummyref"))
getProject()
f.setExcludesfile(newFile("/a"))
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
f.setRefid(newReference(getProject(),"dummyref"))
getProject()
f.setDir(project.resolveFile("."))
project.resolveFile(".")
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
f.setRefid(newReference(getProject(),"dummyref"))
getProject()
f.createInclude()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
f.setRefid(newReference(getProject(),"dummyref"))
getProject()
f.createExclude()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
f.setRefid(newReference(getProject(),"dummyref"))
getProject()
f.createIncludesFile()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
f.setRefid(newReference(getProject(),"dummyref"))
getProject()
f.createExcludesFile()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
f.setRefid(newReference(getProject(),"dummyref"))
getProject()
f.createPatternSet()
thrown.expect(BuildException.class)
thrown.expectMessage("This data type contains a circular reference.")
project.addReference("dummy",f)
f.setRefid(newReference(getProject(),"dummy"))
getProject()
f.getDir(project)
thrown.expect(BuildException.class)
thrown.expectMessage("This data type contains a circular reference.")
project.addReference("dummy",f)
f.setRefid(newReference(getProject(),"dummy"))
getProject()
f.getDirectoryScanner(project)
thrown.expect(BuildException.class)
thrown.expectMessage("This data type contains a circular reference.")
project.addReference("dummy1",f)
f.setRefid(newReference(getProject(),"dummy2"))
getProject()
getInstance()
project.addReference("dummy2",fa)
fa.setRefid(newReference(getProject(),"dummy3"))
getProject()
getInstance()
project.addReference("dummy3",fb)
fb.setRefid(newReference(getProject(),"dummy1"))
getProject()
f.getDir(project)
thrown.expect(BuildException.class)
thrown.expectMessage("This data type contains a circular reference.")
project.addReference("dummy1",f)
f.setRefid(newReference(getProject(),"dummy2"))
getProject()
getInstance()
project.addReference("dummy2",fa)
fa.setRefid(newReference(getProject(),"dummy3"))
getProject()
getInstance()
project.addReference("dummy3",fb)
fb.setRefid(newReference(getProject(),"dummy1"))
getProject()
f.getDirectoryScanner(project)
project.addReference("dummy1",f)
f.setRefid(newReference(getProject(),"dummy2"))
getProject()
getInstance()
project.addReference("dummy2",fa)
fa.setRefid(newReference(getProject(),"dummy3"))
getProject()
getInstance()
project.addReference("dummy3",fb)
fb.setDir(project.resolveFile("."))
project.resolveFile(".")
f.getDir(project)
project.getBaseDir()
f.setFile(newFile("/a"))
f.setFile(newFile("/a"))
thrown.expect(BuildException.class)
thrown.expectMessage("setFile cannot be called twice with different arguments")
f.setFile(newFile("/a"))
f.setFile(newFile("/b"))
buildRule.configureProject("src/etc/testcases/types/addtype.xml")
buildRule.executeTarget("addpath")
buildRule.executeTarget("addcondition")
buildRule.executeTarget("addfilter")
buildRule.executeTarget("addselector")
buildRule.executeTarget("nested.a")
buildRule.getLog()
containsString("add A called")
buildRule.executeTarget("nested.b")
buildRule.getLog()
containsString("add B called")
buildRule.executeTarget("nested.c")
buildRule.getLog()
containsString("add C called")
thrown.expect(BuildException.class)
thrown.expectMessage("ambiguous")
buildRule.executeTarget("nested.ab")
buildRule.executeTarget("condition.type")
buildRule.getLog()
containsString("beforeafter")
buildRule.executeTarget("condition.task")
buildRule.getLog()
containsString("My Condition execution")
buildRule.executeTarget("condition.condition.type")
buildRule.getLog()
containsString("My Condition eval")
thrown.expect(BuildException.class)
thrown.expectMessage("doesn't support the nested")
buildRule.executeTarget("condition.condition.task")
buildRule.executeTarget("myaddconfigured")
buildRule.getLog()
containsString("value is Value Setexecute: value is Value Set")
buildRule.executeTarget("myaddconfiguredvalue")
buildRule.getLog()
containsString("value is Value Setexecute: value is Value Set")
buildRule.executeTarget("namespacetest")
log("add A called")
log("add A called")
log("add A called")
project.log("My Condition eval")
project.log("My Condition execution")
log("value is "+value)
log("add A called")
project.log("My Condition execution")
log("value is "+value)
project.log("My Condition execution")
thrown.expect(BuildException.class)
thrown.expectMessage("Java returned: 1")
buildRule.executeTarget(target)
expectAssertion("test-classname")
expectAssertion("test-package")
buildRule.executeTarget("test-disable")
expectAssertion("test-override")
buildRule.executeTarget("test-override2")
expectAssertion("test-references")
thrown.expect(BuildException.class)
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify")
buildRule.executeTarget("test-reference-abuse")
assumeFalse("ran Ant tests with -ea and this would fail spuriously",AssertionsTest.class.desiredAssertionStatus())
AssertionsTest.class.desiredAssertionStatus()
buildRule.executeTarget("test-nofork")
buildRule.getLog()
containsString("Assertion statements are currently ignored in non-forked mode")
buildRule.executeTarget("test-junit")
Arrays.asList("UTF-8","ISO-8859-1","037","us","IBM500","ascii","utf-8","Cp1252")
equalToIgnoringCase(cs.getValue())
cs.getValue()
Arrays.asList("UTF-8","ISO-8859-1","037","us","IBM500","ascii","utf-8","Cp1252")
Arrays.asList("UTF-8","ISO-8859-1","037","us","IBM500","ascii","utf-8","Cp1252")
equalToIgnoringCase(cs.getValue())
cs.getValue()
Arrays.asList("UTF-8","ISO-8859-1","037","us","IBM500","ascii","utf-8","Cp1252")
newCharSet(argument).equivalent(CharSet.getUtf8())
CharSet.getUtf8()
System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY)
project.setBasedir(System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY))
System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY)
project.setProperty("build.sysclasspath","ignore")
System.getProperty("ant.build.clonevm")
System.setProperty("ant.build.clonevm","false")
System.setProperty("ant.build.clonevm",cloneVm)
System.getProperty(MagicNames.ANT_HOME)
c.createArgument()
c.createArgument().setValue("org.apache.tools.ant.CommandlineJavaTest")
c.setClassname("junit.textui.TestRunner")
c.createVmArgument()
c.createVmArgument().setValue("-Djava.compiler=NONE")
c.getCommandline()
c.clone()
c.createClasspath(project)
c.createClasspath(project).setLocation(project.resolveFile("build.xml"))
project.resolveFile("build.xml")
c.createClasspath(project)
c.createClasspath(project).setLocation(project.resolveFile(System.getProperty(MagicNames.ANT_HOME)+"/lib/ant.jar"))
project.resolveFile(System.getProperty(MagicNames.ANT_HOME)+"/lib/ant.jar")
System.getProperty(MagicNames.ANT_HOME)
c.getCommandline()
containsString("build.xml"+File.pathSeparator)
endsWith("ant.jar")
c.createArgument()
c.createArgument().setValue("arg1")
c.setJar("myfile.jar")
c.createVmArgument()
c.createVmArgument().setValue("-classic")
c.createVmArgument()
c.createVmArgument().setValue("-Dx=y")
c.getCommandline()
System.getProperty("java.class.path")
System.getProperty("key")
v.setKey("key")
v.setValue("value")
c.addSysproperty(v)
project.setProperty("key2","value2")
ps.setProject(project)
ps.appendName("key2")
c.addSyspropertyset(ps)
c.setSystemProperties()
System.getProperty("java.class.path")
System.getProperty("key")
System.getProperty("key")
System.getProperties()
hasKey("java.class.path")
System.getProperty("key2")
System.getProperty("key2")
c.restoreSystemProperties()
System.getProperty("key")
System.getProperty("key2")
c.createArgument()
c.createArgument().setValue("org.apache.tools.ant.CommandlineJavaTest")
c.setClassname("junit.textui.TestRunner")
c.createVmArgument()
c.createVmArgument().setValue("-Djava.compiler=NONE")
a.setProject(project)
ea.setClass("junit.textui.TestRunner")
a.addEnable(ea)
c.setAssertions(a)
c.getCommandline()
c.clone()
c2.getCommandline()
Commandline.translateCommandline("1 2 3")
Commandline.translateCommandline("")
Commandline.translateCommandline(null)
Commandline.translateCommandline("1 \'2\' 3")
Commandline.translateCommandline("1 \"2\" 3")
Commandline.translateCommandline("1 \"2 3\" 4")
Commandline.translateCommandline("1 \"2\'3\" 4")
Commandline.translateCommandline("1 \'2 3\' 4")
Commandline.translateCommandline("1 \'2\"3\' 4")
Commandline.translateCommandline("1 2\\ 3 4")
Commandline.translateCommandline("\"\" a")
Commandline.translateCommandline("a \"\"")
Commandline.translateCommandline("\"\"")
Commandline.translateCommandline("\'\' a")
Commandline.translateCommandline("a \'\'")
Commandline.translateCommandline("\'\'")
thrown.expect(BuildException.class)
thrown.expectMessage("unbalanced quotes in a \'b c")
Commandline.translateCommandline("a \'b c")
thrown.expect(BuildException.class)
thrown.expectMessage("unbalanced quotes in a \"b c")
Commandline.translateCommandline("a \"b c")
Commandline.toString(newString[0])
Commandline.toString(null)
Commandline.toString(newString[]{"1","2","3"})
Commandline.toString(newString[]{"1","2 3"})
Commandline.toString(newString[]{"1","2\'3"})
Commandline.toString(newString[]{"1","2\"3"})
c.setExecutable("awk")
c.createArgument()
c.createArgument().setValue("'NR == 2 { print $NF }'")
c.getCommandline()
c.createArgument()
a.setValue("foo")
a.setPrefix("-f=")
c.getCommandline()
c.createArgument()
a.setValue("foo")
a.setSuffix(",1")
c.getCommandline()
c.createArgument()
a.setLine("one two")
a.setPrefix("number ")
a.setSuffix(".")
c.getCommandline()
Arrays.asList(newObject[][]{{"description1","Single","Test Project Description"},{"description2","Multi line","Multi Line\nProject Description"},{"description3","Multi instance","Multi Instance Project Description"},{"description4","Multi instance nested","Multi Instance Nested Project Description"}})
buildRule.configureProject("src/etc/testcases/types/"+fileName+".xml")
buildRule.getProject()
buildRule.getProject().getDescription()
super.setUp()
getInstance()
ds.setProject(getProject())
getProject()
thrown.expect(BuildException.class)
thrown.expectMessage("dummy doesn\'t denote a DirSet")
fs.setProject(getProject())
getProject()
getProject()
getProject().addReference("dummy",fs)
ds.setRefid(newReference(getProject(),"dummy"))
getProject()
ds.getDir(getProject())
getProject()
thrown.expect(BuildException.class)
thrown.expectMessage("dummy doesn\'t denote a FileSet")
getProject()
getProject().addReference("dummy",ds)
fs.setRefid(newReference(getProject(),"dummy"))
getProject()
fs.getDir(getProject())
getProject()
File.createTempFile("DirSetTest","")
tmp.delete()
a.mkdirs()
bc.mkdirs()
newFileOutputStream(newFile(a,"x")).close()
newFileOutputStream(newFile(b,"x")).close()
newFileOutputStream(newFile(bc,"x")).close()
ds.setDir(tmp)
ds.setIncludes("b/")
ds.toString()
newFile(tmp,"a/x").delete()
newFile(tmp,"a").delete()
newFile(tmp,"b/c/x").delete()
newFile(tmp,"b/c").delete()
newFile(tmp,"b/x").delete()
newFile(tmp,"b").delete()
tmp.delete()
t1.containsValue(value)
value.toUpperCase()
t1.containsValue(value.toUpperCase())
value.toUpperCase()
t1.containsValue("d")
(newTestNull()).containsValue("d")
EnumeratedAttribute.getInstance(Factory.class,"one")
ea.getValue()
EnumeratedAttribute.getInstance(Factory.class,"illegal")
Arrays.stream(expected)
Arrays.stream(expected).forEach(newTestNormal()::setValue)
newTestNormal().setValue("d")
newTestNull().setValue("d")
buildRule.configureProject("src/etc/testcases/types/filelist.xml")
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
f.setDir(buildRule.getProject().resolveFile("."))
buildRule.getProject()
buildRule.getProject().resolveFile(".")
f.setRefid(newReference(buildRule.getProject(),"dummyref"))
buildRule.getProject()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
f.setFiles("foo.xml,c/d/bar.xml")
f.setRefid(newReference(buildRule.getProject(),"dummyref"))
buildRule.getProject()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
f.setRefid(newReference(buildRule.getProject(),"dummyref"))
buildRule.getProject()
f.setFiles("a/b/foo.java")
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
f.setRefid(newReference(buildRule.getProject(),"dummyref"))
buildRule.getProject()
f.setDir(buildRule.getProject().resolveFile("."))
buildRule.getProject()
buildRule.getProject().resolveFile(".")
thrown.expect(BuildException.class)
thrown.expectMessage("This data type contains a circular reference.")
buildRule.getProject()
buildRule.getProject().addReference("dummy",f)
f.setRefid(newReference(buildRule.getProject(),"dummy"))
buildRule.getProject()
f.getDir(buildRule.getProject())
buildRule.getProject()
thrown.expect(BuildException.class)
thrown.expectMessage("This data type contains a circular reference.")
buildRule.getProject()
buildRule.getProject().addReference("dummy",f)
f.setRefid(newReference(buildRule.getProject(),"dummy"))
buildRule.getProject()
f.getFiles(buildRule.getProject())
buildRule.getProject()
thrown.expect(BuildException.class)
thrown.expectMessage("This data type contains a circular reference.")
buildRule.getProject()
buildRule.getProject().addReference("dummy",f)
f.setRefid(newReference(buildRule.getProject(),"dummyA"))
buildRule.getProject()
buildRule.getProject()
buildRule.getProject().addReference("dummyA",fa)
fa.setRefid(newReference(buildRule.getProject(),"dummyB"))
buildRule.getProject()
buildRule.getProject()
buildRule.getProject().addReference("dummyB",fb)
fb.setRefid(newReference(buildRule.getProject(),"dummy"))
buildRule.getProject()
f.getDir(buildRule.getProject())
buildRule.getProject()
thrown.expect(BuildException.class)
thrown.expectMessage("This data type contains a circular reference.")
buildRule.getProject()
buildRule.getProject().addReference("dummy",f)
f.setRefid(newReference(buildRule.getProject(),"dummyA"))
buildRule.getProject()
buildRule.getProject()
buildRule.getProject().addReference("dummyA",fa)
fa.setRefid(newReference(buildRule.getProject(),"dummyB"))
buildRule.getProject()
buildRule.getProject()
buildRule.getProject().addReference("dummyB",fb)
fb.setRefid(newReference(buildRule.getProject(),"dummy"))
buildRule.getProject()
f.getFiles(buildRule.getProject())
buildRule.getProject()
buildRule.getProject()
buildRule.getProject().addReference("dummy",f)
f.setRefid(newReference(buildRule.getProject(),"dummyA"))
buildRule.getProject()
buildRule.getProject()
buildRule.getProject().addReference("dummyA",fa)
fa.setRefid(newReference(buildRule.getProject(),"dummyB"))
buildRule.getProject()
buildRule.getProject()
buildRule.getProject().addReference("dummyB",fb)
fb.setDir(buildRule.getProject().resolveFile("."))
buildRule.getProject()
buildRule.getProject().resolveFile(".")
f.getDir(buildRule.getProject())
buildRule.getProject()
buildRule.getProject()
buildRule.getProject().getBaseDir()
buildRule.executeTarget("simple")
buildRule.getLog()
buildRule.executeTarget("double")
buildRule.getLog()
buildRule.executeTarget("nested")
buildRule.getLog()
buildRule.configureProject("src/etc/testcases/types/fileset.xml")
buildRule.executeTarget("no-encoding")
buildRule.getLog()
buildRule.executeTarget("encoding")
buildRule.getLog()
buildRule.configureProject("src/etc/testcases/types/filterset.xml")
buildRule.executeTarget("cleanup")
buildRule.executeTarget("test1")
compareFiles("gold/filterset1.txt","dest1.txt")
buildRule.executeTarget("test2")
compareFiles("gold/filterset2.txt","dest2.txt")
buildRule.executeTarget("test3")
compareFiles("gold/filterset3.txt","dest3.txt")
fs.addFilter("test","@test1@")
fs.addFilter("test1","@test2@")
fs.addFilter("test2","it works")
fs.setBeginToken("@")
fs.setEndToken("@")
fs.replaceTokens(line)
fs.addFilter("test","@test1@")
fs.addFilter("test1","@test2@")
fs.addFilter("test2","@test@")
fs.addFilter("test3","testvalue")
fs.setBeginToken("@")
fs.setEndToken("@")
fs.replaceTokens(line)
fs.addFilter("test","@test1@")
fs.addFilter("test1","@test@")
fs.addFilter("test2","testvalue")
fs.setBeginToken("@")
fs.setEndToken("@")
fs.setRecurse(false)
fs.replaceTokens(line)
filters.setBeginToken("<")
filters.setEndToken(">")
filters.addFilter("ul","<itemizedlist>")
filters.addFilter("/ul","</itemizedList>")
filters.addFilter("li","<listitem>")
filters.addFilter("/li","</listitem>")
filters.replaceTokens(line)
buildRule.executeTarget("test-nested-filtersets")
buildRule.getProject()
buildRule.getProject().getReference("1")
fs.getFilterHash()
filters.size()
filters.get("token1")
buildRule.getProject()
buildRule.getProject().getReference("2")
fs.getFilterHash()
filters.size()
filters.get("aaaa")
filters.get("bbbb")
buildRule.getProject()
buildRule.getProject().getReference("3")
fs.getFilterHash()
filters.size()
filters.get("token4")
buildRule.getProject()
buildRule.getProject().getReference("5")
fs.getFilterHash()
filters.size()
filters.get("token1")
buildRule.executeTarget("testFiltersFileElement")
buildRule.executeTarget("testFiltersFileAttribute")
buildRule.executeTarget("testMultipleFiltersFiles")
buildRule.executeTarget("testMissingFiltersFile")
buildRule.executeTarget("testAllowMissingFiltersFile")
buildRule.getProject()
buildRule.getProject().resolveFile(name1)
buildRule.getProject()
buildRule.getProject().resolveFile(name2)
file1.exists()
file2.exists()
file1.length()
file2.length()
fis1.read(buffer1)
fis2.read(buffer2)
buildRule.configureProject("src/etc/testcases/types/flexinteger.xml")
buildRule.executeTarget("test")
buildRule.getProject()
buildRule.getProject().getProperty("flexint.value1")
buildRule.getProject()
buildRule.getProject().getProperty("flexint.value2")
taskProject.setNewProperty(propName,value.toString())
value.toString()
project.setBasedir(".")
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
m.setFrom("*.java")
m.setRefid(newReference(project,"dummy"))
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
m.setRefid(newReference(project,"dummy"))
m.setFrom("*.java")
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
m.setRefid(newReference(project,"dummy"))
m.setTo("*.java")
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
m.setRefid(newReference(project,"dummy"))
mt.setValue("glob")
m.setType(mt)
thrown.expect(BuildException.class)
thrown.expectMessage("This data type contains a circular reference.")
project.addReference("dummy",m)
m.setRefid(newReference(project,"dummy"))
m.getImplementation()
thrown.expect(BuildException.class)
thrown.expectMessage("This data type contains a circular reference.")
project.addReference("dummy",m)
m.setRefid(newReference(project,"dummy2"))
project.addReference("dummy2",m2)
m2.setRefid(newReference(project,"dummy3"))
project.addReference("dummy3",m3)
m3.setRefid(newReference(project,"dummy"))
m.getImplementation()
project.addReference("dummy",m)
m.setRefid(newReference(project,"dummy2"))
project.addReference("dummy2",m2)
m2.setRefid(newReference(project,"dummy3"))
project.addReference("dummy3",m3)
mt.setValue("glob")
m3.setType(mt)
m3.setFrom("*.java")
m3.setTo("*.class")
m.getImplementation()
instanceOf(GlobPatternMapper.class)
fmm.mapFileName("a.java")
mt.setValue("glob")
mapper1.setType(mt)
mapper1.setFrom("from*")
mapper1.setTo("to*")
mapper3.setTo("mergefile")
m.addConfiguredMapper(mapper1)
m.add(mapper2)
m.add(mapper3)
m.getImplementation()
fileNameMapper.mapFileName("fromfilename")
Arrays.asList(targets)
hasItem("tofilename")
hasItem("fromfilename")
hasItem("mergefile")
mapperAB.setFrom("a")
mapperAB.setTo("b")
mapperBC.setFrom("b")
mapperBC.setTo("c")
mapperDEF.setFrom("c")
mapperDEF.setTo("def")
mapperGHI.setFrom("c")
mapperGHI.setTo("ghi")
m.add(mapperDEF)
m.add(mapperGHI)
chained.setClassname(ChainedMapper.class.getName())
ChainedMapper.class.getName()
chained.add(mapperAB)
chained.add(mapperBC)
chained.addConfiguredMapper(m)
chained.getImplementation()
fileNameMapper.mapFileName("a")
Arrays.asList(targets)
hasItem("def")
hasItem("ghi")
fileNameMapper.mapFileName("z")
buildRule.configureProject("src/etc/testcases/types/mapper.xml")
buildRule.executeTarget("test1")
moduleVersion.setNumber("1.1.3")
moduleVersion.setPreRelease("ea")
moduleVersion.setBuild("25")
moduleVersion.toModuleVersionString()
versionStr.matches("1\\.1\\.3[-+]ea\\+25")
moduleVersion.setNumber("1.1.3")
moduleVersion.setPreRelease("ea")
moduleVersion.toModuleVersionString()
versionStr.matches("1\\.1\\.3[-+]ea")
moduleVersion.setNumber("1.1.3")
moduleVersion.setBuild("25")
moduleVersion.toModuleVersionString()
versionStr.matches("1\\.1\\.3[-+]\\+25")
moduleVersion.setNumber("1.1.3")
moduleVersion.toModuleVersionString()
expected.expect(IllegalStateException.class)
moduleVersion.toModuleVersionString()
expected.expect(NullPointerException.class)
moduleVersion.setNumber(null)
expected.expect(IllegalArgumentException.class)
moduleVersion.setNumber("1-1-3")
expected.expect(IllegalArgumentException.class)
moduleVersion.setNumber("1.1+3")
expected.expect(IllegalArgumentException.class)
moduleVersion.setNumber("1.1.3")
moduleVersion.setPreRelease("ea+interim")
System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY)
project.setBasedir(System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY))
System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY)
p.list()
newFile(File.separator).getAbsolutePath()
project.setBasedir(newFile(project.getBaseDir(),"src/etc").getAbsolutePath())
project.getBaseDir()
newFile(project.getBaseDir(),"src/etc").getAbsolutePath()
p.list()
endsWith("/src")
endsWith("/src/etc/testcases")
endsWith("\\src")
endsWith("\\src\\etc\\testcases")
endsWith("\\src")
endsWith("\\src\\etc\\testcases")
p.list()
newFile(File.separator).getAbsolutePath()
p.list()
endsWith("/c")
l[0].toLowerCase(Locale.US)
l[0].toLowerCase(Locale.US)
p.list()
endsWith("/c")
endsWith("/d")
l[0].toLowerCase(Locale.US)
l[1].toLowerCase(Locale.US)
l[0].toLowerCase(Locale.US)
l[1].toLowerCase(Locale.US)
p.list()
endsWith("/c")
l[0].toLowerCase(Locale.US)
l[0].toLowerCase(Locale.US)
p.list()
endsWith("/c")
endsWith("/d")
l[0].toLowerCase(Locale.US)
l[1].toLowerCase(Locale.US)
l[0].toLowerCase(Locale.US)
l[1].toLowerCase(Locale.US)
p.list()
endsWith("/sys")
l[0].toLowerCase(Locale.US)
endsWith("\\sys")
endsWith("\\test")
p.list()
endsWith("/sys")
endsWith("/dev")
l[0].toLowerCase(Locale.US)
l[1].toLowerCase(Locale.US)
endsWith("\\sys")
endsWith("\\test")
endsWith("\\dev")
endsWith("\\temp")
p.list()
endsWith("/sys")
l[0].toLowerCase(Locale.US)
endsWith("\\sys")
endsWith("\\test")
p.list()
endsWith("/sys")
endsWith("/dev")
l[0].toLowerCase(Locale.US)
l[1].toLowerCase(Locale.US)
endsWith("\\sys")
endsWith("\\test")
endsWith("\\dev")
endsWith("\\temp")
p.list()
endsWith("/SYS")
l[0].toLowerCase(Locale.US)
l[1].toLowerCase(Locale.US)
endsWith("\\SYS")
endsWith("\\JAVA\\lib\\rt.jar")
endsWith("\\JAVA\\lib\\classes.zip")
p.list()
newFile(File.separator).getAbsolutePath()
p.setLocation(newFile(File.separatorChar+"a"))
p.list()
l[0].substring(1)
p.list()
p.setLocation(newFile("/c"))
p.list()
p.setPath("\\d;\\e")
p.list()
p.append(newPath(project,"\\f"))
p.list()
p.createPath()
p.createPath().setLocation(newFile("/g"))
p.list()
p.list()
p.setPath("")
p.list()
p.append(newPath(project))
p.list()
p.createPath()
p.list()
p.list()
newFile(File.separator).getAbsolutePath()
p.setLocation(newFile(base,"a"))
p.list()
p.setPath("\\a;/a")
p.list()
p.append(newPath(project,"/a;\\a:\\a"))
p.list()
p.createPath()
p.createPath().setPath("\\a:/a")
p.list()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
p.setRefid(newReference(project,"dummyref"))
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
p.setLocation(newFile("/a"))
p.setRefid(newReference(project,"dummyref"))
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
project.addReference("dummyref",another)
p.setRefid(newReference(project,"dummyref"))
p.setLocation(newFile("/a"))
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
p.setRefid(newReference(project,"dummyref"))
p.setPath("/a;\\a")
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
p.setRefid(newReference(project,"dummyref"))
p.createPath()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
p.setRefid(newReference(project,"dummyref"))
p.createPathElement()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
p.setRefid(newReference(project,"dummyref"))
p.addFileset(newFileSet())
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
p.setRefid(newReference(project,"dummyref"))
p.addFilelist(newFileList())
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
p.setRefid(newReference(project,"dummyref"))
p.addDirset(newDirSet())
thrown.expect(BuildException.class)
thrown.expectMessage("This data type contains a circular reference.")
project.addReference("dummy",p)
p.setRefid(newReference(project,"dummy"))
p.list()
thrown.expect(BuildException.class)
thrown.expectMessage("This data type contains a circular reference.")
project.addReference("dummy1",p)
p.createPath()
project.addReference("dummy2",pa)
pa.createPath()
project.addReference("dummy3",pb)
pb.setRefid(newReference(project,"dummy1"))
p.list()
project.addReference("dummy1",p)
p.createPath()
project.addReference("dummy2",pa)
pa.createPath()
project.addReference("dummy3",pb)
pb.setLocation(newFile("/a"))
p.list()
l[0].substring(1)
f.setProject(project)
f.setDir(project.resolveFile("."))
project.resolveFile(".")
f.setFiles("build.xml")
p.addFilelist(f)
p.list()
project.resolveFile("build.xml")
project.resolveFile("build.xml").getAbsolutePath()
f.setProject(project)
f.setDir(project.resolveFile("."))
project.resolveFile(".")
f.setIncludes("build.xml")
p.addFileset(f)
p.list()
project.resolveFile("build.xml")
project.resolveFile("build.xml").getAbsolutePath()
d.setProject(project)
d.setDir(project.resolveFile("."))
project.resolveFile(".")
System.getProperty("build.tests.value")
Paths.get(s)
Paths.get(s).getParent()
Paths.get(s).getParent().getFileName()
Paths.get(s).getParent().getFileName().toString()
Paths.get(s).getParent().getFileName().toString().equals("ant")
d.setIncludes(n)
p.addDirset(d)
p.list()
project.resolveFile(n)
project.resolveFile(n).getAbsolutePath()
thrown.expect(BuildException.class)
thrown.expectMessage("circular")
p.append(p)
p.list()
project.setBasedir(".")
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
p.setIncludes("**/*.java")
p.setRefid(newReference(project,"dummyref"))
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
p.setRefid(newReference(project,"dummyref"))
p.setIncludes("**/*.java")
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
p.setRefid(newReference(project,"dummyref"))
p.setIncludesfile(newFile("/a"))
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
p.setRefid(newReference(project,"dummyref"))
p.setExcludes("**/*.java")
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
p.setRefid(newReference(project,"dummyref"))
p.setExcludesfile(newFile("/a"))
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
p.setRefid(newReference(project,"dummyref"))
p.createInclude()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
p.setRefid(newReference(project,"dummyref"))
p.createExclude()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
p.setRefid(newReference(project,"dummyref"))
p.createIncludesFile()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
p.setRefid(newReference(project,"dummyref"))
p.createExcludesFile()
thrown.expect(BuildException.class)
thrown.expectMessage("This data type contains a circular reference.")
project.addReference("dummy",p)
p.setRefid(newReference(project,"dummy"))
p.getIncludePatterns(project)
thrown.expect(BuildException.class)
thrown.expectMessage("This data type contains a circular reference.")
project.addReference("dummy",p)
p.setRefid(newReference(project,"dummy"))
p.getExcludePatterns(project)
thrown.expect(BuildException.class)
thrown.expectMessage("This data type contains a circular reference.")
project.addReference("dummy",p)
p.setRefid(newReference(project,"dummyA"))
project.addReference("dummyA",pa)
pa.setRefid(newReference(project,"dummyB"))
project.addReference("dummyB",pb)
pb.setRefid(newReference(project,"dummy"))
p.getIncludePatterns(project)
thrown.expect(BuildException.class)
thrown.expectMessage("This data type contains a circular reference.")
project.addReference("dummy",p)
p.setRefid(newReference(project,"dummyA"))
project.addReference("dummyA",pa)
pa.setRefid(newReference(project,"dummyB"))
project.addReference("dummyB",pb)
pb.setRefid(newReference(project,"dummy"))
p.getExcludePatterns(project)
project.addReference("dummy",p)
p.setRefid(newReference(project,"dummyA"))
project.addReference("dummyA",pa)
pa.setRefid(newReference(project,"dummyB"))
project.addReference("dummyB",pb)
pb.setIncludes("include")
pb.createExclude()
pb.createExclude().setName("exclude")
p.getIncludePatterns(project)
pb.getExcludePatterns(project)
p.setIncludes("**/*.java")
nested.setExcludes("**/*.class")
p.addConfiguredPatternset(nested)
p.getExcludePatterns(project)
p.getIncludePatterns(project)
testFolder.newFile("ant.pattern")
w.write("\u00e4\n")
p.createIncludesFile()
ne.setName(testFile.getAbsolutePath())
testFile.getAbsolutePath()
ne.setEncoding(cs.name())
cs.name()
p.getIncludePatterns(project)
perm.setActions("read, write")
perm.setName("user.*")
perm.setClass("java.util.PropertyPermission")
perms.addConfiguredGrant(perm)
perm.setActions("read")
perm.setName("java.home")
perm.setClass("java.util.PropertyPermission")
perms.addConfiguredGrant(perm)
perm.setActions("read")
perm.setName("file.encoding")
perm.setClass("java.util.PropertyPermission")
perms.addConfiguredGrant(perm)
perm.setActions("write")
perm.setName("user.home")
perm.setClass("java.util.PropertyPermission")
perms.addConfiguredRevoke(perm)
perm.setActions("read")
perm.setName("os.*")
perm.setClass("java.util.PropertyPermission")
perms.addConfiguredRevoke(perm)
perm.setActions("read")
perm.setName("<<ALL FILES>>")
perm.setClass("java.io.FilePermission")
perms.addConfiguredGrant(perm)
perms.setSecurityManager()
perms.restoreSecurityManager()
System.getProperty("line.separator")
System.setProperty("user.name",System.getProperty("user.name"))
System.getProperty("user.name")
System.setProperty("user.home",System.getProperty("user.home"))
System.getProperty("user.home")
System.getProperty("os.name")
System.setProperty("line.separator",System.lineSeparator())
System.lineSeparator()
thrown.expect(ExitException.class)
thrown.expect(hasProperty("status",equalTo(3)))
hasProperty("status",equalTo(3))
equalTo(3)
System.out.println("If this is the last line on standard out the testExit f.a.i.l.e.d")
System.exit(3)
System.out.println("testExit successful.")
Arrays.asList(newObject[][]{{"fileset","types.FileSet"},{"fileset-ant-type","types.PolyTest$MyFileSet"},{"path","types.Path"},{"path-ant-type","types.PolyTest$MyPath"}})
buildRule.configureProject("src/etc/testcases/types/poly.xml")
buildRule.executeTarget(targetName)
buildRule.getLog()
containsString(outcome)
super(project)
log("class of path is "+path.getClass())
path.getClass()
log("class of fileset is "+fileset.getClass())
fileset.getClass()
buildRule.configureProject("src/etc/testcases/types/redirector.xml",Project.MSG_VERBOSE)
buildRule.executeTarget("test1")
buildRule.getProject()
buildRule.getProject().getReference("test1")
buildRule.executeTarget("test2")
buildRule.executeTarget("test3")
buildRule.executeTarget("test4")
buildRule.executeTarget("testLogInputString")
buildRule.getLog()
buildRule.getLog().contains("testLogInputString can-cat")
buildRule.getFullLog()
containsString("Using input string")
buildRule.executeTarget("testRefid")
buildRule.configureProject("src/etc/testcases/types/resources/resourcelist.xml")
buildRule.getProject()
testoutputbe(newResource("foo"))
testoutputbe(r)
r.getValue()
testoutput(r)
r.getValue()
testoutputbe(r)
project.getProperty("bar")
project.setNewProperty("bar","bar")
testoutput(r)
project.setNewProperty("bar","bar")
project.getProperty("bar")
thrown.expect(UnknownServiceException.class)
project.resolveFile("testurloutput")
FileUtils.getFileUtils()
FileUtils.getFileUtils().createNewFile(f)
testoutput(newURLResource(f))
f.delete()
f.deleteOnExit()
thrown.expect(UnsupportedOperationException.class)
z.setProject(project)
create.setValue("create")
z.setWhenempty(create)
z.setBasedir(project.getBaseDir())
project.getBaseDir()
z.setExcludes("**/*")
project.resolveFile("foo")
z.setDestFile(f)
z.execute()
r.setZipfile(f)
r.setName("foo")
testoutputbe(r)
f.delete()
f.deleteOnExit()
testoutput(dest)
ResourceUtils.copyResource(newStringResource("foo"),dest,null)
super.setUp()
getInstance()
thrown.expect(BuildException.class)
thrown.expectMessage("Cannot set both dir and src attributes")
tfs.setSrc(newFile("example.tar"))
tfs.setDir(newFile("examples"))
thrown.expect(BuildException.class)
thrown.expectMessage("Cannot set both dir and src attributes")
tfs.setDir(newFile("examples"))
tfs.setSrc(newFile("example.tar"))
thrown.expect(BuildException.class)
thrown.expectMessage("Cannot set both fullpath and prefix attributes")
tfs.setSrc(newFile("example.tar"))
tfs.setPrefix("/examples")
tfs.setFullpath("/doc/manual/index.html")
thrown.expect(BuildException.class)
thrown.expectMessage("Cannot set both fullpath and prefix attributes")
tfs.setSrc(newFile("example.tar"))
tfs.setFullpath("/doc/manual/index.html")
tfs.setPrefix("/examples")
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
tfs.setRefid(newReference(getProject(),"test"))
getProject()
tfs.setSrc(newFile("example.tar"))
tfs.setSrc(newFile("example.tar"))
tfs.setPrefix("/examples")
tfs.setFileMode("600")
tfs.setDirMode("530")
getProject()
getProject().addReference("test",tfs)
getInstance()
zid.setRefid(newReference(getProject(),"test"))
getProject()
tfs.getSrc(getProject())
getProject()
zid.getSrc(getProject())
getProject()
tfs.getPrefix(getProject())
getProject()
zid.getPrefix(getProject())
getProject()
tfs.getFileMode(getProject())
getProject()
zid.getFileMode(getProject())
getProject()
tfs.getDirMode(getProject())
getProject()
zid.getDirMode(getProject())
getProject()
buildRule.configureProject("src/etc/testcases/types/xmlcatalog.xml")
buildRule.executeTarget("testentitynocatalog")
buildRule.getProject()
buildRule.getProject().getProperty("val1")
buildRule.executeTarget("testentitywithcatalog")
buildRule.getProject()
buildRule.getProject().getProperty("val2")
buildRule.executeTarget("testdocumentnocatalog")
buildRule.getProject()
buildRule.getProject().getProperty("val3")
buildRule.executeTarget("testdocumentwithcatalog")
buildRule.getProject()
buildRule.getProject().getProperty("val4")
cat.setProject(project)
JAXPUtils.getSystemId(file)
ExpectedException.none()
System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY)
project.setBasedir(System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY))
System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY)
newCatalog()
catalog.resolveEntity("PUBLIC ID ONE","i/dont/exist.dtd")
toURLString(newFile(project.getBaseDir()+"/i/dont/exist.dtd"))
project.getBaseDir()
catalog.resolve("i/dont/exist.dtd",null)
fileURLPartWithoutLeadingSlashes((SAXSource)result)
endsWith(resultStr)
result.getInputSource()
result.getInputSource().getSystemId()
newURL(result.getInputSource().getSystemId()).getFile()
resultStr.startsWith("/")
resultStr.substring(1)
dtd.setPublicId("PUBLIC ID ONE")
dtd.setLocation("i/dont/exist.dtd")
catalog.resolveEntity("PUBLIC ID ONE","i/dont/exist.dtd")
catalog.resolve("i/dont/exist.dtd",null)
toURLString(newFile(project.getBaseDir().toURL()+"/i/dont/exist.dtd"))
project.getBaseDir()
project.getBaseDir().toURL()
fileURLPartWithoutLeadingSlashes((SAXSource)result)
endsWith(resultStr)
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
dtd.setPublicId("PUBLIC ID ONE")
dtd.setLocation("i/dont/exist.dtd")
catalog.addDTD(dtd)
project.addReference("catalog",catalog)
catalog.setRefid(newReference(project,"dummyref"))
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
newCatalog()
catalogA.setRefid(newReference(project,"catalog"))
catalogA.addConfiguredXMLCatalog(catalog)
thrown.expect(BuildException.class)
thrown.expectMessage("This data type contains a circular reference.")
project.addReference("catalog",catalog)
catalog.setRefid(newReference(project,"catalog"))
catalog.resolveEntity("PUBLIC ID ONE","i/dont/exist.dtd")
thrown.expect(BuildException.class)
thrown.expectMessage("This data type contains a circular reference.")
project.addReference("catalog",catalog)
newCatalog()
project.addReference("catalogA",catalogA)
newCatalog()
project.addReference("catalogB",catalogB)
catalogB.setRefid(newReference(project,"catalog"))
catalogA.setRefid(newReference(project,"catalogB"))
catalog.setRefid(newReference(project,"catalogA"))
catalog.resolveEntity("PUBLIC ID ONE","i/dont/exist.dtd")
dtd.setPublicId("-//stevo//DTD doc 1.0//EN")
project.resolveFile("src/etc/testcases/taskdefs/optional/xml/doc.dtd")
project.resolveFile("src/etc/testcases/taskdefs/optional/xml/doc.dtd").getAbsolutePath()
dtd.setLocation(sysid)
catalog.addDTD(dtd)
catalog.resolveEntity("-//stevo//DTD doc 1.0//EN","nap:chemical+brothers")
project.resolveFile(sysid)
toURLString(dtdFile)
result.getSystemId()
dtd.setPublicId("-//stevo//DTD doc 1.0//EN")
dtd.setLocation(sysid)
catalog.addDTD(dtd)
catalog.resolveEntity("-//stevo//DTD doc 1.0//EN","nap:chemical+brothers")
project.resolveFile(sysid)
toURLString(dtdFile)
result.getSystemId()
dtd.setPublicId(publicId)
dtd.setLocation(sysid)
catalog.addDTD(dtd)
entity.setPublicId(uri)
entity.setLocation(uriLoc)
catalog.addEntity(entity)
project.addReference("catalog",catalog)
newCatalog()
project.addReference("catalogA",catalogA)
newCatalog()
project.addReference("catalogB",catalogB)
catalogA.setRefid(newReference(project,"catalog"))
catalogB.setRefid(newReference(project,"catalogA"))
catalogB.resolveEntity(publicId,"nap:chemical+brothers")
project.resolveFile(sysid)
toURLString(dtdFile)
isResult.getSystemId()
catalog.resolve(uri,null)
project.resolveFile(uriLoc)
toURLString(xmlFile)
result.getSystemId()
dtd.setPublicId(publicId)
dtd.setLocation(dtdLoc)
catalog.addDTD(dtd)
entity.setPublicId(uri)
entity.setLocation(uriLoc)
catalog.addEntity(entity)
newCatalog()
catalogA.addConfiguredXMLCatalog(catalog)
catalogA.resolveEntity(publicId,"nap:chemical+brothers")
project.resolveFile(dtdLoc)
toURLString(dtdFile)
isResult.getSystemId()
catalog.resolve(uri,null)
project.resolveFile(uriLoc)
toURLString(xmlFile)
result.getSystemId()
toURLString(project.getBaseDir())
project.getBaseDir()
entity.setPublicId(uri)
entity.setLocation(uriLoc)
catalog.addEntity(entity)
catalog.resolve(uri,base)
project.resolveFile("src/"+uriLoc)
toURLString(xmlFile)
result.getSystemId()
project.getBaseDir()
project.getBaseDir().toString()
dtd.setPublicId(publicId)
dtd.setLocation(dtdLoc)
catalog.addDTD(dtd)
project.getBaseDir()
project.getBaseDir().toString()
entity.setPublicId(uri)
entity.setLocation(uriLoc)
catalog.addEntity(entity)
aPath.append(newPath(project,path2))
catalog.setClasspath(aPath)
catalog.resolveEntity(publicId,"nap:chemical+brothers")
isResult.getSystemId()
newURL(isResult.getSystemId()).getFile()
project.resolveFile("src/etc/"+dtdLoc)
toURLString(dtdFile)
endsWith(resultStr1)
catalog.resolve(uri,null)
project.resolveFile("src/"+uriLoc)
result.getSystemId()
newURL(result.getSystemId()).getFile()
toURLString(xmlFile)
endsWith(resultStr)
super.setUp()
getInstance()
thrown.expect(BuildException.class)
thrown.expectMessage("Cannot set both dir and src attributes")
zfs.setSrc(newFile("example.zip"))
zfs.setDir(newFile("examples"))
thrown.expect(BuildException.class)
thrown.expectMessage("Cannot set both dir and src attributes")
zfs.setDir(newFile("examples"))
zfs.setSrc(newFile("example.zip"))
thrown.expect(BuildException.class)
thrown.expectMessage("Cannot set both fullpath and prefix attributes")
zfs.setSrc(newFile("example.zip"))
zfs.setPrefix("/examples")
zfs.setFullpath("/doc/manual/index.html")
thrown.expect(BuildException.class)
thrown.expectMessage("Cannot set both fullpath and prefix attributes")
zfs.setSrc(newFile("example.zip"))
zfs.setFullpath("/doc/manual/index.html")
zfs.setPrefix("/examples")
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
zfs.setRefid(newReference(getProject(),"test"))
getProject()
zfs.setSrc(newFile("example.zip"))
zfs.setSrc(newFile("example.zip"))
zfs.setPrefix("/examples")
zfs.setFileMode("600")
zfs.setDirMode("530")
getProject()
getProject().addReference("test",zfs)
getInstance()
zid.setRefid(newReference(getProject(),"test"))
getProject()
zfs.getSrc(getProject())
getProject()
zid.getSrc(getProject())
getProject()
zfs.getPrefix(getProject())
getProject()
zid.getPrefix(getProject())
getProject()
zfs.getFileMode(getProject())
getProject()
zid.getFileMode(getProject())
getProject()
zfs.getDirMode(getProject())
getProject()
zid.getDirMode(getProject())
getProject()
buildRule.configureProject("src/etc/testcases/types/mappers/globmapper.xml")
buildRule.executeTarget("ignore.case")
buildRule.executeTarget("handle.dirsep")
buildRule.configureProject("src/etc/testcases/types/mappers/regexpmapper.xml")
buildRule.executeTarget("ignore.case")
buildRule.executeTarget("handle.dirsep")
buildRule.configureProject("src/etc/testcases/types/mappers/scriptmapper.xml")
buildRule.executeTarget("testClear")
buildRule.executeTarget("testSetMultiple")
buildRule.executeTarget("testPassthrough")
buildRule.configureProject("src/etc/testcases/types/selectors/scriptselector.xml")
thrown.expect(BuildException.class)
thrown.expectMessage("script language must be specified")
buildRule.executeTarget("testNolanguage")
buildRule.executeTarget("testSelectionSetByDefault")
buildRule.executeTarget("testSelectionSetWorks")
buildRule.executeTarget("testSelectionClearWorks")
buildRule.executeTarget("testFilenameAttribute")
buildRule.executeTarget("testFileAttribute")
buildRule.executeTarget("testBasedirAttribute")
buildRule.configureProject("src/etc/testcases/taskdefs/optional/depend/depend.xml")
buildRule.executeTarget("testbasicset")
getFiles()
files.size()
hasKey("A.class")
hasKey("B.class")
hasKey("C.class")
hasKey("D.class")
buildRule.executeTarget("testsmallset")
getFiles()
files.size()
hasKey("B.class")
hasKey("C.class")
buildRule.executeTarget("testcomboset")
getFiles()
files.size()
hasKey("C.class")
buildRule.executeTarget("testbyreference")
buildRule.executeTarget("testmethodparam")
getFiles()
files.size()
hasKey("A.class")
hasKey("B.class")
hasKey("C.class")
hasKey("D.class")
hasKey("E.class")
buildRule.executeTarget("testmethodparaminner")
getFiles()
files.size()
hasKey("test"+File.separator+"Outer$Inner.class")
hasKey("test"+File.separator+"Outer.class")
hasKey("test"+File.separator+"ContainsOnlyInner.class")
hasKey("test"+File.separator+"MethodParam.class")
buildRule.executeTarget("testresourcecollection")
buildRule.getProject()
buildRule.getProject().getReference(RESULT_FILESET)
resultFileSet.getDirectoryScanner(buildRule.getProject())
buildRule.getProject()
scanner.getIncludedFiles()
Arrays.stream(scannedFiles)
Arrays.stream(scannedFiles).collect(Collectors.toMap(file->file,file->file,(a,b)->b,Hashtable::new))
Collectors.toMap(file->file,file->file,(a,b)->b,Hashtable::new)
System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY)
newFile(".").getCanonicalFile()
System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY)
f.setBaseDir(root)
f.setName("foo")
f.getFile()
f.getBaseDir()
f.getName()
f.setBaseDir(root)
f.setName("foo/bar")
f.getFile()
f.getBaseDir()
f.getName()
f.getName().replace(File.separatorChar,'/')
f.getFile()
f.getBaseDir()
f.getName()
f.getFile()
f.getBaseDir()
f.getName()
f.getFile()
f.getBaseDir()
f.getName()
f.getName().replace(File.separatorChar,'/')
p.setBaseDir(root)
f.getFile()
f.getBaseDir()
f.getName()
f.getResource("bar")
f.getResource("bar").as(FileResource.class)
relative.getFile()
relative.getName()
relative.getName().replace(File.separatorChar,'/')
relative.getBaseDir()
f.getBaseDir()
f.getResource(bar.getAbsolutePath())
bar.getAbsolutePath()
f.getResource(bar.getAbsolutePath()).as(FileResource.class)
fromFactory.getFile()
fromFactory.getBaseDir()
f.getBaseDir()
f.getResource("../../bar")
f.getResource("../../bar").as(FileResource.class)
parentSibling.getBaseDir()
parentSibling.getName()
buildRule.configureProject("src/etc/testcases/types/resources/javaresource.xml")
buildRule.executeTarget("loadManifest")
buildRule.getProject()
buildRule.getProject().getProperty("manifest")
buildRule.getProject()
buildRule.getProject().getProperty("manifest")
startsWith("Manifest-Version:")
r.as(URLProvider.class)
r.setName("META-INF/MANIFEST.MF")
r.getURL()
createdIterators.add(it)
lazyCollection.add(collectionTest)
lazyCollection.iterator()
collectionTest.createdIterators.get(0)
it.next()
it.next()
it.next()
lazyCollection.add(collectionTest)
lazyCollection.iterator()
it.next()
it.next()
it.next()
it.next()
testCollection.createdIterators.size()
lazyCollection.add(collectionTest)
lazyCollection.isCache()
lazyCollection.iterator()
lazyCollection.iterator()
collectionTest.createdIterators.get(0)
it1.next()
it2.next()
it2.next()
it1.next()
it2.next()
it1.next()
lazyCollection.add(collectionTest)
lazyCollection.iterator()
lazyCollection.iterator()
it1.next()
it2.next()
it2.next()
it1.next()
it2.next()
it1.next()
it1.next()
it1.hasNext()
it2.next()
it2.hasNext()
r.as(StringResource.class)
r.as(StringResource.class).getValue()
super.setUp()
isReference()
tooManyAttributes()
isReference()
getRef(p)
getRef(p).getDir(p)
dieOnCircularReference()
isReference()
getRef(p)
getRef(p).getDir(p)
dieOnCircularReference()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
multiRootFileSet.setProject(getProject())
getProject()
multiRootFileSet.setBaseDirs("a")
multiRootFileSet.setRefid(newReference(getProject(),"dummyref"))
getProject()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
multiRootFileSet.addConfiguredBaseDir(newFileResource(newFile(".")))
multiRootFileSet.setRefid(newReference(getProject(),"dummyref"))
getProject()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
multiRootFileSet.setRefid(newReference(getProject(),"dummyref"))
getProject()
multiRootFileSet.setBaseDirs("a")
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
multiRootFileSet.setRefid(newReference(getProject(),"dummyref"))
getProject()
multiRootFileSet.setCache(true)
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
multiRootFileSet.setRefid(newReference(getProject(),"dummyref"))
getProject()
multiRootFileSet.setType(MultiRootFileSet.SetType.file)
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
multiRootFileSet.setRefid(newReference(getProject(),"dummyref"))
getProject()
multiRootFileSet.addConfiguredBaseDir(newFileResource(newFile(".")))
thrown.expect(BuildException.class)
thrown.expectMessage(endsWith(" doesn't support the dir attribute"))
endsWith(" doesn't support the dir attribute")
multiRootFileSet.setDir(newFile("."))
buildRule.configureProject("src/etc/testcases/types/resources/resourcelist.xml")
buildRule.executeTarget("tearDown")
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
rl.setEncoding("foo")
rl.setRefid(newReference(buildRule.getProject(),"dummyref"))
buildRule.getProject()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify more than one attribute when using refid")
rl.setRefid(newReference(buildRule.getProject(),"dummyref"))
buildRule.getProject()
rl.setEncoding("foo")
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
rl.add(newFileResource(buildRule.getProject(),"."))
buildRule.getProject()
rl.setRefid(newReference(buildRule.getProject(),"dummyref"))
buildRule.getProject()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
rl.setRefid(newReference(buildRule.getProject(),"dummyref"))
buildRule.getProject()
rl.add(newFileResource(buildRule.getProject(),"."))
buildRule.getProject()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
rl.addFilterChain(newFilterChain())
rl.setRefid(newReference(buildRule.getProject(),"dummyref"))
buildRule.getProject()
thrown.expect(BuildException.class)
thrown.expectMessage("You must not specify nested elements when using refid")
rl.setRefid(newReference(buildRule.getProject(),"dummyref"))
buildRule.getProject()
rl.addFilterChain(newFilterChain())
thrown.expect(BuildException.class)
thrown.expectMessage("This data type contains a circular reference.")
rl.setProject(buildRule.getProject())
buildRule.getProject()
rl.setRefid(newReference(buildRule.getProject(),"foo"))
buildRule.getProject()
resourceList.setProject(buildRule.getProject())
buildRule.getProject()
buildRule.getProject()
buildRule.getProject().addReference("foo",resourceList)
u.add(rl)
u.setProject(buildRule.getProject())
buildRule.getProject()
resourceList.add(u)
resourceList.size()
buildRule.configureProject("src/etc/testcases/types/resources/tarentry.xml")
buildRule.executeTarget("tearDown")
buildRule.executeTarget("uncompressSource")
getFileContents(buildRule.getProject().resolveFile("../../asf-logo.gif"))
buildRule.getProject()
buildRule.getProject().resolveFile("../../asf-logo.gif")
getFileContents(newFile(buildRule.getProject().getProperty("output"),"asf-logo.gif"))
buildRule.getProject()
buildRule.getProject().getProperty("output")
configureProject("src/etc/testcases/types/selectors.xml")
executeTarget("setUp")
super.getProject()
super.getProject().getProperty("test.dir")
super.getProject()
super.getProject().getProperty("mirror.dir")
getProjectDir()
project.init()
project.setBaseDir(basedir)
getInstance()
selector.setProject(getProject())
getProject()
getInstance()
s.setError("test error")
s.isSelected(beddir,filenames[0],files[0])
fail("Cannot cause BuildException when setError() is called")
be.getMessage()
selectionString(beddir,files,selector)
selectionString(mirrordir,mirrorfiles,selector)
selectionString(beddir,files,selector)
selectionString(selector)
diff(expected,result)
resolve(diff)
expected.length()
result.length()
sb.append((expected.charAt(i)==result.charAt(i))?"-":"X")
expected.charAt(i)
result.charAt(i)
sb.toString()
filelist.length()
filelist.length()
filelist.charAt(i)
sb.append(filenames[i])
sb.append(";")
sb.toString()
tbed.setUp()
tbed.makeTestbed()
tbed.tearDown()
tbed.setUp()
tbed.makeMirror()
tbed.deleteMirror()
super(name)
configureProject("src/etc/testcases/types/selectors.xml")
executeTarget("setUp")
super.getProject()
super.getProject().getProperty("test.dir")
super.getProject()
super.getProject().getProperty("mirror.dir")
getProjectDir()
project.init()
project.setBaseDir(basedir)
super.tearDown()
executeTarget("setupfiles")
tbed.setUp()
tbed.makeMirror()
executeTarget("tearDown")
buildRule.configureProject("src/etc/testcases/types/selectors.xml")
buildRule.executeTarget("containsregexp")
buildRule.getOutputDir()
newFile(buildRule.getOutputDir(),"regexpseltestdest").listFiles()
thrown.expect(BuildException.class)
thrown.expectMessage("The text attribute is required")
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
thrown.expect(BuildException.class)
thrown.expectMessage("Invalid parameter garbage in")
param.setName("garbage in")
param.setValue("garbage out")
s.setParameters(params)
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
s.setText("no such string in test files")
selectorRule.selectionString(s)
s.setText("Apache Ant")
selectorRule.selectionString(s)
s.setText("apache ant")
s.setCasesensitive(true)
selectorRule.selectionString(s)
s.setText("apache ant")
s.setCasesensitive(false)
selectorRule.selectionString(s)
s.setText("ApacheAnt")
s.setIgnorewhitespace(true)
selectorRule.selectionString(s)
s.setText("A p a c h e    A n t")
s.setIgnorewhitespace(true)
selectorRule.selectionString(s)
before.setValue("before")
equal.setValue("equal")
after.setValue("after")
thrown.expect(BuildException.class)
thrown.expectMessage("You must provide a datetime or the number of milliseconds.")
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
thrown.expect(BuildException.class)
thrown.expectMessage("Date of 01/01/1969 01:01 AM results in negative milliseconds value"+" relative to epoch (January 1, 1970, 00:00:00 GMT).")
s.setDatetime("01/01/1969 01:01 AM")
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
thrown.expect(BuildException.class)
thrown.expectMessage("Date of this is not a date Cannot be parsed correctly."+" It should be in 'MM/dd/yyyy hh:mm a' format.")
s.setDatetime("this is not a date")
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
thrown.expect(BuildException.class)
thrown.expectMessage("Invalid parameter garbage in")
param.setName("garbage in")
param.setValue("garbage out")
s.setParameters(params)
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
thrown.expect(BuildException.class)
thrown.expectMessage("Invalid millisecond setting garbage out")
param.setName("millis")
param.setValue("garbage out")
s.setParameters(params)
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
thrown.expect(BuildException.class)
thrown.expectMessage("Invalid granularity setting garbage out")
param.setName("granularity")
param.setValue("garbage out")
s.setParameters(params)
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
s.setDatetime("10/10/1999 1:45 PM")
s.setWhen(before)
selectorRule.selectionString(s)
s.setDatetime("10/10/1999 1:45 PM")
s.setWhen(before)
s.setCheckdirs(true)
selectorRule.selectionString(s)
s.setDatetime("10/10/1999 1:45 PM")
s.setWhen(after)
selectorRule.selectionString(s)
s.setDatetime("11/21/2001 4:54 AM")
s.setWhen(before)
selectorRule.selectionString(s)
s.setDatetime("11/21/2001 4:55 AM")
s.setWhen(equal)
selectorRule.selectionString(s)
s.setDatetime("11/21/2001 4:55 AM")
s.setMillis(s.getMillis())
s.getMillis()
s.setWhen(equal)
selectorRule.selectionString(s)
s.setDatetime("11/21/2001 4:56 AM")
s.setWhen(after)
selectorRule.selectionString(s)
param1.setName("datetime")
param1.setValue("11/21/2001 4:56 AM")
param2.setName("when")
param2.setValue("after")
s.setParameters(params)
selectorRule.selectionString(s)
selectorRule.getMirrorFiles()
selectorRule.getMirrorFiles()[5].lastModified()
s.setMillis(testtime)
s.setWhen(after)
s.setGranularity(2)
assumeTrue("Cannot setup file times for test",selectorRule.getMirrorFiles()[i].setLastModified(testtime-(3*60*60*100)))
selectorRule.getMirrorFiles()
selectorRule.getMirrorFiles()[i].setLastModified(testtime-(3*60*60*100))
selectorRule.mirrorSelectionString(s)
selectorRule.getMirrorFiles()
selectorRule.getMirrorFiles()[6].lastModified()
s.setMillis(testtime)
s.setWhen(before)
s.setGranularity(2)
assumeTrue("Cannot setup file times for test",selectorRule.getMirrorFiles()[i].setLastModified(testtime+(3*60*60*100)))
selectorRule.getMirrorFiles()
selectorRule.getMirrorFiles()[i].setLastModified(testtime+(3*60*60*100))
selectorRule.mirrorSelectionString(s)
thrown.expect(BuildException.class)
thrown.expectMessage("Cannot define more than one mapper")
s.createMapper()
s.createMapper()
thrown.expect(BuildException.class)
thrown.expectMessage("The targetdir attribute is required.")
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
s.setTargetdir(selectorRule.getBeddir())
selectorRule.getBeddir()
selectorRule.selectionString(s)
s.setTargetdir(selectorRule.getBeddir())
selectorRule.getBeddir()
identity.setValue("identity")
s.createMapper()
m.setType(identity)
selectorRule.selectionString(s)
s.setTargetdir(selectorRule.getBeddir())
selectorRule.getBeddir()
merge.setValue("merge")
s.createMapper()
m.setType(merge)
m.setTo("asf-logo.gif.gz")
selectorRule.selectionString(s)
selectorRule.selectionString(s).substring(0,11)
s.setTargetdir(selectorRule.getBeddir())
selectorRule.getBeddir()
merge.setValue("merge")
s.createMapper()
m.setType(merge)
m.setTo("asf-logo.gif.bz2")
selectorRule.selectionString(s)
s.setTargetdir(subdir)
glob.setValue("glob")
s.createMapper()
m.setType(glob)
m.setFrom("*.bz2")
m.setTo("*.tar.bz2")
selectorRule.selectionString(s)
selectorRule.getBeddir()
s.setTargetdir(subdir)
glob.setValue("glob")
s.createMapper()
m.setType(glob)
m.setFrom("*.bz2")
m.setTo("*.tar.bz2")
selectorRule.selectionString(s)
s.setTargetdir(newFile(selectorRule.getOutputDir(),"selectortest2"))
selectorRule.getOutputDir()
selectorRule.selectionString(s)
s.setTargetdir(newFile(selectorRule.getOutputDir(),"selectortest2/tar/bz2"))
selectorRule.getOutputDir()
glob.setValue("glob")
s.createMapper()
m.setType(glob)
m.setFrom("*.bz2")
m.setTo("*.tar.bz2")
selectorRule.mirrorSelectionString(s)
selectorRule.selectionString(s)
thrown.expect(BuildException.class)
thrown.expectMessage("You must set at least one of the min or the max levels.")
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
thrown.expect(BuildException.class)
thrown.expectMessage("The maximum depth is lower than the minimum.")
s.setMin(5)
s.setMax(2)
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
thrown.expect(BuildException.class)
thrown.expectMessage("Invalid parameter garbage in")
param.setName("garbage in")
param.setValue("garbage out")
s.setParameters(params)
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
thrown.expect(BuildException.class)
thrown.expectMessage("Invalid minimum value garbage out")
param.setName("min")
param.setValue("garbage out")
s.setParameters(params)
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
thrown.expect(BuildException.class)
thrown.expectMessage("Invalid maximum value garbage out")
param.setName("max")
param.setValue("garbage out")
s.setParameters(params)
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
s.setMin(20)
s.setMax(25)
selectorRule.selectionString(s)
s.setMin(0)
selectorRule.selectionString(s)
s.setMin(1)
selectorRule.selectionString(s)
s.setMax(0)
selectorRule.selectionString(s)
s.setMin(1)
s.setMax(1)
selectorRule.selectionString(s)
thrown.expect(BuildException.class)
thrown.expectMessage("The name or regex attribute is required")
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
thrown.expect(BuildException.class)
thrown.expectMessage("Invalid parameter garbage in")
param.setName("garbage in")
param.setValue("garbage out")
s.setParameters(params)
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
s.setName("no match possible")
selectorRule.selectionString(s)
s.setName("*.gz")
selectorRule.selectionString(s)
selectorRule.selectionString(s)
s.setName("**/*.gz")
s.setNegate(true)
selectorRule.selectionString(s)
s.setName("**/*.GZ")
s.setCasesensitive(false)
selectorRule.selectionString(s)
param1.setName("name")
param1.setValue("**/*.bz2")
s.setParameters(params)
selectorRule.selectionString(s)
selectorRule.getProject()
prj.getProperty("build.tests.value")
thrown.expect(BuildException.class)
thrown.expectMessage(name+" is not a legal value for this attribute")
newModifiedSelector.CacheName().setValue(name)
thrown.expect(BuildException.class)
thrown.expectMessage(name+" is not a legal value for this attribute")
newModifiedSelector.AlgorithmName().setValue(name)
thrown.expect(BuildException.class)
thrown.expectMessage(name+" is not a legal value for this attribute")
newModifiedSelector.ComparatorName().setValue(name)
thrown.expect(BuildException.class)
thrown.expectMessage("Specified class ("+className+") is not an Algorithm.")
getAlgoName(className)
thrown.expect(BuildException.class)
thrown.expectMessage("Specified class ("+className+") not found.")
getAlgoName(className)
getAlgoName("org.apache.tools.ant.types.selectors.modifiedselector.HashvalueAlgorithm")
startsWith("HashvalueAlgorithm")
getAlgoName("org.apache.tools.ant.types.selectors.MockAlgorithm")
startsWith("MockAlgorithm")
selectorRule.getProject()
selectorRule.getProject().getProperty(MagicNames.ANT_HOME)
bft.setUp()
bft.doTarget("modifiedselectortest-customClasses")
bft.getProperty("fs.full.value")
bft.getProperty("fs.mod.value")
containsString("ant.bat")
bft.doTarget("modifiedselectortest-scenario-clean")
bft.deletePropertiesfile()
bft.tearDown()
doDelayUpdateTest(1)
doDelayUpdateTest(2)
doDelayUpdateTest(3)
sel.setProject(project)
sel.setUpdate(true)
sel.setDelayUpdate(true)
sel.setClassLoader(this.getClass().getClassLoader())
this.getClass()
this.getClass().getClassLoader()
sel.addClasspath(testclasses)
sel.setAlgorithmClass("org.apache.tools.ant.types.selectors.MockAlgorithm")
sel.setCacheClass("org.apache.tools.ant.types.selectors.MockCache")
sel.configure()
sel.getCache()
sel.isSelected(base,"file1",file1)
sel.isSelected(base,"file2",file2)
project.fireTaskFinished()
project.fireTargetFinished()
project.fireBuildFinished()
sel.setProject(selectorRule.getProject())
selectorRule.getProject()
sel.addClasspath(testclasses)
sel.setAlgorithmClass(classname)
sel.validate()
sel.toString()
s1.indexOf("algorithm=")
s1.indexOf(" comparator=")
s1.substring(posStart,posEnd)
algo.startsWith("<")
algo.substring(1)
algo.endsWith(">")
algo.substring(0,algo.length()-1)
algo.length()
cache.isValid()
cache.setCachefile(cachefile)
doTest(cache)
cachefile.exists()
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
cache.setCachefile(cachefile)
cache.put("key","value")
cache.save()
cachefile.exists()
cache.delete()
cachefile.exists()
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
s.setDelayUpdate(false)
s.addParam("cache.cachefile",cachefile)
cacheName.setValue("propertyfile")
s.setCache(cacheName)
s.setUpdate(true)
selectorRule.selectionString(s)
cachefile.exists()
cachefile.delete()
testFolder.newFile("tmp-cache.properties")
s.setClassname("org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector")
s.addParam(createParam("update","true"))
createParam("update","true")
s.addParam(createParam("cache.cachefile",cachefile.getAbsolutePath()))
createParam("cache.cachefile",cachefile.getAbsolutePath())
cachefile.getAbsolutePath()
s.addParam(createParam("cache","propertyfile"))
createParam("cache","propertyfile")
selectorRule.selectionString(s)
cachefile.exists()
cache.isValid()
cache.iterator()
it1.hasNext()
cache.put(key1,value1)
cache.put(key2,value2)
cache.get(key1)
cache.get(key2)
cache.iterator()
it2.next()
key1.equals(returned)
key2.equals(returned)
key1.equals(returned)
key2.equals(returned)
cache.delete()
cache.iterator()
it3.hasNext()
doTest(algo)
algo.setAlgorithm("MD5")
doTest(algo)
algo.setAlgorithm("SHA")
doTest(algo)
doTest(algo)
algo.setAlgorithm("CRC")
doTest(algo)
algo.setAlgorithm("Adler")
doTest(algo)
cache.isValid()
cache.iterator()
it1.hasNext()
cache.put(key1,value1)
cache.put(key2,value2)
cache.get(key1)
cache.get(key2)
cache.iterator()
it2.next()
key1.equals(returned)
key2.equals(returned)
key1.equals(returned)
key2.equals(returned)
cache.delete()
cache.iterator()
it3.hasNext()
doTest(comp)
RuleBasedCollator.getInstance()
doTest(comp)
compName.setValue("equal")
s.setComparator(compName)
performTests(s,"TTTTTTTTTTTT")
s.getCache()
s.getCache().delete()
compName.setValue("rule")
s.setComparator(compName)
performTests(s,"TTTTTTTTTTTT")
s.getCache()
s.getCache().delete()
bft.doTarget("modifiedselectortest-ResourceSimple")
bft.deleteCachefile()
bft.doTarget("modifiedselectortest-ResourceSelresTrue")
bft.getLog()
containsString("does not provide an InputStream")
bft.deleteCachefile()
bft.doTarget("modifiedselectortest-ResourceSelresFalse")
bft.deleteCachefile()
selectorRule.getProject()
selectorRule.getProject().getProperty(MagicNames.ANT_HOME)
bft.doTarget("modifiedselectortest-scenario-resourceSimple")
bft.doTarget("modifiedselectortest-scenario-clean")
bft.deleteCachefile()
cache.isValid()
cache.iterator()
it1.hasNext()
cache.put(key1,value1)
cache.put(key2,value2)
cache.get(key1)
cache.get(key2)
cache.iterator()
it2.next()
key1.equals(returned)
key2.equals(returned)
key1.equals(returned)
key2.equals(returned)
cache.delete()
cache.iterator()
it3.hasNext()
selectorRule.getFiles()
file.isDirectory()
sbTrue.append("T")
sbFalse.append("F")
sbTrue.append("T")
sbFalse.append("T")
s.setSeldirs(true)
performTests(s,sbTrue.toString())
sbTrue.toString()
s.getCache()
s.getCache().delete()
s.setSeldirs(false)
performTests(s,sbFalse.toString())
sbFalse.toString()
s.getCache()
s.getCache().delete()
s.getCache()
s.getCache().delete()
performTests(s,"TTTTTTTTTTTT")
performTests(s,"TFFFFFFFFFFT")
bft.writeProperties("f2name="+f2name)
bft.writeProperties("f3name="+f3name)
bft.writeProperties("f4name="+f4name)
bft.doTarget("modifiedselectortest-makeDirty")
selectorRule.selectionString(s)
selectorRule.getFiles()
selectorRule.getFiles()
selectorRule.getFiles()[i].isDirectory()
selectorRule.getFilenames()
selectorRule.getFilenames()[i].equalsIgnoreCase(f3name)
selectorRule.getFilenames()
selectorRule.getFilenames()[i].equalsIgnoreCase(f4name)
expected.append(ch)
resolve(diff(expected.toString(),results))
diff(expected.toString(),results)
expected.toString()
expected.toString()
s.getCache()
s.getCache().delete()
bft.deletePropertiesfile()
System.getProperty("java.io.tmpdir")
s.setClassname("org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector")
s.addParam(createParam("cache.cachefile",cachefile))
createParam("cache.cachefile",cachefile)
s.addParam(createParam("cache","propertyfile"))
createParam("cache","propertyfile")
s.addParam(createParam("update","true"))
createParam("update","true")
s.addParam(createParam("comparator","rule"))
createParam("comparator","rule")
s.addParam(createParam("algorithm.name","sha"))
createParam("algorithm.name","sha")
s.addParam(createParam("algorithm","digest"))
createParam("algorithm","digest")
performTests(s,"TTTTTTTTTTTT")
performTests(s,"TFFFFFFFFFFT")
bft.writeProperties("f2name="+f2name)
bft.writeProperties("f3name="+f3name)
bft.writeProperties("f4name="+f4name)
bft.doTarget("modifiedselectortest-makeDirty")
selectorRule.selectionString(s)
selectorRule.getFilenames()
selectorRule.getFiles()
selectorRule.getFiles()[i].isDirectory()
selectorRule.getFilenames()
selectorRule.getFilenames()[i].equalsIgnoreCase(f3name)
selectorRule.getFilenames()
selectorRule.getFilenames()[i].equalsIgnoreCase(f4name)
expected.append(ch)
resolve(diff(expected.toString(),results))
diff(expected.toString(),results)
expected.toString()
expected.toString()
(newFile(cachefile)).delete()
bft.deletePropertiesfile()
selectorRule.getProject()
selectorRule.getProject().getProperty(MagicNames.ANT_HOME)
doScenarioTest("modifiedselectortest-scenario-coreselector-defaults","cache.properties")
selectorRule.getProject()
selectorRule.getProject().getProperty(MagicNames.ANT_HOME)
doScenarioTest("modifiedselectortest-scenario-coreselector-settings","core.cache.properties")
selectorRule.getProject()
selectorRule.getProject().getProperty(MagicNames.ANT_HOME)
doScenarioTest("modifiedselectortest-scenario-customselector-settings","core.cache.properties")
bft.setUp()
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
bft.doTarget("modifiedselectortest-scenario-clean")
bft.doTarget(target)
selectorRule.getOutputDir()
selectorRule.getOutputDir()
selectorRule.getOutputDir()
cachefile.exists()
to1.list()
to2.list()
to3.list()
bft.doTarget("modifiedselectortest-scenario-clean")
bft.deletePropertiesfile()
bft.tearDown()
cachefile.delete()
p.setName(name)
p.setValue(value)
selectorRule.getProject()
prj.getProperty("build.tests.value")
super.after()
setUp()
executeTarget(target)
super.getProject()
super.getProject().getProperty(property)
setUp()
getProject()
getProject().getBaseDir()
file.getAbsolutePath()
out.write(line)
out.write(System.lineSeparator())
System.lineSeparator()
out.flush()
out.close()
e.printStackTrace()
setUp()
getProject()
getProject().getBaseDir()
newFile(getProject().getBaseDir(),propfile).delete()
newFile(buildfile).getParentFile()
cacheFile.delete()
task.setTaskName("testTask")
target.setName("testTarget")
target.setProject(this)
target.addTask(task)
task.setOwningTarget(target)
super.fireBuildFinished(null)
super.fireSubBuildFinished(null)
super.fireTargetStarted(target)
super.fireTargetFinished(target,null)
super.fireTaskStarted(task)
super.fireTaskFinished(task,null)
selectorRule.selectionString(selector)
diff(expected,result)
resolve(diff)
expected.length()
result.length()
sb.append((expected.charAt(i)==result.charAt(i))?"-":"X")
expected.charAt(i)
result.charAt(i)
sb.toString()
selectorRule.getFilenames()
filelist.length()
filelist.length()
selectorRule.getFilenames()
filelist.charAt(i)
sb.append(selectorRule.getFilenames()[i])
selectorRule.getFilenames()
sb.append(selectorRule.getFilenames()[i]).append(";")
sb.toString()
assumeFalse(Os.isFamily("windows"))
Os.isFamily("windows")
folder.newFile("f.txt")
Files.getOwner(file.toPath())
file.toPath()
user.getName()
s.setOwner(SELF)
s.isSelected(null,null,file)
folder.getRoot()
Files.createSymbolicLink(target.toPath(),TEST_FILE.toPath())
target.toPath()
TEST_FILE.toPath()
Files.getOwner(symbolicLink)
root.getName()
Files.getOwner(symbolicLink,LinkOption.NOFOLLOW_LINKS)
user.getName()
s.setOwner(SELF)
s.isSelected(null,null,symbolicLink.toFile())
symbolicLink.toFile()
s.setFollowSymlinks(false)
s.isSelected(null,null,symbolicLink.toFile())
symbolicLink.toFile()
assumeTrue("Not POSIX",Os.isFamily("unix"))
Os.isFamily("unix")
System.getProperty("os.name","unknown")
System.getProperty("os.name","unknown").toLowerCase()
osName.contains("sunos")
Class.forName(jaasProviderClassName)
assumeNoException("Cannot obtain OS-specific JAAS information",e)
jaasProviderClass.getMethod(GROUP_GETTER)
jaasProviderClass.getMethod(GROUP_GETTER).invoke(jaasProviderClass.newInstance())
jaasProviderClass.newInstance()
folder.newFile("f.txt")
Files.readAttributes(file.toPath(),"unix:group,gid",LinkOption.NOFOLLOW_LINKS)
file.toPath()
fileAttributes.get("gid")
fileAttributes.get("group")
s.setGroup(actualGroup.getName())
actualGroup.getName()
s.isSelected(null,null,file)
jaasProviderClass.getMethod(GROUP_GETTER)
jaasProviderClass.getMethod(GROUP_GETTER).invoke(jaasProviderClass.newInstance())
jaasProviderClass.newInstance()
folder.getRoot()
Files.createSymbolicLink(target.toPath(),TEST_FILE.toPath())
target.toPath()
TEST_FILE.toPath()
Files.readAttributes(target.toPath(),"unix:group,gid",LinkOption.NOFOLLOW_LINKS)
target.toPath()
linkAttributes.get("gid")
Files.readAttributes(target.toPath(),PosixFileAttributes.class)
target.toPath()
Files.readAttributes(target.toPath(),PosixFileAttributes.class).group()
linkAttributes.get("group")
linkGroup.getName()
targetGroup.getName()
s.setGroup(linkGroup.getName())
linkGroup.getName()
s.isSelected(null,null,symbolicLink.toFile())
symbolicLink.toFile()
s.setFollowSymlinks(false)
s.isSelected(null,null,symbolicLink.toFile())
symbolicLink.toFile()
Arrays.asList("855","4555","-rwxr-xr-x","xrwr-xr-x")
assumeTrue("Not POSIX",Os.isFamily("unix"))
Os.isFamily("unix")
s.setPermissions(argument)
Arrays.asList("855","4555","-rwxr-xr-x","xrwr-xr-x")
assumeTrue("Not POSIX",Os.isFamily("unix"))
Os.isFamily("unix")
s.setPermissions(argument)
Arrays.asList("855","4555","-rwxr-xr-x","xrwr-xr-x")
assumeTrue("Not POSIX",Os.isFamily("unix"))
Os.isFamily("unix")
s.setPermissions(argument)
selectorRule.getBeddir()
thrown.expect(BuildException.class)
thrown.expectMessage("Cannot define more than one mapper")
s.createMapper()
s.createMapper()
thrown.expect(BuildException.class)
thrown.expectMessage("The targetdir attribute is required.")
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
s.setTargetdir(beddir)
selectorRule.selectionString(s)
s.setTargetdir(beddir)
s.createMapper()
identity.setValue("identity")
m.setType(identity)
selectorRule.selectionString(s)
selectorRule.getProject()
selectorRule.getProject().resolveFile("../taskdefs/expected")
s.setTargetdir(subdir)
s.createMapper()
flatten.setValue("flatten")
m.setType(flatten)
selectorRule.selectionString(s)
s.setTargetdir(beddir)
s.createMapper()
merge.setValue("merge")
m.setType(merge)
m.setTo("asf-logo.gif.gz")
selectorRule.selectionString(s)
s.setTargetdir(subdir)
s.createMapper()
glob.setValue("glob")
m.setType(glob)
m.setFrom("*.bz2")
m.setTo("*.tar.bz2")
selectorRule.selectionString(s)
selectorRule.getOutputDir()
s.setTargetdir(subdir)
selectorRule.selectionString(s)
selectorRule.selectionString(s)
buildRule.configureProject("src/etc/testcases/types/selectors/signedselector.xml")
buildRule.executeTarget("selectsigned")
buildRule.executeTarget("notselected")
buildRule.executeTarget("name")
less.setValue("less")
equal.setValue("equal")
more.setValue("more")
thrown.expect(BuildException.class)
thrown.expectMessage("The value attribute is required, and must be positive")
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
thrown.expect(BuildException.class)
thrown.expectMessage("The value attribute is required, and must be positive")
s.setValue(-10)
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
thrown.expect(BuildException.class)
thrown.expectMessage("Invalid parameter garbage in")
param.setName("garbage in")
param.setValue("garbage out")
s.setParameters(params)
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
thrown.expect(BuildException.class)
thrown.expectMessage("Invalid size setting garbage out")
param.setName("value")
param.setValue("garbage out")
s.setParameters(params)
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
thrown.expect(BuildException.class)
thrown.expectMessage("garbage out is not a legal value for this attribute")
param1.setName("value")
param1.setValue("5")
param2.setName("units")
param2.setValue("garbage out")
s.setParameters(params)
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
s.setValue(10)
s.setWhen(less)
selectorRule.selectionString(s)
s.setValue(10)
s.setWhen(more)
selectorRule.selectionString(s)
s.setValue(32)
s.setWhen(equal)
selectorRule.selectionString(s)
kilo.setValue("K")
s.setValue(7)
s.setWhen(more)
s.setUnits(kilo)
selectorRule.selectionString(s)
kibi.setValue("Ki")
s.setValue(7)
s.setWhen(more)
s.setUnits(kibi)
selectorRule.selectionString(s)
tibi.setValue("Ti")
s.setValue(99999)
s.setWhen(more)
s.setUnits(tibi)
selectorRule.selectionString(s)
param1.setName("value")
param1.setValue("20")
param2.setName("units")
param2.setValue("Ki")
param3.setName("when")
param3.setValue("more")
s.setParameters(params)
selectorRule.selectionString(s)
testCaseInsensitiveParameterParsing("units")
testCaseInsensitiveParameterParsing("UNITS")
Locale.getDefault()
Locale.setDefault(newLocale("tr"))
testCaseInsensitiveParameterParsing("units")
Locale.setDefault(l)
Locale.getDefault()
Locale.setDefault(newLocale("tr"))
testCaseInsensitiveParameterParsing("UNITS")
Locale.setDefault(l)
thrown.expect(BuildException.class)
thrown.expectMessage("foo is not a legal value for this attribute")
p.setName(name)
p.setValue("foo")
s.setParameters(p)
pat.depth()
pat.getPattern()
pat.containsPattern(SelectorUtils.DEEP_TREE_MATCH)
pat.containsPattern(".svn")
newTokenizedPattern(DOT_SVN_PATTERN).endsWith(SelectorUtils.DEEP_TREE_MATCH)
newTokenizedPattern(DOT_SVN_PATTERN).withoutLastToken()
newTokenizedPattern(DOT_SVN_PATTERN).withoutLastToken().getPattern()
f.getAbsolutePath()
newTokenizedPattern(DOT_SVN_PATTERN).matchPath(p,true)
newTokenizedPattern(DOT_SVN_PATTERN).withoutLastToken()
newTokenizedPattern(DOT_SVN_PATTERN).withoutLastToken().matchPath(p,true)
newTokenizedPattern(SelectorUtils.DEEP_TREE_MATCH).matchPath(p,true)
newTokenizedPattern("*").matchPath(p,true)
thrown.expect(BuildException.class)
thrown.expectMessage("The type attribute is required")
s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
selectorRule.getProject()
selectorRule.getProject().getBaseDir()
selectorRule.getFilenames()
selectorRule.getFiles()
directory.setValue("dir")
s.setType(directory)
selectorRule.selectionString(s)
file.setValue("file")
s.setType(file)
selectorRule.selectionString(s)
base64Converter.encode(newbyte[]{0,0,(byte)0xFF})
base64Converter.encode("Hello World".getBytes())
"Hello World".getBytes()
p.init()
ClasspathUtils.getUniqueClassLoaderForPath(p,null,false)
c.getResources("org/apache/tools/ant/taskdefs/defaults.properties")
enumeration.hasMoreElements()
list.append(" ")
list.append(" ").append(enumeration.nextElement())
enumeration.nextElement()
CollectionUtils.equals(null,newVector())
CollectionUtils.equals(newVector(),null)
CollectionUtils.equals(newVector(),newVector())
v1.addElement("foo")
s2.push("foo")
CollectionUtils.equals(v1,s2)
CollectionUtils.equals(s2,v1)
v1.addElement("bar")
CollectionUtils.equals(v1,s2)
CollectionUtils.equals(s2,v1)
s2.push("bar")
CollectionUtils.equals(v1,s2)
CollectionUtils.equals(s2,v1)
s2.push("baz")
CollectionUtils.equals(v1,s2)
CollectionUtils.equals(s2,v1)
v1.addElement("baz")
CollectionUtils.equals(v1,s2)
CollectionUtils.equals(s2,v1)
v1.addElement("zyzzy")
s2.push("zyzzy2")
CollectionUtils.equals(v1,s2)
CollectionUtils.equals(s2,v1)
CollectionUtils.equals(null,newHashtable())
CollectionUtils.equals(newHashtable(),null)
CollectionUtils.equals(newHashtable(),newProperties())
h1.put("foo","")
p2.put("foo","")
CollectionUtils.equals(h1,p2)
CollectionUtils.equals(p2,h1)
h1.put("bar","")
CollectionUtils.equals(h1,p2)
CollectionUtils.equals(p2,h1)
p2.put("bar","")
CollectionUtils.equals(h1,p2)
CollectionUtils.equals(p2,h1)
p2.put("baz","")
CollectionUtils.equals(h1,p2)
CollectionUtils.equals(p2,h1)
h1.put("baz","")
CollectionUtils.equals(h1,p2)
CollectionUtils.equals(p2,h1)
h1.put("zyzzy","")
p2.put("zyzzy2","")
CollectionUtils.equals(h1,p2)
CollectionUtils.equals(p2,h1)
p2.put("zyzzy","")
h1.put("zyzzy2","")
CollectionUtils.equals(h1,p2)
CollectionUtils.equals(p2,h1)
h1.put("dada","1")
p2.put("dada","2")
CollectionUtils.equals(h1,p2)
CollectionUtils.equals(p2,h1)
DateUtils.formatElapsedTime(50*1000)
DateUtils.formatElapsedTime(65*1000)
DateUtils.formatElapsedTime(120*1000)
DateUtils.formatElapsedTime(121*1000)
DateUtils.formatElapsedTime(1000*175573)
DateUtils.formatElapsedTime(Long.MAX_VALUE)
TimeZone.getTimeZone("GMT+1")
Calendar.getInstance(timeZone)
cal.set(2002,1,23,10,11,12)
DateUtils.format(cal.getTime(),DateUtils.ISO8601_DATETIME_PATTERN)
cal.getTime()
TimeZone.getTimeZone("GMT")
Calendar.getInstance(timeZone)
cal.set(2002,1,23)
DateUtils.format(cal.getTime(),DateUtils.ISO8601_DATE_PATTERN)
cal.getTime()
TimeZone.getTimeZone("GMT+1")
Calendar.getInstance(timeZone)
cal.set(2002,1,23,21,11,12)
DateUtils.format(cal.getTime(),DateUtils.ISO8601_TIME_PATTERN)
cal.getTime()
DateUtils.format(ms,DateUtils.ISO8601_TIME_PATTERN)
TimeZone.getTimeZone("GMT")
Calendar.getInstance(timeZone)
cal.set(2002,2,27)
DateUtils.getPhaseOfMoon(cal)
cal.set(2002,2,12)
DateUtils.getPhaseOfMoon(cal)
newDeweyDecimal("1.2.3").toString()
newDeweyDecimal("1.2.3").hashCode()
newDeweyDecimal("1.2.3").hashCode()
newDeweyDecimal("1.2.3").compareTo(newDeweyDecimal("1.2"))
newDeweyDecimal("1.2").compareTo(newDeweyDecimal("1.2.3"))
newDeweyDecimal("1.2.3").compareTo(newDeweyDecimal("1.2.3"))
newDeweyDecimal("1.2.3").compareTo(newDeweyDecimal("1.1.4"))
newDeweyDecimal("1.2.3").compareTo(newDeweyDecimal("1.2.2.9"))
newDeweyDecimal("1.2.0").compareTo(newDeweyDecimal("1.2"))
newDeweyDecimal("1.2").compareTo(newDeweyDecimal("1.2.0"))
newDeweyDecimal(args).toString()
newDeweyDecimal(args).toString()
dd.getSize()
dd.get(1)
first.isGreaterThanOrEqual(newDeweyDecimal("1"))
first.isGreaterThanOrEqual(newDeweyDecimal("1.2"))
first.isGreaterThanOrEqual(newDeweyDecimal("1.2.3"))
first.isGreaterThanOrEqual(newDeweyDecimal("1.2.3.0"))
first.isGreaterThanOrEqual(newDeweyDecimal("1.2.4"))
first.isGreaterThanOrEqual(newDeweyDecimal("1.3"))
first.isGreaterThanOrEqual(newDeweyDecimal("2"))
dd.equals("other")
dd.equals(null)
dd.equals(newDeweyDecimal("1.2.3"))
dd.equals(newDeweyDecimal("1.2.3.0"))
dd.isLessThan(newDeweyDecimal("2"))
dd.isLessThan(newDeweyDecimal("1"))
dd.isLessThan(newDeweyDecimal("1.2.3"))
dd.isLessThanOrEqual(newDeweyDecimal("2"))
dd.isLessThanOrEqual(newDeweyDecimal("1"))
dd.isLessThanOrEqual(newDeweyDecimal("1.2.3"))
w.isReference("&#20;")
w.isReference("&#x20;")
w.isReference("&#xA0;")
w.isReference("&#A0;")
w.isReference("20;")
w.isReference("&#20")
w.isReference("&quot;")
w.isReference("&apos;")
w.isReference("&gt;")
w.isReference("&lt;")
w.isReference("&amp;")
w.encode("&#20;")
w.encode("&#x20;")
w.encode("&#xA0;")
w.encode("&#A0;")
w.encode("20;")
w.encode("&#20")
w.encode("&quot;")
w.encode("&apos;")
w.encode("&gt;")
w.encode("&lt;")
w.encode("&amp;")
w.encode("\"")
w.encode("<")
w.encode("&")
w.encode("\u0017")
w.encode("\r\n\t")
w.encodeAttributeValue("&#20;")
w.encodeAttributeValue("&#x20;")
w.encodeAttributeValue("&#xA0;")
w.encodeAttributeValue("&#A0;")
w.encodeAttributeValue("20;")
w.encodeAttributeValue("&#20")
w.encodeAttributeValue("&quot;")
w.encodeAttributeValue("&apos;")
w.encodeAttributeValue("&gt;")
w.encodeAttributeValue("&lt;")
w.encodeAttributeValue("&amp;")
w.encodeAttributeValue("\"")
w.encodeAttributeValue("<")
w.encodeAttributeValue("&")
w.encodeAttributeValue("\u0017")
w.encodeAttributeValue("\r\n\t")
DOMUtils.newDocument()
d.createElement("root")
root.setAttribute("foo","bar\nbaz")
w.write(root,sw,0,"  ")
String.format("<root foo=\"bar&#xa;baz\" />%n")
sw.toString()
w.encodedata("&#20;\"20;&")
w.encodedata("\u0017")
w.isLegalCharacter('\u0000')
w.isLegalCharacter('\t')
w.isLegalCharacter('\n')
w.isLegalCharacter('\r')
w.isLegalCharacter('\u001F')
w.isLegalCharacter('\u0020')
w.isLegalCharacter('\uD7FF')
w.isLegalCharacter('\uD800')
w.isLegalCharacter('\uDFFF')
w.isLegalCharacter('\uE000')
w.isLegalCharacter('\uFFFD')
w.isLegalCharacter('\uFFFE')
w.encodedata("]>")
w.encodedata("]]")
w.encodedata("]]>")
w.encodedata("]]>A")
w.encodedata("A]]>")
w.encodedata("A]]>A")
w.encodedata("A]]>B]]>C")
DOMUtils.newDocument()
d.createElement("root")
DOMUtils.appendTextElement(root,"textElement","content")
w.write(root,sw,0,"  ")
String.format("<root>%n  <textElement>content</textElement>%n</root>%n")
sw.toString()
DOMUtils.newDocument()
d.createElement("root")
DOMUtils.appendCDATAElement(root,"cdataElement","content")
w.write(root,sw,0,"  ")
String.format("<root>%n  <cdataElement><![CDATA[content]]></cdataElement>%n"+"</root>%n")
sw.toString()
DOMUtils.newDocument()
d.createElement("root")
DOMUtils.createChildElement(root,"emptyElement")
w.write(root,sw,0,"  ")
String.format("<root>%n  <emptyElement />%n</root>%n")
sw.toString()
DOMUtils.newDocument()
d.createElementNS("urn:foo","root")
root.setAttributeNS("urn:foo2","bar","baz")
w.write(root,sw,0,"  ")
String.format("<root bar=\"baz\" />%n")
sw.toString()
DOMUtils.newDocument()
d.createElementNS("urn:foo","root")
root.setAttributeNS("urn:foo2","bar","baz")
w.write(root,sw,0,"  ")
String.format("<root bar=\"baz\" xmlns=\"urn:foo\" />%n")
sw.toString()
DOMUtils.newDocument()
d.createElementNS("urn:foo","root")
root.setAttributeNS("urn:foo2","bar","baz")
w.write(root,sw,0,"  ")
String.format("<root ns0:bar=\"baz\" xmlns=\"urn:foo\""+" xmlns:ns0=\"urn:foo2\" />%n")
sw.toString()
DOMUtils.newDocument()
d.createElementNS("urn:foo","root")
root.setAttributeNS("urn:foo2","bar","baz")
w.write(root,sw,0,"  ")
String.format("<root ns0:bar=\"baz\" xmlns:ns0=\"urn:foo2\" />%n")
sw.toString()
DOMUtils.newDocument()
d.createElementNS("urn:foo","root")
d.createElementNS("urn:foo","child")
root.appendChild(child)
w.write(root,sw,0,"  ")
String.format("<root xmlns=\"urn:foo\">%n  <child />%n</root>%n")
sw.toString()
DOMUtils.newDocument()
d.createElementNS("urn:foo","root")
d.createElementNS("urn:foo2","child")
root.appendChild(child)
d.createElementNS("urn:foo2","child")
root.appendChild(child2)
d.createElementNS("urn:foo2","grandchild")
child2.appendChild(grandChild)
d.createElementNS("urn:foo2","child")
root.appendChild(child3)
w.write(root,sw,0,"  ")
String.format("<root xmlns=\"urn:foo\">%n"+"  <ns0:child xmlns:ns0=\"urn:foo2\" />%n"+"  <ns1:child xmlns:ns1=\"urn:foo2\">%n"+"    <ns1:grandchild />%n"+"  </ns1:child>%n"+"  <ns2:child xmlns:ns2=\"urn:foo2\" />%n"+"</root>%n")
sw.toString()
newFile(File.separator).getAbsolutePath()
newFile(File.separator).getAbsolutePath().toUpperCase()
folder.newFile("dummy")
fos.write(newbyte[0])
assumeTrue("Could not change file modified time",removeThis.setLastModified(removeThis.lastModified()-2000))
removeThis.setLastModified(removeThis.lastModified()-2000)
removeThis.lastModified()
removeThis.lastModified()
getFileUtils()
getFileUtils().setFileLastModified(removeThis,-1)
removeThis.lastModified()
getFileUtils()
getFileUtils().setFileLastModified(removeThis,secondModTime+millisperday)
removeThis.lastModified()
assumeTrue("DOS or NetWare",!Os.isFamily("dos")&&!Os.isFamily("netware"))
Os.isFamily("dos")
Os.isFamily("netware")
getFileUtils()
getFileUtils().resolveFile(null,"/")
getFileUtils().resolveFile(null,"/").getPath()
getFileUtils()
getFileUtils().resolveFile(null,"\\")
getFileUtils().resolveFile(null,"\\").getPath()
assumeTrue("Not DOS or Netware",Os.isFamily("dos")||Os.isFamily("netware"))
Os.isFamily("dos")
Os.isFamily("netware")
localize(File.separator)
getFileUtils()
getFileUtils().resolveFile(null,"/")
getFileUtils().resolveFile(null,"/").getPath()
localize(File.separator)
getFileUtils()
getFileUtils().resolveFile(null,"\\")
getFileUtils().resolveFile(null,"\\").getPath()
getFileUtils()
getFileUtils().resolveFile(null,driveSpec+"/")
getFileUtils().resolveFile(null,driveSpec+"/").getPath()
getFileUtils()
getFileUtils().resolveFile(null,driveSpec+"\\")
getFileUtils().resolveFile(null,driveSpec+"\\").getPath()
getFileUtils()
getFileUtils().resolveFile(null,driveSpecLower+"/")
getFileUtils().resolveFile(null,driveSpecLower+"/").getPath()
getFileUtils()
getFileUtils().resolveFile(null,driveSpecLower+"\\")
getFileUtils().resolveFile(null,driveSpecLower+"\\").getPath()
getFileUtils()
getFileUtils().resolveFile(null,driveSpec+"/////")
getFileUtils().resolveFile(null,driveSpec+"/////").getPath()
getFileUtils()
getFileUtils().resolveFile(null,driveSpec+"\\\\\\\\\\\\")
getFileUtils().resolveFile(null,driveSpec+"\\\\\\\\\\\\").getPath()
Os.isFamily("netware")
getFileUtils()
getFileUtils().resolveFile(null,driveSpec+"/")
getFileUtils().resolveFile(null,driveSpec+"/").getPath()
getFileUtils()
getFileUtils().resolveFile(null,driveSpec+"\\")
getFileUtils().resolveFile(null,driveSpec+"\\").getPath()
getFileUtils()
getFileUtils().resolveFile(null,driveSpecLower+"/")
getFileUtils().resolveFile(null,driveSpecLower+"/").getPath()
getFileUtils()
getFileUtils().resolveFile(null,driveSpecLower+"\\")
getFileUtils().resolveFile(null,driveSpecLower+"\\").getPath()
getFileUtils()
getFileUtils().resolveFile(null,driveSpec+"/////")
getFileUtils().resolveFile(null,driveSpec+"/////").getPath()
getFileUtils()
getFileUtils().resolveFile(null,driveSpec+"\\\\\\\\\\\\")
getFileUtils().resolveFile(null,driveSpec+"\\\\\\\\\\\\").getPath()
assumeFalse("is DOS",Os.isFamily("dos"))
Os.isFamily("dos")
System.getProperty("user.dir")
getFileUtils()
getFileUtils().resolveFile(null,driveSpec+"/")
getFileUtils().resolveFile(null,driveSpec+"/").getPath()
getFileUtils()
getFileUtils().resolveFile(null,driveSpec+"\\")
getFileUtils().resolveFile(null,driveSpec+"\\").getPath()
getFileUtils()
getFileUtils().resolveFile(null,driveSpecLower+"/")
getFileUtils().resolveFile(null,driveSpecLower+"/").getPath()
getFileUtils()
getFileUtils().resolveFile(null,driveSpecLower+"\\")
getFileUtils().resolveFile(null,driveSpecLower+"\\").getPath()
localize("/1/2/3/4")
getFileUtils()
getFileUtils().resolveFile(newFile(localize("/1/2/3")),"4")
localize("/1/2/3")
getFileUtils().resolveFile(newFile(localize("/1/2/3")),"4").getPath()
localize("/1/2/3/4")
getFileUtils()
getFileUtils().resolveFile(newFile(localize("/1/2/3")),"./4")
localize("/1/2/3")
getFileUtils().resolveFile(newFile(localize("/1/2/3")),"./4").getPath()
localize("/1/2/3/4")
getFileUtils()
getFileUtils().resolveFile(newFile(localize("/1/2/3")),".\\4")
localize("/1/2/3")
getFileUtils().resolveFile(newFile(localize("/1/2/3")),".\\4").getPath()
localize("/1/2/3/4")
getFileUtils()
getFileUtils().resolveFile(newFile(localize("/1/2/3")),"./.\\4")
localize("/1/2/3")
getFileUtils().resolveFile(newFile(localize("/1/2/3")),"./.\\4").getPath()
localize("/1/2/3/4")
getFileUtils()
getFileUtils().resolveFile(newFile(localize("/1/2/3")),"../3/4")
localize("/1/2/3")
getFileUtils().resolveFile(newFile(localize("/1/2/3")),"../3/4").getPath()
localize("/1/2/3/4")
getFileUtils()
getFileUtils().resolveFile(newFile(localize("/1/2/3")),"..\\3\\4")
localize("/1/2/3")
getFileUtils().resolveFile(newFile(localize("/1/2/3")),"..\\3\\4").getPath()
localize("/1/2/3/4")
getFileUtils()
getFileUtils().resolveFile(newFile(localize("/1/2/3")),"../../5/.././2/./3/6/../4")
localize("/1/2/3")
getFileUtils().resolveFile(newFile(localize("/1/2/3")),"../../5/.././2/./3/6/../4").getPath()
localize("/1/2/3/4")
getFileUtils()
getFileUtils().resolveFile(newFile(localize("/1/2/3")),"..\\../5/..\\./2/./3/6\\../4")
localize("/1/2/3")
getFileUtils().resolveFile(newFile(localize("/1/2/3")),"..\\../5/..\\./2/./3/6\\../4").getPath()
localize("/1/../../b")
getFileUtils()
getFileUtils().resolveFile(newFile(localize("/1")),"../../b")
localize("/1")
assumeTrue("DOS or NetWare",!Os.isFamily("dos")&&!Os.isFamily("netware"))
Os.isFamily("dos")
Os.isFamily("netware")
getFileUtils()
getFileUtils().normalize("/")
getFileUtils().normalize("/").getPath()
getFileUtils()
getFileUtils().normalize("\\")
getFileUtils().normalize("\\").getPath()
thrown.expect(BuildException.class)
getFileUtils()
getFileUtils().normalize(driveSpec)
getFileUtils().normalize(driveSpec).getPath()
assumeTrue("Not DOS or Netware",Os.isFamily("dos")||Os.isFamily("netware"))
Os.isFamily("dos")
Os.isFamily("netware")
thrown.expect(BuildException.class)
getFileUtils()
getFileUtils().normalize("/")
getFileUtils().normalize("/").getPath()
assumeTrue("Not DOS or Netware",Os.isFamily("dos")||Os.isFamily("netware"))
Os.isFamily("dos")
Os.isFamily("netware")
thrown.expect(BuildException.class)
getFileUtils()
getFileUtils().normalize("\\")
getFileUtils().normalize("\\").getPath()
assumeTrue("Not DOS or Netware",Os.isFamily("dos")||Os.isFamily("netware"))
Os.isFamily("dos")
Os.isFamily("netware")
Os.isFamily("dos")
getFileUtils()
getFileUtils().normalize(driveSpec+"/")
getFileUtils().normalize(driveSpec+"/").getPath()
getFileUtils()
getFileUtils().normalize(driveSpec+"\\")
getFileUtils().normalize(driveSpec+"\\").getPath()
getFileUtils()
getFileUtils().normalize(driveSpecLower+"/")
getFileUtils().normalize(driveSpecLower+"/").getPath()
getFileUtils()
getFileUtils().normalize(driveSpecLower+"\\")
getFileUtils().normalize(driveSpecLower+"\\").getPath()
getFileUtils()
getFileUtils().normalize(driveSpec+"/////")
getFileUtils().normalize(driveSpec+"/////").getPath()
getFileUtils()
getFileUtils().normalize(driveSpec+"\\\\\\\\\\\\")
getFileUtils().normalize(driveSpec+"\\\\\\\\\\\\").getPath()
thrown.expect(BuildException.class)
getFileUtils()
getFileUtils().normalize(driveSpec)
getFileUtils().normalize(driveSpec).getPath()
Os.isFamily("netware")
getFileUtils()
getFileUtils().normalize(driveSpec)
getFileUtils().normalize(driveSpec).getPath()
getFileUtils()
getFileUtils().normalize(driveSpec+"/")
getFileUtils().normalize(driveSpec+"/").getPath()
getFileUtils()
getFileUtils().normalize(driveSpec+"\\")
getFileUtils().normalize(driveSpec+"\\").getPath()
getFileUtils()
getFileUtils().normalize(driveSpecLower)
getFileUtils().normalize(driveSpecLower).getPath()
getFileUtils()
getFileUtils().normalize(driveSpecLower+"/")
getFileUtils().normalize(driveSpecLower+"/").getPath()
getFileUtils()
getFileUtils().normalize(driveSpecLower+"\\")
getFileUtils().normalize(driveSpecLower+"\\").getPath()
getFileUtils()
getFileUtils().normalize(driveSpecLower+"\\junk")
getFileUtils().normalize(driveSpecLower+"\\junk").getPath()
getFileUtils()
getFileUtils().normalize(driveSpec+"/////")
getFileUtils().normalize(driveSpec+"/////").getPath()
getFileUtils()
getFileUtils().normalize(driveSpec+"\\\\\\\\\\\\")
getFileUtils().normalize(driveSpec+"\\\\\\\\\\\\").getPath()
localize("/1/2/3/4")
getFileUtils()
getFileUtils().normalize(localize("/1/2/3/4"))
localize("/1/2/3/4")
getFileUtils().normalize(localize("/1/2/3/4")).getPath()
localize("/1/2/3/4")
getFileUtils()
getFileUtils().normalize(localize("/1/2/3/./4"))
localize("/1/2/3/./4")
getFileUtils().normalize(localize("/1/2/3/./4")).getPath()
localize("/1/2/3/4")
getFileUtils()
getFileUtils().normalize(localize("/1/2/3/.\\4"))
localize("/1/2/3/.\\4")
getFileUtils().normalize(localize("/1/2/3/.\\4")).getPath()
localize("/1/2/3/4")
getFileUtils()
getFileUtils().normalize(localize("/1/2/3/./.\\4"))
localize("/1/2/3/./.\\4")
getFileUtils().normalize(localize("/1/2/3/./.\\4")).getPath()
localize("/1/2/3/4")
getFileUtils()
getFileUtils().normalize(localize("/1/2/3/../3/4"))
localize("/1/2/3/../3/4")
getFileUtils().normalize(localize("/1/2/3/../3/4")).getPath()
localize("/1/2/3/4")
getFileUtils()
getFileUtils().normalize(localize("/1/2/3/..\\3\\4"))
localize("/1/2/3/..\\3\\4")
getFileUtils().normalize(localize("/1/2/3/..\\3\\4")).getPath()
localize("/1/2/3/4")
getFileUtils()
getFileUtils().normalize(localize("/1/2/3/../../5/.././2/./3/6/../4"))
localize("/1/2/3/../../5/.././2/./3/6/../4")
getFileUtils().normalize(localize("/1/2/3/../../5/.././2/./3/6/../4")).getPath()
localize("/1/2/3/4")
getFileUtils()
getFileUtils().normalize(localize("/1/2/3/..\\../5/..\\./2/./3/6\\../4"))
localize("/1/2/3/..\\../5/..\\./2/./3/6\\../4")
getFileUtils().normalize(localize("/1/2/3/..\\../5/..\\./2/./3/6\\../4")).getPath()
localize("/1/../../b")
getFileUtils()
getFileUtils().normalize(localize("/1/../../b"))
localize("/1/../../b")
thrown.expect(BuildException.class)
getFileUtils()
getFileUtils().normalize("foo")
getFileUtils()
getFileUtils().resolveFile(null,"a")
newFile("a").getAbsoluteFile()
thrown.expect(NullPointerException.class)
getFileUtils()
getFileUtils().normalize(null)
getFileUtils()
getFileUtils().createTempFile("pre",".suf",null,false,true)
System.getProperty("java.io.tmpdir")
tmp1.getName()
startsWith("pre")
endsWith(".suf")
tmp1.exists()
tmp1.getName()
(newFile(tmploc,tmp1.getName())).getAbsolutePath()
tmp1.getAbsolutePath()
tmp1.delete()
folder.newFolder("ant-test")
getFileUtils()
getFileUtils().createTempFile("pre",".suf",dir2,true,true)
tmp2.getName()
startsWith("pre")
endsWith(".suf")
tmp2.exists()
tmp2.getName()
(newFile(dir2,tmp2.getName())).getAbsolutePath()
tmp2.getAbsolutePath()
tmp2.delete()
(newFile("/tmp")).getAbsolutePath()
getFileUtils()
getFileUtils().createTempFile("pre",".suf",parent,false)
tmp1.exists()
tmp1.getName()
startsWith("pre")
endsWith(".suf")
parent.getAbsolutePath()
tmp1.getParent()
getFileUtils()
getFileUtils().createTempFile("pre",".suf",parent,false)
tmp1.getAbsolutePath()
tmp2.getAbsolutePath()
getFileUtils()
getFileUtils().createTempFile("pre",".suf",null,false)
System.getProperty("java.io.tmpdir")
tmp3.getName()
(newFile(tmploc,tmp3.getName())).getAbsolutePath()
tmp3.getAbsolutePath()
getFileUtils()
getFileUtils().contentEquals(newFile(ROOT,"foo"),newFile(ROOT,"bar"))
getFileUtils()
getFileUtils().contentEquals(newFile(ROOT,"foo"),newFile(ROOT,"build.xml"))
getFileUtils()
getFileUtils().contentEquals(newFile(ROOT,"src"),newFile(ROOT,"src"))
getFileUtils()
getFileUtils().contentEquals(newFile(ROOT,"build.xml"),newFile(ROOT,"build.xml"))
getFileUtils()
getFileUtils().contentEquals(newFile(ROOT,"build.xml"),newFile(ROOT,"docs.xml"))
removeThis.deleteOnExit()
removeThis.exists()
getFileUtils()
getFileUtils().createNewFile(removeThis)
removeThis.exists()
getFileUtils()
getFileUtils().removeLeadingPath(newFile("/foo"),newFile("/foo/bar"))
getFileUtils()
getFileUtils().removeLeadingPath(newFile("/foo/"),newFile("/foo/bar"))
getFileUtils()
getFileUtils().removeLeadingPath(newFile("\\foo"),newFile("\\foo\\bar"))
getFileUtils()
getFileUtils().removeLeadingPath(newFile("\\foo\\"),newFile("\\foo\\bar"))
getFileUtils()
getFileUtils().removeLeadingPath(newFile("c:/foo"),newFile("c:/foo/bar"))
getFileUtils()
getFileUtils().removeLeadingPath(newFile("c:/foo/"),newFile("c:/foo/bar"))
getFileUtils()
getFileUtils().removeLeadingPath(newFile("c:\\foo"),newFile("c:\\foo\\bar"))
getFileUtils()
getFileUtils().removeLeadingPath(newFile("c:\\foo\\"),newFile("c:\\foo\\bar"))
Os.isFamily("dos")
Os.isFamily("netware")
getFileUtils()
getFileUtils().normalize("/bar")
getFileUtils().normalize("/bar").getAbsolutePath()
getFileUtils()
getFileUtils().removeLeadingPath(newFile("/foo"),newFile("/bar"))
getFileUtils()
getFileUtils().normalize("/foobar")
getFileUtils().normalize("/foobar").getAbsolutePath()
getFileUtils()
getFileUtils().removeLeadingPath(newFile("/foo"),newFile("/foobar"))
getFileUtils()
getFileUtils().removeLeadingPath(newFile("/foo/bar"),newFile("/foo/bar"))
getFileUtils()
getFileUtils().removeLeadingPath(newFile("/foo/bar"),newFile("/foo/bar/"))
getFileUtils()
getFileUtils().removeLeadingPath(newFile("/foo/bar/"),newFile("/foo/bar/"))
getFileUtils()
getFileUtils().removeLeadingPath(newFile("/foo/bar/"),newFile("/foo/bar"))
"foo/bar".replace('\\',File.separatorChar)
"foo/bar".replace('\\',File.separatorChar).replace('/',File.separatorChar)
getFileUtils()
getFileUtils().removeLeadingPath(newFile("/"),newFile("/foo/bar"))
getFileUtils()
getFileUtils().removeLeadingPath(newFile("c:/"),newFile("c:/foo/bar"))
getFileUtils()
getFileUtils().removeLeadingPath(newFile("c:\\"),newFile("c:\\foo\\bar"))
Os.isFamily("dos")
Os.isFamily("netware")
System.getProperty("user.dir")
System.getProperty("user.dir").substring(0,3)
System.getProperty("user.dir").substring(0,3).replace(File.separatorChar,'/')
Os.isFamily("dos")
removeExtraneousAuthority(getFileUtils().toURI("c:\\foo"))
getFileUtils()
getFileUtils().toURI("c:\\foo")
Os.isFamily("netware")
removeExtraneousAuthority(getFileUtils().toURI("sys:\\foo"))
getFileUtils()
getFileUtils().toURI("sys:\\foo")
removeExtraneousAuthority(getFileUtils().toURI("/foo"))
getFileUtils()
getFileUtils().toURI("/foo")
getFileUtils()
getFileUtils().toURI("./foo")
startsWith("file:/")
getFileUtils()
getFileUtils().toURI("./foo")
endsWith("/foo")
removeExtraneousAuthority(getFileUtils().toURI("/foo bar"))
getFileUtils()
getFileUtils().toURI("/foo bar")
removeExtraneousAuthority(getFileUtils().toURI("/foo#bar"))
getFileUtils()
getFileUtils().toURI("/foo#bar")
removeExtraneousAuthority(getFileUtils().toURI("\\foo"))
getFileUtils()
getFileUtils().toURI("\\foo")
getFileUtils()
getFileUtils().toURI(".\\foo")
startsWith("file:/")
getFileUtils()
getFileUtils().toURI(".\\foo")
endsWith("/foo")
removeExtraneousAuthority(getFileUtils().toURI("\\foo bar"))
getFileUtils()
getFileUtils().toURI("\\foo bar")
removeExtraneousAuthority(getFileUtils().toURI("\\foo#bar"))
getFileUtils()
getFileUtils().toURI("\\foo#bar")
removeExtraneousAuthority(getFileUtils().toURI("/\u00E4nt"))
getFileUtils()
getFileUtils().toURI("/\u00E4nt")
uri.startsWith(prefix)
uri.substring(prefix.length())
prefix.length()
assumeTrue("Test only runs on DOS",Os.isFamily("dos"))
Os.isFamily("dos")
isContextRelativePath("/\u00E4nt")
isContextRelativePath("\\foo")
Os.isFamily("dos")
Os.isFamily("netware")
System.getProperty("user.dir")
System.getProperty("user.dir").substring(0,2)
Os.isFamily("netware")
getFileUtils()
getFileUtils().fromURI("file:///sys:/foo")
Os.isFamily("dos")
getFileUtils()
getFileUtils().fromURI("file:///c:/foo")
getFileUtils()
getFileUtils().fromURI("file:///foo")
getFileUtils()
getFileUtils().fromURI("file:./foo")
getFileUtils()
getFileUtils().fromURI("file:///foo%20bar")
getFileUtils()
getFileUtils().fromURI("file:///foo%23bar")
System.currentTimeMillis()
getFileUtils()
getFileUtils().isUpToDate(firstTime,secondTime)
getFileUtils()
getFileUtils().isUpToDate(secondTime,firstTime)
getFileUtils()
getFileUtils().isUpToDate(firstTime,-1L)
System.getProperty("java.io.tmpdir")
getFileUtils()
getFileUtils().createTempFile("alpha","beta",tempFolder,true,true)
wellcased.getName()
wellcased.getName().toUpperCase()
Os.isFamily("mac")
Os.isFamily("unix")
Os.isFamily("dos")
getFileUtils()
getFileUtils().hasErrorInCase(wrongcased)
getFileUtils()
getFileUtils().hasErrorInCase(wellcased)
getFileUtils()
getFileUtils().hasErrorInCase(wrongcased)
getFileUtils()
getFileUtils().hasErrorInCase(wellcased)
getFileUtils()
getFileUtils().getDefaultEncoding()
getFileUtils()
getFileUtils().isLeadingPath(newFile("/foo"),newFile("/foo/../../bar"))
getFileUtils()
getFileUtils().isLeadingPath(newFile("c:\\foo"),newFile("c:\\foo\\..\\..\\bar"))
getFileUtils()
getFileUtils().isLeadingPath(newFile("/foo"),newFile("/foo/../.."))
getFileUtils()
getFileUtils().isLeadingPath(newFile("/foo"),newFile("/foo/../../bar"),true)
getFileUtils()
getFileUtils().isLeadingPath(newFile("c:\\foo"),newFile("c:\\foo\\..\\..\\bar"),true)
getFileUtils()
getFileUtils().isLeadingPath(newFile("/foo"),newFile("/foo/../.."),true)
assumeFalse("Test doesn't run on DOS",Os.isFamily("dos"))
Os.isFamily("dos")
getFileUtils()
getFileUtils().isLeadingPath(newFile("/foo"),newFile("/foo/bar"),true)
getFileUtils()
getFileUtils().isLeadingPath(newFile("/foo"),newFile("/foo/baz/../bar"),true)
getFileUtils()
getFileUtils().isLeadingPath(newFile("/foo"),newFile("/foo/../foo/bar"),true)
getFileUtils()
getFileUtils().isLeadingPath(newFile("/foo"),newFile("/foobar"),true)
getFileUtils()
getFileUtils().isLeadingPath(newFile("/foo"),newFile("/bar"),true)
assumeFalse("Test doesn't run on DOS",Os.isFamily("dos"))
Os.isFamily("dos")
getFileUtils()
getFileUtils().isLeadingPath(newFile("/foo/"),newFile("/foo/bar"),true)
getFileUtils()
getFileUtils().isLeadingPath(newFile("/foo/"),newFile("/foo/bar/"),true)
getFileUtils()
getFileUtils().isLeadingPath(newFile("/foo/"),newFile("/foo/"),true)
getFileUtils()
getFileUtils().isLeadingPath(newFile("/foo/"),newFile("/foo"),true)
getFileUtils()
getFileUtils().isLeadingPath(newFile("/foo"),newFile("/foo/"),true)
getFileUtils()
getFileUtils().isLeadingPath(newFile("/foo/"),newFile("/foo/bar"),false)
getFileUtils()
getFileUtils().isLeadingPath(newFile("/foo/"),newFile("/foo/bar/"),false)
getFileUtils()
getFileUtils().isLeadingPath(newFile("/foo/"),newFile("/foo/"),false)
getFileUtils()
getFileUtils().isLeadingPath(newFile("/foo/"),newFile("/foo"),false)
getFileUtils()
getFileUtils().isLeadingPath(newFile("/foo"),newFile("/foo/"),false)
assumeTrue("Test only runs on DOS",Os.isFamily("dos"))
Os.isFamily("dos")
getFileUtils()
getFileUtils().isLeadingPath(newFile("C:\\foo"),newFile("C:\\foo\\bar"),true)
getFileUtils()
getFileUtils().isLeadingPath(newFile("C:\\foo"),newFile("C:\\foo\\baz\\..\\bar"),true)
getFileUtils()
getFileUtils().isLeadingPath(newFile("C:\\foo"),newFile("C:\\foo\\..\\foo\\bar"),true)
getFileUtils()
getFileUtils().isLeadingPath(newFile("C:\\foo"),newFile("C:\\foobar"),true)
getFileUtils()
getFileUtils().isLeadingPath(newFile("C:\\foo"),newFile("C:\\bar"),true)
assumeTrue("Test only runs on DOS",Os.isFamily("dos"))
Os.isFamily("dos")
getFileUtils()
getFileUtils().isLeadingPath(newFile("c:\\foo\\"),newFile("c:\\foo\\bar"),true)
getFileUtils()
getFileUtils().isLeadingPath(newFile("c:\\foo\\"),newFile("c:\\foo\\bar\\"),true)
getFileUtils()
getFileUtils().isLeadingPath(newFile("c:\\foo\\"),newFile("c:\\foo\\"),true)
getFileUtils()
getFileUtils().isLeadingPath(newFile("c:\\foo\\"),newFile("c:\\foo"),true)
getFileUtils()
getFileUtils().isLeadingPath(newFile("c:\\foo"),newFile("c:\\foo\\"),true)
getFileUtils()
getFileUtils().isLeadingPath(newFile("c:\\foo\\"),newFile("c:\\foo\\bar"),false)
getFileUtils()
getFileUtils().isLeadingPath(newFile("c:\\foo\\"),newFile("c:\\foo\\bar\\"),false)
getFileUtils()
getFileUtils().isLeadingPath(newFile("c:\\foo\\"),newFile("c:\\foo\\"),false)
getFileUtils()
getFileUtils().isLeadingPath(newFile("c:\\foo\\"),newFile("c:\\foo"),false)
getFileUtils()
getFileUtils().isLeadingPath(newFile("c:\\foo"),newFile("c:\\foo\\"),false)
Files.createTempDirectory(null)
Files.createTempFile(tmpDir,null,null)
tmpFile.toFile()
tmpFile.toFile().deleteOnExit()
tmpDir.toFile()
tmpDir.toFile().deleteOnExit()
Files.exists(Paths.get(tmpDir.toString(),tmpFile.getFileName().toString().toLowerCase(Locale.US)))
Paths.get(tmpDir.toString(),tmpFile.getFileName().toString().toLowerCase(Locale.US))
tmpDir.toString()
tmpFile.getFileName()
tmpFile.getFileName().toString()
tmpFile.getFileName().toString().toLowerCase(Locale.US)
Files.exists(Paths.get(tmpDir.toString(),tmpFile.getFileName().toString().toUpperCase(Locale.US)))
Paths.get(tmpDir.toString(),tmpFile.getFileName().toString().toUpperCase(Locale.US))
tmpDir.toString()
tmpFile.getFileName()
tmpFile.getFileName().toString()
tmpFile.getFileName().toString().toUpperCase(Locale.US)
isCaseSensitiveFileSystem(tmpDir)
actualCaseSensitivity.isPresent()
actualCaseSensitivity.get()
isCaseSensitiveFileSystem(tmpFile)
actualCaseSensitivity.isPresent()
actualCaseSensitivity.get()
path.substring(1)
path.replace('\\',File.separatorChar)
path.replace('\\',File.separatorChar).replace('/',File.separatorChar)
assumeTrue("Not DOS or Netware",Os.isFamily("dos")||Os.isFamily("netware"))
Os.isFamily("dos")
Os.isFamily("netware")
s1.isEmpty()
s2.isEmpty()
sb1.setCharAt(0,Character.toUpperCase(s1.charAt(0)))
Character.toUpperCase(s1.charAt(0))
s1.charAt(0)
sb2.setCharAt(0,Character.toUpperCase(s2.charAt(0)))
Character.toUpperCase(s2.charAt(0))
s2.charAt(0)
sb1.toString()
sb2.toString()
m.setFrom("foobar")
m.setTo("baz")
m.mapFileName("plonk")
m.mapFileName("foobar")
m.setFrom("*foo")
m.setTo("*plonk")
m.mapFileName("bar.baz")
m.mapFileName("bar.foo")
m.setTo("foo*")
m.mapFileName("bar.foo")
m.setFrom("foo*")
m.setTo("plonk*")
m.mapFileName("bar.baz")
m.mapFileName("foo.bar")
m.setTo("*foo")
m.mapFileName("foo.bar")
m.setFrom("foo*bar")
m.setTo("plonk*pling")
m.mapFileName("bar.baz")
m.mapFileName("foo.bar")
m.mapFileName("foo.baz.bar")
m.mapFileName("foobar")
assumeTrue("Test only runs on netware",Os.isName("netware"))
Os.isName("netware")
JavaEnvUtils.getJreExecutable("java")
JavaEnvUtils.getJdkExecutable("javac")
JavaEnvUtils.getJreExecutable("foo")
JavaEnvUtils.getJdkExecutable("foo")
assumeTrue("Test only runs on windows",Os.isFamily("windows"))
Os.isFamily("windows")
FILE_UTILS.normalize(JavaEnvUtils.getJavaHome())
JavaEnvUtils.getJavaHome()
FILE_UTILS.normalize(JavaEnvUtils.getJavaHome()).getAbsolutePath()
JavaEnvUtils.getJreExecutable("java")
endsWith(".exe")
(newFile(j)).isAbsolute()
startsWith(javaHome)
JavaEnvUtils.getJdkExecutable("javac")
endsWith(".exe")
(newFile(j)).isAbsolute()
FILE_UTILS.normalize(javaHome+"/..")
FILE_UTILS.normalize(javaHome+"/..").getAbsolutePath()
startsWith(javaHomeParent)
JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
startsWith(javaHome)
not(startsWith(javaHome))
startsWith(javaHome)
JavaEnvUtils.getJreExecutable("foo")
JavaEnvUtils.getJdkExecutable("foo")
assumeFalse("Test only runs on non Netware and non Windows systems",Os.isName("netware")||Os.isFamily("windows"))
Os.isName("netware")
Os.isFamily("windows")
FILE_UTILS.normalize(JavaEnvUtils.getJavaHome())
JavaEnvUtils.getJavaHome()
FILE_UTILS.normalize(JavaEnvUtils.getJavaHome()).getAbsolutePath()
Os.isFamily("dos")
JavaEnvUtils.getJreExecutable("java")
extension.isEmpty()
endsWith(extension)
(newFile(j)).isAbsolute()
startsWith(javaHome)
JavaEnvUtils.getJdkExecutable("javac")
extension.isEmpty()
endsWith(extension)
(newFile(j)).isAbsolute()
FILE_UTILS.normalize(javaHome+"/..")
FILE_UTILS.normalize(javaHome+"/..").getAbsolutePath()
startsWith(javaHomeParent)
JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
startsWith(javaHome)
not(startsWith(javaHome))
startsWith(javaHome)
JavaEnvUtils.getJreExecutable("foo")
JavaEnvUtils.getJdkExecutable("foo")
JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.getJavaVersion())
JavaEnvUtils.getJavaVersion()
assumeTrue(JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_9))
JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_9)
JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_9)
assumeTrue("10".equals(System.getProperty("java.specification.version")))
"10".equals(System.getProperty("java.specification.version"))
System.getProperty("java.specification.version")
JavaEnvUtils.getJavaVersion()
JavaEnvUtils.getJavaVersionNumber()
JavaEnvUtils.getParsedJavaVersion()
JavaEnvUtils.isJavaVersion("10")
JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
JAXPUtils.getSystemId(file)
startsWith("file:/")
not(startsWith("file:////"))
startsWith("file:////")
folder.newFile("tmp.properties")
lpf.load(fis)
lpf.saveAs(tmp)
originalProps.load(newFileInputStream(simple))
tmpProps.load(newFileInputStream(tmp))
readFile(tmp)
containsString(("# a comment"))
containsString(("! more comment"))
lpf.setProperty(" prop one ","  leading and trailing spaces ")
lpf.setProperty("prop\ttwo","contains\ttab")
lpf.setProperty("prop\nthree","contains\nnewline")
lpf.setProperty("prop\rfour","contains\rcarriage return")
lpf.setProperty("prop\ffive","contains\fform feed")
lpf.setProperty("prop\\six","contains\\backslash")
lpf.setProperty("prop:seven","contains:colon")
lpf.setProperty("prop=eight","contains=equals")
lpf.setProperty("prop#nine","contains#hash")
lpf.setProperty("prop!ten","contains!exclamation")
lpf.saveAs(tmp)
readFile(tmp)
containsString("\\ prop\\ one\\ =\\ \\ leading and trailing spaces ")
containsString("prop\\ttwo=contains\\ttab")
containsString("prop\\nthree=contains\\nnewline")
containsString("prop\\rfour=contains\\rcarriage return")
containsString("prop\\\\six=contains\\\\backslash")
containsString("prop\\:seven=contains\\:colon")
containsString("prop\\=eight=contains\\=equals")
containsString("prop\\#nine=contains\\#hash")
containsString("prop\\!ten=contains\\!exclamation")
lpf.load(fis)
lpf.setProperty(" prop one ","new one")
lpf.setProperty("prop\ttwo","new two")
lpf.setProperty("prop\nthree","new three")
lpf.saveAs(tmp)
readFile(tmp)
not(containsString("\\ prop\\ one\\ =\\ \\ leading and trailing spaces "))
containsString("\\ prop\\ one\\ =\\ \\ leading and trailing spaces ")
containsString("\\ prop\\ one\\ =new one")
not(containsString("prop\\ttwo=contains\\ttab"))
containsString("prop\\ttwo=contains\\ttab")
containsString("prop\\ttwo=new two")
not(containsString("prop\\nthree=contains\\nnewline"))
containsString("prop\\nthree=contains\\nnewline")
containsString("prop\\nthree=new three")
lpf.load(fis)
lpf.store(fos,"file-header")
readFile(tmp)
startsWith("#file-header")
lpf.load(fis)
lpf.clear()
lpf.saveAs(tmp)
readFile(tmp)
not(containsString(("prop.alpha")))
containsString(("prop.alpha"))
not(containsString(("prop.beta")))
containsString(("prop.beta"))
not(containsString(("prop.gamma")))
containsString(("prop.gamma"))
not(containsString(("# a comment")))
containsString(("# a comment"))
not(containsString(("! more comment")))
containsString(("! more comment"))
not(containsString(("# now a line wrapping one")))
containsString(("# now a line wrapping one"))
lpf.load(fis)
lpf.remove("prop.beta")
lpf.saveAs(tmp)
readFile(tmp)
not(containsString(("prop.beta")))
containsString(("prop.beta"))
containsString("! more comment")
lpf.load(fis)
lpf.setRemoveComments(true)
lpf.remove("prop.beta")
lpf.saveAs(tmp)
readFile(tmp)
not(containsString(("prop.beta")))
containsString(("prop.beta"))
not(containsString(("! more comment")))
containsString(("! more comment"))
lpf.load(fis)
lpf.clone()
lpfClone.setProperty("prop.new","a new property")
lpfClone.setProperty("prop.beta","a new value for beta")
lpf.size()
lpfClone.size()
lpf.saveAs(tmp)
readFile(tmp)
folder.newFile("tmp-clone.properties")
lpfClone.saveAs(tmpClone)
readFile(tmpClone)
containsString(("simple"))
not(containsString(("prop.new")))
containsString(("prop.new"))
containsString(("a new value for beta"))
containsString(("prop.new"))
lpf.load(fis)
lpf.setProperty("prop:seven","new value for seven")
lpf.setProperty("prop=eight","new value for eight")
lpf.setProperty("prop eleven","new value for eleven")
lpf.setProperty("alpha","new value for alpha")
lpf.setProperty("beta","new value for beta")
lpf.saveAs(tmp)
readFile(tmp)
containsString("prop\\:seven=new value for seven")
containsString("prop\\=eight=new value for eight")
containsString("prop\\ eleven=new value for eleven")
containsString("alpha=new value for alpha")
containsString("beta=new value for beta")
not(containsString("prop\\:seven=contains\\:colon"))
containsString("prop\\:seven=contains\\:colon")
not(containsString("prop\\=eight=contains\\=equals"))
containsString("prop\\=eight=contains\\=equals")
not(containsString("alpha:set with a colon"))
containsString("alpha:set with a colon")
not(containsString("beta set with a space"))
containsString("beta set with a space")
readFully(isr)
los.close()
f.delete()
los.close()
f.exists()
los.open()
los.close()
f.exists()
los.write(0)
los.close()
f.exists()
los.write(newbyte[]{0})
los.close()
f.exists()
stream.close()
writeByteArray()
writeAsArray('\n')
writeSingleBytes()
stream.write('\n')
writeByteArray()
writeAsArray('\r')
writeSingleBytes()
stream.write('\r')
writeByteArray()
writeAsArray('\r')
writeAsArray('\n')
writeSingleBytes()
stream.write('\r')
stream.write('\n')
writeByteArray()
stream.flush()
writeSingleBytes()
stream.flush()
writeByteArray()
stream.close()
writeSingleBytes()
stream.close()
stream.write(LINE.getBytes(),0,LINE.length())
LINE.getBytes()
LINE.length()
LINE.getBytes()
stream.write(b)
stream.write(newbyte[]{(byte)c},0,1)
h.put(K1,V1)
h.clear()
h.isEmpty()
h.put(K1,V1)
h.clone()
instanceOf(LinkedHashtable.class)
hasKey(K1)
h.put(K1,V1)
h.contains(K1)
hasKey(K1)
hasValue(V1)
not(hasKey(K2))
hasKey(K2)
h.get(K1)
h.put(K1,V1)
h.get(K1)
h.isEmpty()
h.put(K1,V1)
h.isEmpty()
h.put(K1,V1)
h.put(K1,V2)
h.put(K1,V1)
h2.putAll(h)
hasKey(K1)
h.put(K1,V1)
h.remove(K1)
h.isEmpty()
h.remove(K1)
h.size()
h.put(K1,V1)
h.size()
multiSetup()
Collections.list(h.keys())
h.keys()
Collections.list(h.keys()).iterator()
multiSetup()
h.keySet()
h.keySet().iterator()
multiSetup()
Collections.list(h.elements())
h.elements()
Collections.list(h.elements()).iterator()
multiSetup()
h.values()
h.values().iterator()
multiSetup()
h.entrySet()
h.entrySet().iterator()
i.hasNext()
i.next()
e.getKey()
e.getValue()
i.hasNext()
i.next()
e.getKey()
e.getValue()
i.hasNext()
h.put(K1,V1)
h.put(K2,V2)
i.hasNext()
i.next()
i.hasNext()
i.next()
i.hasNext()
i.hasNext()
i.next()
i.hasNext()
i.next()
i.hasNext()
LoaderUtils.getClassSource(LoaderUtils.class)
LoaderUtils.getResourceSource(null,"org/apache/tools/ant/taskdefs/defaults.properties")
f1.getAbsolutePath()
f2.getAbsolutePath()
sb.append(i)
sb.toString()
Native2AsciiUtils.native2ascii(sb.toString())
sb.toString()
Native2AsciiUtils.native2ascii("\u00e4\u00f6\u00fc")
Native2AsciiUtils.native2ascii("\u00e4\u01f6\u12fc")
sb.append(i)
sb.toString()
Native2AsciiUtils.ascii2native(sb.toString())
sb.toString()
Native2AsciiUtils.ascii2native("\\u00e4\\u00f6\\u00fc")
Native2AsciiUtils.ascii2native("\\abcdef")
Native2AsciiUtils.ascii2native("\\u012j")
Native2AsciiUtils.ascii2native("\\u00e4")
Native2AsciiUtils.ascii2native("\\u00e")
Native2AsciiUtils.ascii2native("\\u00")
Native2AsciiUtils.ascii2native("\\u0")
mapper.setFrom("*.java")
mapper.setTo("TEST-*.xml")
fixupPath("org/apache/tools/ant/util/PackageNameMapperTest.java")
mapper.mapFileName(file)
file.replace('/',File.separatorChar)
PermissionUtils.modeFromPermissions(EnumSet.of(PosixFilePermission.OWNER_READ,PosixFilePermission.OWNER_WRITE,PosixFilePermission.OWNER_EXECUTE),PermissionUtils.FileType.REGULAR_FILE)
EnumSet.of(PosixFilePermission.OWNER_READ,PosixFilePermission.OWNER_WRITE,PosixFilePermission.OWNER_EXECUTE)
Integer.toString(mode,8)
PermissionUtils.permissionsFromMode(0100753)
EnumSet.of(PosixFilePermission.OWNER_READ,PosixFilePermission.OWNER_WRITE,PosixFilePermission.OWNER_EXECUTE,PosixFilePermission.GROUP_READ,PosixFilePermission.GROUP_EXECUTE,PosixFilePermission.OTHERS_WRITE,PosixFilePermission.OTHERS_EXECUTE)
PermissionUtils.FileType.of(folder.newFile("ant.tst").toPath())
folder.newFile("ant.tst")
folder.newFile("ant.tst").toPath()
PermissionUtils.FileType.of(newFileResource(folder.newFile("ant.tst")))
folder.newFile("ant.tst")
PermissionUtils.FileType.of(folder.newFolder("ant.tst").toPath())
folder.newFolder("ant.tst")
folder.newFolder("ant.tst").toPath()
PermissionUtils.FileType.of(newFileResource(folder.newFolder("ant.tst")))
folder.newFolder("ant.tst")
folder.newFile("ant.tst")
assumeNotNull(Files.getFileAttributeView(f.toPath(),PosixFileAttributeView.class))
Files.getFileAttributeView(f.toPath(),PosixFileAttributeView.class)
f.toPath()
EnumSet.of(PosixFilePermission.OWNER_READ,PosixFilePermission.OWNER_WRITE,PosixFilePermission.OWNER_EXECUTE,PosixFilePermission.GROUP_READ)
PermissionUtils.setPermissions(newFileResource(f),s,null)
PermissionUtils.getPermissions(newFileResource(f),null)
folder.newFile("ant.zip")
os.putNextEntry(e)
os.closeEntry()
r.setName("foo")
r.setArchive(f)
EnumSet.of(PosixFilePermission.OWNER_READ,PosixFilePermission.OWNER_WRITE,PosixFilePermission.OWNER_EXECUTE,PosixFilePermission.GROUP_READ)
PermissionUtils.setPermissions(r,s,null)
PermissionUtils.getPermissions(r,null)
folder.newFile("ant.tar")
os.putNextEntry(e)
os.closeEntry()
r.setName("foo")
r.setArchive(f)
EnumSet.of(PosixFilePermission.OWNER_READ,PosixFilePermission.OWNER_WRITE,PosixFilePermission.OWNER_EXECUTE,PosixFilePermission.GROUP_READ)
PermissionUtils.setPermissions(r,s,null)
PermissionUtils.getPermissions(r,null)
compareBytes("abc","utf-8")
compareBytes("a","utf-16")
r.read()
"abc".getBytes(StandardCharsets.UTF_16)
r.read(bytes,0,0)
r.read(bytes,0,10)
"abc".getBytes()
"".getBytes(StandardCharsets.UTF_16)
System.out.println("Preample len is "+bytes.length)
r.read()
actualOS.write((byte)b)
r.read()
utf8.read()
expectedOS.write((byte)b)
utf8.read()
expectedOS.toByteArray()
actualOS.toByteArray()
s.getBytes(encoding)
r.read()
r.read()
taskINeedForLogging.setProject(newProject())
ResourceUtils.selectOutOfDateSources(taskINeedForLogging,newResource[]{r},this,this)
StringUtils.split(data,',')
res.size()
res.elementAt(0)
res.elementAt(1)
res.elementAt(2)
res.elementAt(3)
StringUtils.lineSplit(data)
res.size()
res.elementAt(0)
res.elementAt(1)
res.elementAt(2)
res.elementAt(3)
res.elementAt(4)
StringUtils.replace(data,"a","")
StringUtils.endsWith(newStringBuffer(),"")
StringUtils.endsWith(newStringBuffer("12234545"),"")
StringUtils.endsWith(newStringBuffer("12345678"),"78")
StringUtils.endsWith(newStringBuffer("123"),"123")
StringUtils.endsWith(newStringBuffer("12"),"1245")
StringUtils.endsWith(newStringBuffer("12345678"),"789")
StringUtils.endsWith(newStringBuffer(),"12345667")
getFilledBuffer(1024*300,'a')
buf.toString()
endsWith("aa")
getFilledBuffer(1024*300,'a')
StringUtils.endsWith(buf,"aa")
buf.append(ch)
StringUtils.parseHumanSizes("1K")
StringUtils.parseHumanSizes("1M")
StringUtils.parseHumanSizes("1G")
StringUtils.parseHumanSizes("1T")
StringUtils.parseHumanSizes("1P")
StringUtils.parseHumanSizes("1")
StringUtils.removeSuffix(input,suffix)
StringUtils.removeSuffix(input,"bla")
StringUtils.removePrefix(input,prefix)
StringUtils.removePrefix(input,"bla")
StringUtils.join(Arrays.asList("a","b","c"),", ")
Arrays.asList("a","b","c")
StringUtils.join(newString[]{},", ")
StringUtils.join((Collection<String>)null,", ")
StringUtils.join((String[])null,", ")
StringUtils.join(Arrays.asList("a","b","c"),null)
Arrays.asList("a","b","c")
StringUtils.trimToNull(null)
StringUtils.trimToNull("")
StringUtils.trimToNull("   ")
StringUtils.trimToNull(" aaBcDeF  ")
assumeFalse("Symlink doesn't work on Windows",Os.isFamily("windows"))
Os.isFamily("windows")
SYMLINK_UTILS.isSymbolicLink("/")
UnicodeUtil.EscapeUnicode(word.charAt(0))
word.charAt(0)
UnicodeUtil.EscapeUnicode(word.charAt(0)).toString()
UnicodeUtil.EscapeUnicode(word.charAt(1))
word.charAt(1)
UnicodeUtil.EscapeUnicode(word.charAt(1)).toString()
mapper.setFrom("TEST-*.xml")
mapper.setTo("*.java")
fixupPath("org/apache/tools/ant/util/UnPackageNameMapperTest.java")
mapper.mapFileName(file)
file.replace('/',File.separatorChar)
v.add(O)
v.add(O)
v.size()
v.add(0,O)
v.add(1,O)
v.size()
v.addElement(O)
v.addElement(O)
v.size()
v.addAll(Arrays.asList(O,O))
Arrays.asList(O,O)
v.size()
v.addAll(0,Arrays.asList(O,O))
Arrays.asList(O,O)
v.size()
v.add(O)
v.clear()
v.size()
v.add(O)
v.clone()
instanceOf(VectorSet.class)
vs.size()
vs.contains(O)
v.contains(O)
v.add(O)
v.contains(O)
v.contains(null)
v.containsAll(Arrays.asList(O,O))
Arrays.asList(O,O)
v.add(O)
v.containsAll(Arrays.asList(O,O))
Arrays.asList(O,O)
v.containsAll(Arrays.asList(O,null))
Arrays.asList(O,null)
v.insertElementAt(O,0)
v.insertElementAt(O,1)
v.size()
v.add(O)
v.remove(0)
v.size()
v.remove(0)
v.add(O)
v.remove(O)
v.size()
v.remove(O)
v.add(a)
v.add(b)
v.add(O)
v.size()
v.capacity()
v.remove(O)
v.size()
v.remove(O)
v.elementAt(0)
v.elementAt(1)
v.add(O)
v.add(a)
v.add(b)
v.size()
v.capacity()
v.remove(O)
v.size()
v.remove(O)
v.elementAt(0)
v.elementAt(1)
v.add(a)
v.add(O)
v.add(b)
v.size()
v.capacity()
v.remove(O)
v.size()
v.remove(O)
v.elementAt(0)
v.elementAt(1)
v.add(O)
v.removeAll(Arrays.asList(O,O))
Arrays.asList(O,O)
v.size()
v.removeAll(Arrays.asList(O,O))
Arrays.asList(O,O)
v.add(O)
v.removeAllElements()
v.size()
v.add(O)
v.removeElement(O)
v.size()
v.removeElement(O)
v.add(O)
v.removeElementAt(0)
v.size()
v.removeElementAt(0)
v.addAll(Arrays.asList(O,a,b,c))
Arrays.asList(O,a,b,c)
v.removeRange(1,3)
v.size()
v.contains(O)
v.contains(c)
v.addAll(Arrays.asList(O,a,b,c))
Arrays.asList(O,a,b,c)
v.indexOf(O)
v.retainAll(Arrays.asList(c,O))
Arrays.asList(c,O)
v.size()
v.contains(O)
v.contains(c)
v.indexOf(O)
v.add(1)
v.add(2)
v.add(3)
v.retainAll(Arrays.asList(1,2))
Arrays.asList(1,2)
v.size()
v.retainAll(Arrays.asList(1,2))
Arrays.asList(1,2)
v.size()
v.retainAll(Arrays.asList(4,5))
Arrays.asList(4,5)
v.size()
v.retainAll(Arrays.asList(4,5))
Arrays.asList(4,5)
v.add(O)
v.set(0,a)
v.get(0)
v.size()
v.add(O)
v.setElementAt(a,0)
v.get(0)
v.size()
v.add(i)
v.add(i)
v.size()
list.add(i)
v.add(i)
v.retainAll(list)
v.toString()
v.size()
buildRule.configureProject("src/etc/testcases/types/xmlfragment.xml")
buildRule.getProject()
buildRule.getProject().getReference("nested-text")
x.getFragment()
n.hasAttributes()
n.getChildNodes()
nl.getLength()
nl.item(0)
nl.item(0).getNodeType()
nl.item(0)
nl.item(0).getNodeValue()
buildRule.getProject()
buildRule.getProject().getReference("with-children")
x.getFragment()
n.hasAttributes()
n.getChildNodes()
nl.getLength()
nl.item(0)
nl.item(0).getNodeType()
nl.item(0)
child1.getTagName()
child1.hasAttributes()
child1.getChildNodes()
nl2.getLength()
nl2.item(0)
nl2.item(0).getNodeType()
nl2.item(0)
nl2.item(0).getNodeValue()
nl.item(1)
nl.item(1).getNodeType()
nl.item(1)
child2.getTagName()
child2.hasAttributes()
child2.getChildNodes()
nl2.getLength()
child2.getAttribute("foo")
nl.item(2)
nl.item(2).getNodeType()
nl.item(2)
child3.getTagName()
child3.hasAttributes()
child3.getChildNodes()
nl2.getLength()
nl2.item(0)
nl2.item(0).getNodeType()
nl2.item(0)
((Element)nl2.item(0)).getTagName()
fth.getImplementation()
fth.setMagicValue("bar")
fth.getImplementation()
fth.getImplementation()
fth.getImplementation()
fth.setMagicValue("bar")
fth.setImplementation("baz")
fth.getImplementation()
fth.hasBeenSet()
fth.setMagicValue(null)
fth.hasBeenSet()
fth.setMagicValue("foo")
fth.hasBeenSet()
fth.setMagicValue(null)
fth.hasBeenSet()
fth.setImplementation("baz")
fth.hasBeenSet()
ia.setLine("A B")
ia.getParts()
ia.getParts(null)
ia.setImplementation("foo")
ia.getParts(null)
ia.getParts("foo")
super.testWindowsLineSeparator2()
super.testUnixLineSeparator()
super.testWindowsLineSeparator2()
super.testUnixLineSeparator()
super.testParagraphCharacter()
super.testLineSeparatorCharacter()
super.testStandaloneCR()
super.testWindowsLineSeparator()
super.testParagraphCharacter()
super.testLineSeparatorCharacter()
super.testStandaloneCR()
super.testWindowsLineSeparator()
getImplementation()
reg.setPattern("aaaa")
reg.matches("aaaa")
reg.matches("xaaaa")
reg.matches("xaaa")
reg.setPattern("^aaaa")
reg.matches("xaaaa")
reg.matches("aaaax")
reg.setPattern("aaaa$")
reg.matches("aaaax")
reg.matches("xaaaa")
reg.setPattern("[0-9]+")
reg.matches("123")
reg.matches("1")
reg.matches("")
reg.matches("a")
reg.setPattern("[0-9]*")
reg.matches("123")
reg.matches("1")
reg.matches("")
reg.matches("a")
reg.setPattern("([0-9]+)=\\1")
reg.matches("1=1")
reg.matches("1=2")
reg.setPattern("aaaa")
reg.getGroups("xaaaa")
v.size()
v.elementAt(0)
reg.setPattern("(aaaa)")
reg.getGroups("xaaaa")
v.size()
v.elementAt(0)
v.elementAt(0)
reg.setPattern("(a+)b(b+)")
reg.getGroups("xaabb")
v.size()
v.elementAt(0)
v.elementAt(1)
v.elementAt(2)
reg.setPattern("^(.*)/src/((.*/)*)([a-zA-Z0-9_\\.]+)\\.java$")
reg.getGroups("de/tom/src/Google.java")
v.size()
v.elementAt(1)
v.elementAt(2)
v.elementAt(3)
v.elementAt(4)
reg.setPattern("aaaa")
reg.matches("AAaa")
reg.matches("AAaa",RegexpMatcher.MATCH_CASE_INSENSITIVE)
reg.setPattern("end of text$")
reg.matches("end of text\u2029")
reg.setPattern("end of text$")
reg.matches("end of text\u2028")
reg.setPattern("end of text$")
reg.matches("end of text\u0085")
reg.setPattern("end of text$")
reg.matches("end of text\r")
reg.setPattern("end of text$")
reg.matches("end of text\r\n")
reg.setPattern("end of text\r$")
reg.matches("end of text\r\n")
reg.setPattern("end of text$")
reg.matches("end of text\n")
doStartTest1(text)
doStartTest2(text)
doEndTest1(text)
doEndTest2(text)
reg.setPattern("^starttest")
reg.matches(text)
reg.matches(text,RegexpMatcher.MATCH_SINGLELINE)
reg.matches(text,RegexpMatcher.MATCH_MULTILINE)
reg.setPattern("^Line1")
reg.matches(text)
reg.matches(text,RegexpMatcher.MATCH_SINGLELINE)
reg.matches(text,RegexpMatcher.MATCH_MULTILINE)
reg.setPattern("endtest$")
reg.matches(text)
reg.matches(text,RegexpMatcher.MATCH_SINGLELINE)
reg.matches(text,RegexpMatcher.MATCH_MULTILINE)
reg.setPattern("Line4$")
reg.matches(text)
reg.matches(text,RegexpMatcher.MATCH_SINGLELINE)
reg.matches(text,RegexpMatcher.MATCH_MULTILINE)
getRegexpImplementation()
getReg()
reg.setPattern(pattern)
reg.matches(test)
reg.substitute(test,"ab\\2d\\1f",Regexp.MATCH_DEFAULT)
getReg()
reg.setPattern(pattern)
reg.matches(test)
reg.substitute(test,"ab\\2d\\1f",Regexp.REPLACE_FIRST)
getReg()
reg.setPattern(pattern)
reg.matches(test)
reg.substitute(test,"ab\\2d\\1f",Regexp.REPLACE_ALL)
setUpFixture()
ds.s.blockSort(ds.data,FIXTURE.length-1)
setUpFixture()
ds.s.mainSort(ds.data,FIXTURE.length-1)
setUpFixture()
ds.s.fallbackSort(ds.data,FIXTURE.length-1)
setUpFixture2()
ds.s.blockSort(ds.data,FIXTURE2.length-1)
setUpFixture2()
ds.s.mainSort(ds.data,FIXTURE2.length-1)
setUpFixture2()
ds.s.fallbackSort(ds.data,FIXTURE2.length-1)
s.fallbackSort(fmap,FIXTURE,FIXTURE.length)
setUpFixture(FIXTURE)
setUpFixture(FIXTURE2)
setUpFixture(FIXTURE)
cb.close()
InetAddress.getLocalHost()
InetAddress.getLocalHost().getHostName()
DummyMailServer.startMailServer(this.local)
testMailServer.getPort()
testMailClient.from("Mail Message <EmailTaskTest@ant.apache.org>")
testMailClient.to("to@you.com")
testMailClient.cc("cc1@you.com")
testMailClient.cc("cc2@you.com")
testMailClient.bcc("bcc@you.com")
testMailClient.setSubject("Test subject")
testMailClient.setMessage("test line 1\n"+"test line 2")
client.start()
client.join(30*1000)
testMailServer.disconnect()
testMailServer.getResult()
testMailClient.getFailMessage()
testMailClient.isFailed()
DummyMailServer.startMailServer(this.local)
testMailServer.getPort()
testMailClient.from("Mail Message <EmailTaskTest@ant.apache.org>")
testMailClient.to("to@you.com")
testMailClient.setSubject("Test subject")
testMailClient.setMessage("test line 1\n"+"test line 2")
client.start()
client.join(30*1000)
testMailServer.disconnect()
testMailServer.getResult()
testMailClient.getFailMessage()
testMailClient.isFailed()
DummyMailServer.startMailServer(this.local)
testMailServer.getPort()
testMailClient.from("Mail Message <EmailTaskTest@ant.apache.org>")
testMailClient.cc("cc@you.com")
testMailClient.setSubject("Test subject")
testMailClient.setMessage("test line 1\n"+"test line 2")
client.start()
client.join(30*1000)
testMailServer.disconnect()
testMailServer.getResult()
testMailClient.getFailMessage()
testMailClient.isFailed()
DummyMailServer.startMailServer(this.local)
testMailServer.getPort()
testMailClient.from("Mail Message <EmailTaskTest@ant.apache.org>")
testMailClient.bcc("bcc@you.com")
testMailClient.setSubject("Test subject")
testMailClient.setMessage("test line 1\n"+"test line 2")
client.start()
client.join(30*1000)
testMailServer.disconnect()
testMailServer.getResult()
testMailClient.getFailMessage()
testMailClient.isFailed()
DummyMailServer.startMailServer(this.local)
testMailServer.getPort()
testMailClient.from("Mail Message <EmailTaskTest@ant.apache.org>")
testMailClient.to("to@you.com")
testMailClient.setMessage("test line 1\n"+"test line 2")
client.start()
client.join(30*1000)
testMailServer.disconnect()
testMailServer.getResult()
testMailClient.getFailMessage()
testMailClient.isFailed()
DummyMailServer.startMailServer(this.local)
testMailServer.getPort()
testMailClient.from("Mail Message <EmailTaskTest@ant.apache.org>")
testMailClient.to("to@you.com")
testMailClient.setSubject("Test subject")
testMailClient.setMessage("")
client.start()
client.join(30*1000)
testMailServer.disconnect()
testMailServer.getResult()
testMailClient.getFailMessage()
testMailClient.isFailed()
DummyMailServer.startMailServer(this.local)
testMailServer.getPort()
testMailClient.from("Mail Message <EmailTaskTest@ant.apache.org>")
testMailClient.to("Ceki G\u00fclc\u00fc <abuse@mail-abuse.org>")
testMailClient.setSubject("Test subject")
testMailClient.setMessage("")
client.start()
client.join(30*1000)
testMailServer.disconnect()
testMailServer.getResult()
bos1.print(expectedResult)
bos2.print(result)
baos1.toString()
baos2.toString()
testMailClient.getFailMessage()
testMailClient.isFailed()
Thread.sleep(10*1000)
msg.from(from)
replyToList.forEach(e->msg.replyto(e))
msg.replyto(e)
msg.to(e)
msg.cc(e)
msg.bcc(e)
msg.setSubject(subject)
msg.getPrintStream()
out.println(message)
msg.sendAndClose()
replyToList.add(replyTo)
toList.add(to)
ccList.add(cc)
bccList.add(bcc)
stream.close()
stream.close()
testLongRoundTripping(TarOutputStream.LONGFILE_GNU)
testLongRoundTripping(TarOutputStream.LONGFILE_POSIX)
LONG_NAME.length()
original.getName()
tos.setLongFileMode(mode)
tos.putNextEntry(original)
tos.closeEntry()
tos.close()
buff.toByteArray()
tis.getNextEntry()
tripped.getName()
tis.getNextEntry()
tis.close()
a.setMode(0123)
a.getMode()
a.setDirectory(true)
a.getMode()
a.setLinkedFile("test")
a.getMode()
a.setMode(0123)
a.setUserId(5)
a.setGroupId(6)
a.getLocalFileDataData()
a.setLinkedFile("test")
a.getLocalFileDataData()
a.parseFromLocalFileData(data,0,data.length)
a.getLocalFileDataLength()
a.getLocalFileDataLength().getValue()
a.isLink()
a.isDirectory()
a.getMode()
a.getUserId()
a.getGroupId()
a.parseFromLocalFileData(data,0,data.length)
a.getLocalFileDataLength()
a.getLocalFileDataLength().getValue()
a.isLink()
a.isDirectory()
a.getMode()
a.getUserId()
a.getGroupId()
a.getLinkedFile()
a.parseFromLocalFileData(data,0,data.length)
a.getLocalFileDataLength()
a.getLocalFileDataLength().getValue()
a.isLink()
a.isDirectory()
a.getMode()
a.getUserId()
a.getGroupId()
thrown.expect(ZipException.class)
thrown.expectMessage("bad CRC checksum 0 instead of ebf018e")
a.parseFromLocalFileData(data,0,data.length)
a.setUserId(42)
a.setGroupId(12)
a.setLinkedFile("foo")
a.setMode(0644)
a.setDirectory(true)
a.clone()
a.getUserId()
s2.getUserId()
a.getGroupId()
s2.getGroupId()
a.getLinkedFile()
s2.getLinkedFile()
a.getMode()
s2.getMode()
a.isDirectory()
s2.isDirectory()
a.setMode(0755)
a.setDirectory(true)
dummy.setHeaderId(UNRECOGNIZED_HEADER)
dummy.setLocalFileDataData(newbyte[]{0})
dummy.setCentralDirectoryData(newbyte[]{0})
a.getLocalFileDataData()
dummy.getLocalFileDataData()
System.arraycopy(a.getHeaderId().getBytes(),0,data,0,2)
a.getHeaderId()
a.getHeaderId().getBytes()
System.arraycopy(a.getLocalFileDataLength().getBytes(),0,data,2,2)
a.getLocalFileDataLength()
a.getLocalFileDataLength().getBytes()
System.arraycopy(aLocal,0,data,4,aLocal.length)
System.arraycopy(dummy.getHeaderId().getBytes(),0,data,4+aLocal.length,2)
dummy.getHeaderId()
dummy.getHeaderId().getBytes()
System.arraycopy(dummy.getLocalFileDataLength().getBytes(),0,data,4+aLocal.length+2,2)
dummy.getLocalFileDataLength()
dummy.getLocalFileDataLength().getBytes()
System.arraycopy(dummyLocal,0,data,4+aLocal.length+4,dummyLocal.length)
thrown.expect(ZipException.class)
thrown.expectMessage("bad extra field starting at "+(4+aLocal.length)+".  Block length of 1 bytes exceeds remaining data of 0 bytes.")
ExtraFieldUtils.parse(data)
instanceOf(AsiExtraField.class)
((AsiExtraField)ze[0]).getMode()
instanceOf(UnrecognizedExtraField.class)
ze[1].getLocalFileDataLength()
ze[1].getLocalFileDataLength().getValue()
System.arraycopy(data,0,data2,0,data2.length)
ExtraFieldUtils.parse(data2)
ExtraFieldUtils.parse(data,true,ExtraFieldUtils.UnparseableExtraField.READ)
instanceOf(AsiExtraField.class)
((AsiExtraField)ze[0]).getMode()
instanceOf(UnrecognizedExtraField.class)
ze[1].getLocalFileDataLength()
ze[1].getLocalFileDataLength().getValue()
System.arraycopy(data,0,data2,0,data2.length)
ExtraFieldUtils.parse(data2,true,ExtraFieldUtils.UnparseableExtraField.READ)
instanceOf(AsiExtraField.class)
((AsiExtraField)ze[0]).getMode()
instanceOf(UnparseableExtraFieldData.class)
ze[1].getLocalFileDataLength()
ze[1].getLocalFileDataLength().getValue()
ze[1].getLocalFileDataData()
ExtraFieldUtils.parse(data,true,ExtraFieldUtils.UnparseableExtraField.SKIP)
instanceOf(AsiExtraField.class)
((AsiExtraField)ze[0]).getMode()
instanceOf(UnrecognizedExtraField.class)
ze[1].getLocalFileDataLength()
ze[1].getLocalFileDataLength().getValue()
System.arraycopy(data,0,data2,0,data2.length)
ExtraFieldUtils.parse(data2,true,ExtraFieldUtils.UnparseableExtraField.SKIP)
instanceOf(AsiExtraField.class)
((AsiExtraField)ze[0]).getMode()
ExtraFieldUtils.mergeLocalFileDataData(newZipExtraField[]{a,dummy})
dummy.getCentralDirectoryData()
System.arraycopy(data,0,data2,0,4+aLocal.length+2)
System.arraycopy(dummy.getCentralDirectoryLength().getBytes(),0,data2,4+aLocal.length+2,2)
dummy.getCentralDirectoryLength()
dummy.getCentralDirectoryLength().getBytes()
System.arraycopy(dummyCentral,0,data2,4+aLocal.length+4,dummyCentral.length)
ExtraFieldUtils.mergeCentralDirectoryData(newZipExtraField[]{a,dummy})
UNRECOGNIZED_HEADER.getBytes()
d.parseFromLocalFileData(newbyte[]{b[0],b[1],1,0},0,4)
ExtraFieldUtils.mergeLocalFileDataData(newZipExtraField[]{a,d})
d.getCentralDirectoryData()
System.arraycopy(data,0,data2,0,4+aLocal.length+2)
System.arraycopy(dCentral,0,data2,4+aLocal.length,dCentral.length)
ExtraFieldUtils.mergeCentralDirectoryData(newZipExtraField[]{a,d})
testFileRoundtrip(UTF_8,true,true)
testFileRoundtrip(UTF_8,false,true)
testFileRoundtrip(CP437,false,true)
testFileRoundtrip(US_ASCII,false,true)
testFileRoundtrip(UTF_8,true,false)
testFileRoundtrip(UTF_8,false,false)
testFileRoundtrip(CP437,false,false)
testFileRoundtrip(US_ASCII,false,false)
File.createTempFile("unicode-test",".zip")
createTestFile(file,US_ASCII,false,true)
ZipFile.closeQuietly(zf)
file.exists()
file.delete()
File.createTempFile(encoding+"-test",".zip")
createTestFile(file,encoding,withEFS,withExplicitUnicodeExtra)
testFile(file,encoding)
file.exists()
file.delete()
ZipEncodingHelper.getZipEncoding(encoding)
zos.setEncoding(encoding)
zos.setUseLanguageEncodingFlag(withEFS)
zos.setCreateUnicodeExtraFields(withExplicitUnicodeExtra?ZipOutputStream.UnicodeExtraFieldPolicy.NEVER:ZipOutputStream.UnicodeExtraFieldPolicy.ALWAYS)
zipEncoding.canEncode(ze.getName())
ze.getName()
zipEncoding.encode(ze.getName())
ze.getName()
ze.addExtraField(newUnicodePathExtraField(ze.getName(),en.array(),en.arrayOffset(),en.limit()))
ze.getName()
en.array()
en.arrayOffset()
en.limit()
zos.putNextEntry(ze)
zos.write("Hello, world!".getBytes(StandardCharsets.US_ASCII))
"Hello, world!".getBytes(StandardCharsets.US_ASCII)
zos.closeEntry()
zipEncoding.canEncode(ze.getName())
ze.getName()
zipEncoding.encode(ze.getName())
ze.getName()
ze.addExtraField(newUnicodePathExtraField(ze.getName(),en.array(),en.arrayOffset(),en.limit()))
ze.getName()
en.array()
en.arrayOffset()
en.limit()
zos.putNextEntry(ze)
zos.write("Give me your money!".getBytes(StandardCharsets.US_ASCII))
"Give me your money!".getBytes(StandardCharsets.US_ASCII)
zos.closeEntry()
zipEncoding.canEncode(ze.getName())
ze.getName()
zipEncoding.encode(ze.getName())
ze.getName()
ze.addExtraField(newUnicodePathExtraField(ze.getName(),en.array(),en.arrayOffset(),en.limit()))
ze.getName()
en.array()
en.arrayOffset()
en.limit()
zos.putNextEntry(ze)
zos.write("ascii".getBytes(StandardCharsets.US_ASCII))
"ascii".getBytes(StandardCharsets.US_ASCII)
zos.closeEntry()
Collections.list(zf.getEntries())
zf.getEntries()
ze.getName()
ze.getName().endsWith("sser.txt")
ze.getName()
ze.getName().endsWith("_for_Dollar.txt")
ze.getName()
ze.getName().equals(ASCII_TXT)
ze.getName()
ZipFile.closeQuietly(zf)
ze.getExtraField(UnicodePathExtraField.UPATH_ID)
expectedName.equals(ze.getName())
ze.getName()
findUniCodePath(ze)
ZipEncodingHelper.getZipEncoding(encoding)
enc.encode(ze.getName())
ze.getName()
crc.update(ne.array(),ne.arrayOffset(),ne.limit())
ne.array()
ne.arrayOffset()
ne.limit()
crc.getValue()
ucpf.getNameCRC32()
ucpf.getUnicodeName()
zf.getEntry(fileName)
zf.getInputStream(entry)
is.read()
doSimpleEncodingTest("Cp437",null)
doSimpleEncodingTest("Cp850",null)
doSimpleEncodingTest("Cp1252",b)
actual.limit()
actual.get()
ZipEncodingHelper.getZipEncoding(name)
enc.decode(testBytes)
enc.canEncode(decoded)
enc.encode(decoded)
enc.canEncode(UNENC_STRING)
"%U2016".getBytes(StandardCharsets.US_ASCII)
enc.encode(UNENC_STRING)
enc.canEncode(BAD_STRING)
BAD_STRING_ENC.getBytes(StandardCharsets.US_ASCII)
enc.encode(BAD_STRING)
a.setDirectory(true)
a.setMode(0755)
u.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER)
u.setLocalFileDataData(newbyte[0])
ze.setExtraFields(newZipExtraField[]{a,u})
ze.getExtra()
ze.getExtraFields()
u2.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER)
u2.setLocalFileDataData(newbyte[]{1})
ze.addExtraField(u2)
ze.getExtra()
ze.getExtraFields()
u3.setHeaderId(newZipShort(2))
u3.setLocalFileDataData(newbyte[]{1})
ze.addExtraField(u3)
ze.getExtraFields()
ze.removeExtraField(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER)
ze.getExtra()
ze.getExtraFields()
thrown.expect(NoSuchElementException.class)
ze.removeExtraField(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER)
a.setDirectory(true)
a.setMode(0755)
u.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER)
u.setLocalFileDataData(newbyte[0])
ze.setExtraFields(newZipExtraField[]{a,u})
ExtraFieldUtilsTest.UNRECOGNIZED_HEADER.getBytes()
ze.setCentralDirectoryExtra(newbyte[]{b[0],b[1],1,0,127})
ze.getExtraFields()
result[1].getHeaderId()
result[1].getLocalFileDataLength()
result[1].getCentralDirectoryLength()
ze.setCentralDirectoryExtra(newbyte[]{2,0,0,0})
ze.getExtraFields()
ze.setExtra(newbyte[]{2,0,1,0,127})
ze.getExtraFields()
result[2].getHeaderId()
result[2].getLocalFileDataLength()
result[2].getCentralDirectoryLength()
a.setDirectory(true)
a.setMode(0755)
u.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER)
u.setLocalFileDataData(newbyte[0])
ze.setExtraFields(newZipExtraField[]{a,u})
ze.getExtra()
u2.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER)
u2.setLocalFileDataData(newbyte[]{1})
ze.addAsFirstExtraField(u2)
ze.getExtra()
ze.getExtraFields()
u3.setHeaderId(newZipShort(2))
u3.setLocalFileDataData(newbyte[]{1})
ze.addAsFirstExtraField(u3)
ze.getExtraFields()
ze.getPlatform()
ze.setUnixMode(0755)
ze.getPlatform()
ze.getExternalAttributes()
ze.getExternalAttributes()
ze.setUnixMode(0444)
ze.getPlatform()
ze.getExternalAttributes()
ze.getExternalAttributes()
ze.getPlatform()
ze.setUnixMode(0777)
ze.getPlatform()
ze.getExternalAttributes()
ze.getExternalAttributes()
ze.setUnixMode(0577)
ze.getPlatform()
ze.getExternalAttributes()
ze.getExternalAttributes()
archiveEntry.setUnixMode(0664)
archiveEntry.setMethod(ZipEntry.DEFLATED)
archiveEntry.getGeneralPurposeBit()
archiveEntry.getGeneralPurposeBit().useStrongEncryption(true)
zl.getBytes()
zl.getValue()
zl.getValue()
s1.clone()
s1.getValue()
s2.getValue()
Calendar.getInstance()
cal.setTime(time)
cal.get(Calendar.YEAR)
cal.get(Calendar.MONTH)
cal.get(Calendar.DAY_OF_MONTH)
cal.get(Calendar.HOUR_OF_DAY)
cal.get(Calendar.MINUTE)
cal.get(Calendar.SECOND)
ZipUtil.toDosTime(time)
test.getValue()
zl.getValue()
ZipUtil.adjustToLong(Integer.MAX_VALUE)
ZipUtil.adjustToLong(Integer.MAX_VALUE+1)
ZipUtil.adjustToLong(2*Integer.MAX_VALUE)
zs.getBytes()
zs.getValue()
zs.getValue()
s1.clone()
s1.getValue()
s2.getValue()
XMLReaderFactory.createXMLReader("org.apache.xerces.parsers.SAXParser")
XMLReaderFactory.createXMLReader("org.apache.xerces.parsers.SAXParser")
xerces.setFeature("http://apache.org/xml/features/validation/schema",true)
XMLReaderFactory.createXMLReader()
xerces.setFeature("http://apache.org/xml/features/validation/schema",true)
System.out.println(message)
System.out.print("<some-other-message>Hello world! <!-- some comment --></some-other-message>")
fail("intentionally failing")
System.getProperty(SYS_PROP_ONE)
fail("An error message")
fail("An error message")
rule.configureProject("build.xml")
rule.executeTarget("use.simple")
rule.getLog()
rule.configureProject("build.xml")
tried.expect(BuildException.class)
tried.expectMessage("file not set")
find.execute()
tried.expect(BuildException.class)
tried.expectMessage("location not set")
find.setFile("ant.jar")
find.execute()
tried.expect(BuildException.class)
tried.expectMessage("fileset not set")
find.setFile("ant.jar")
find.setLocation("location.ant-jar")
find.execute()
rule.executeTarget("testFileNotPresent")
rule.getProject()
rule.getProject().getProperty("location.ant-jar")
rule.executeTarget("testFilePresent")
rule.getProject()
rule.getProject().getProperty("location.ant-jar")
result.endsWith("ant.jar")
rule.configureProject("build.xml")
tried.expect(BuildException.class)
tried.expectMessage("file not set")
find.execute()
tried.expect(BuildException.class)
tried.expectMessage("location not set")
find.setFile("ant.jar")
find.execute()
tried.expect(BuildException.class)
tried.expectMessage("path not set")
find.setFile("ant.jar")
find.setLocation("location.ant-jar")
find.execute()
rule.executeTarget("testFileNotPresent")
rule.getProject()
rule.getProject().getProperty("location.ant-jar")
rule.executeTarget("testFilePresent")
rule.getProject()
rule.getProject().getProperty("location.ant-jar")
result.endsWith("ant.jar")
rule.configureProject("build.xml")
tried.expect(BuildException.class)
tried.expectMessage("file not set")
find.execute()
tried.expect(BuildException.class)
tried.expectMessage("location not set")
find.setFile("ant.jar")
find.execute()
tried.expect(BuildException.class)
tried.expectMessage("path not set")
find.setFile("ant.jar")
find.setLocation("location.ant-jar")
find.execute()
rule.executeTarget("testFileNotPresent")
rule.getProject()
rule.getProject().getProperty("location.ant-jar")
rule.executeTarget("testFilePresent")
rule.getProject()
rule.getProject().getProperty("location.ant-jar")
result.endsWith("ant.jar")
rule.executeTarget("testMultipleFiles")
rule.getProject()
rule.getProject().getProperty("location.test")
result.contains(";")
rule.configureProject("build.xml")
tried.expect(BuildException.class)
tried.expectMessage("file not set")
find.execute()
tried.expect(BuildException.class)
tried.expectMessage("location not set")
find.setFile("ant.jar")
find.execute()
tried.expect(BuildException.class)
tried.expectMessage("path not set")
find.setFile("ant.jar")
find.setLocation("location.ant-jar")
find.execute()
rule.executeTarget("testFileNotPresent")
rule.getProject()
rule.getProject().getProperty("location.ant-jar")
rule.executeTarget("testFilePresent")
rule.getProject()
rule.getProject().getProperty("location.ant-jar")
result.endsWith("ant.jar")
rule.executeTarget("testMultipleFiles")
rule.getProject()
rule.getProject().getProperty("location.test")
result.contains(";")
rule.configureProject("build.xml")
rule.executeTarget("use.without")
rule.getLog()
rule.executeTarget("use.message")
rule.getLog()
tried.expect(BuildException.class)
tried.expectMessage("Fail requested.")
rule.executeTarget("use.fail")
rule.executeTarget("use.nestedText")
rule.getLog()
rule.executeTarget("use.nestedElement")
rule.getLog()
rule.getLog().contains("Nested Element 1")
rule.getLog()
rule.getLog().contains("Nested Element 2")
